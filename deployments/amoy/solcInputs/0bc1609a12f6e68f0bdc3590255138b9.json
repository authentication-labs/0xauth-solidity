{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "src/factory/IIdFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface IIdFactory {\n  /// events\n\n\t// AddedKey to notify everyone when key added without listening to long list of identity addresses\n\tevent AddedKey(address user, bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n\t// AddedClaim to notify everyone when claim0x5119478394F78463CF6aBb254982f89D480DA2A6 added without listening to long list of identity addresses\n\tevent AddedClaim(\n    address indexed user,\n\t\tuint256 indexed topic,\n\t\tuint256 scheme,\n\t\taddress indexed issuer,\n\t\tbytes signature,\n\t\tbytes data,\n\t\tstring uri\n\t);\n  // event emitted whenever a single contract is deployed by the factory\n  event Deployed(address indexed _addr);\n\n  // event emitted when a wallet is linked to an ONCHAINID contract\n  event WalletLinked(address indexed wallet, address indexed identity);\n\n  // event emitted when a token is linked to an ONCHAINID contract\n  event TokenLinked(address indexed token, address indexed identity);\n\n  // event emitted when a wallet is unlinked from an ONCHAINID contract\n  event WalletUnlinked(address indexed wallet, address indexed identity);\n\n  // event emitted when an address is registered on the factory as a Token\n  // factory address, granting this address the privilege to issue\n  // Onchain identities for tokens\n  event TokenFactoryAdded(address indexed factory);\n\n  // event emitted when a previously recorded token factory address is removed\n  event TokenFactoryRemoved(address indexed factory);\n\n  // event emitted when a receiver is added for a chainSelector\n  event ReceiverAdded(uint64 chainSelector, address receiver, address gateway);\n\n  // event emitted when a receiver is removed for a chainSelector\n  event ReceiverRemoved(uint64 chainSelector);\n\n  /// functions\n\n  /**\n   *  @dev function used to create a new Identity proxy from the factory\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n   *  @param _salt the salt used by create2 to issue the contract\n   *  requires a new salt for each deployment\n   *  _wallet cannot be linked to another ONCHAINID\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n   *  of the function, including calls to oracles for multichain\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\n   */\n  function createIdentity(address _wallet, string memory _salt) external returns (address);\n\n  /**\n   *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\n   * MANAGEMENT keys.\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n   *  @param _salt the salt used by create2 to issue the contract\n   *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\n   *  requires a new salt for each deployment\n   *  _wallet cannot be linked to another ONCHAINID\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n   *  of the function, including calls to oracles for multichain\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\n   */\n  function createIdentityWithManagementKeys(\n    address _wallet,\n    string memory _salt,\n    bytes32[] memory _managementKeys\n  ) external returns (address);\n\n  /**\n   *  @dev function used to create a new Token Identity proxy from the factory\n   *  @param _token the address of the token contract\n   *  @param _tokenOwner the owner address of the token\n   *  @param _salt the salt used by create2 to issue the contract\n   *  requires a new salt for each deployment\n   *  _token cannot be linked to another ONCHAINID\n   *  only Token factory or owner can call (owner should only use its privilege\n   *  for tokens not issued by a Token factory onchain\n   */\n  function createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\n\n  /**\n   * @dev function used to update bridge contract address\n   * @param _bridge the address of the bridge contract\n   * can be called only by Owner\n   */\n\n  function setBridge(address _bridge) external;\n\n  /**\n   *  @dev function used to link a new wallet to an existing identity\n   *  @param _newWallet the address of the wallet to link\n   *  requires msg.sender to be linked to an existing onchainid\n   *  the _newWallet will be linked to the same OID contract as msg.sender\n   *  _newWallet cannot be linked to an OID yet\n   *  _newWallet cannot be address 0\n   *  cannot link more than 100 wallets to an OID, for gas consumption reason\n   */\n  function linkWallet(address _newWallet) external;\n\n  /**\n   *  @dev function used to unlink a wallet from an existing identity\n   *  @param _oldWallet the address of the wallet to unlink\n   *  requires msg.sender to be linked to the same onchainid as _oldWallet\n   *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\n   *  _oldWallet cannot be address 0\n   */\n  function unlinkWallet(address _oldWallet) external;\n\n  /**\n   *  @dev function used to register an address as a token factory\n   *  @param _factory the address of the token factory\n   *  can be called only by Owner\n   *  _factory cannot be registered yet\n   *  once the factory has been registered it can deploy token identities\n   */\n  function addTokenFactory(address _factory) external;\n\n  /**\n   *  @dev function used to unregister an address previously registered as a token factory\n   *  @param _factory the address of the token factory\n   *  can be called only by Owner\n   *  _factory has to be registered previously\n   *  once the factory has been unregistered it cannot deploy token identities anymore\n   */\n  function removeTokenFactory(address _factory) external;\n\n  /**\n   *  @dev function used to add a receiver for a chainSelector\n   *  @param _chainSelector the chainSelector for which the receiver is added\n   *  @param _receiver the address of the receiver\n   *  @param _gateway the address of the gateway\n   *  can be called only by Owner\n   *  _receiver cannot be registered yet\n   *  once the receiver has been registered it can receive messages from the chainSelector\n   */\n  function addReceiver(uint64 _chainSelector, address _receiver, address _gateway) external;\n\n  /**\n   *  @dev function used to remove a receiver for a chainSelector\n   *  @param _chainSelector the chainSelector for which the receiver is removed\n   *  can be called only by Owner\n   *  _receiver has to be registered previously\n   *  once the receiver has been removed it cannot receive messages from the chainSelector anymore\n   */\n  function removeReceiver(uint64 _chainSelector) external;\n\n  /**\n   *  @dev getter for OID contract corresponding to a wallet/token\n   *  @param _wallet the wallet/token address\n   */\n  function getIdentity(address _wallet) external view returns (address);\n\n  /**\n   *  @dev getter to fetch the array of wallets linked to an OID contract\n   *  @param _identity the address of the OID contract\n   *  returns an array of addresses linked to the OID\n   */\n  function getWallets(address _identity) external view returns (address[] memory);\n\n  /**\n   *  @dev getter to fetch the token address linked to an OID contract\n   *  @param _identity the address of the OID contract\n   *  returns the address linked to the OID\n   */\n  function getToken(address _identity) external view returns (address);\n\n  /**\n   *  @dev getter to know if an address is registered as token factory or not\n   *  @param _factory the address of the factory\n   *  returns true if the address corresponds to a registered factory\n   */\n  function isTokenFactory(address _factory) external view returns (bool);\n\n  /**\n   *  @dev getter to know if a salt is taken for the create2 deployment\n   *  @param _salt the salt used for deployment\n   */\n  function isSaltTaken(string calldata _salt) external view returns (bool);\n\n  /**\n   * @dev getter for the implementation authority used by this factory.\n   */\n  function implementationAuthority() external view returns (address);\n\n  /**\n   * @dev getter for the receiver of a chainSelector\n   * @param _chainSelector the chainSelector for which the receiver is fetched\n   */\n  function getReceiver(uint64 _chainSelector) external view returns (address);\n\n  /**\n   * @dev getter for the list of chainSelectors\n   */\n  function getChainSelectors() external view returns (uint64[] memory);\n\n  /**\n   * @dev getter for the list of receivers\n   */\n  function getReceivers() external view returns (address[] memory);\n\n  /**\n   * @dev getter for the bridge contract address\n   */\n  function bridge() external view returns (address);\n\n  /**\n   * @dev getter for the created Identites\n   */\n  function identityIsCreated(address identity) external view returns (bool);\n\n  function addedKey(\n    bool _isTrue,\n    bytes32 _key,\n    uint256 _purpose,\n    uint256 _type\n    ) external;\n\n    function addedClaim(\n    bool _isTrue,\n    uint256 _topic,\n    uint256 _scheme,\n    address _issuer,\n    bytes memory _signature,\n    bytes memory _data,\n    string memory _uri\n    ) external;\n}\n"
    },
    "src/gated/xAuthAccessRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\nimport '../interface/IAccessRegistry.sol';\nimport '../factory/IIdFactory.sol';\nimport '../interface/IClaimIssuer.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract xAuthAccessRegistry is IAccessRegistry, Ownable {\n  IIdFactory public factory;\n  IClaimIssuer public claimIssuer;\n\n  mapping(bytes32 => bool) public access;\n  mapping(address => bytes32) public fundsContract;\n  mapping(bytes32 => uint256[]) public requiredClaims;\n\n  event AccessGranted(bytes32 fundId, address identityAddr);\n  event AccessRevoked(bytes32 fundId, address identityAddr);\n  event RequiredClaimsUpdated(bytes32 fundId, uint256[] claimTopics);\n\n  constructor(IIdFactory _factory, IClaimIssuer _claimIssuer) Ownable() {\n    factory = _factory;\n    claimIssuer = _claimIssuer;\n  }\n\n  function hasAccess(address account, address caller, bytes calldata data) external view override returns (bool) {\n    address senderIdentity = factory.getIdentity(account);\n\n    // require(senderIdentity != address(0), 'sender identity is null');\n\n    // extract data\n\n    (address recipient, uint256 amount) = abi.decode(data[4:], (address, uint256));\n\n    address receiverIdentity = factory.getIdentity(recipient);\n\n    require(senderIdentity != address(0), 'receiver identity is null');\n\n    // check the recipient has access to institutional contract\n\n    bytes32 fundId = fundsContract[msg.sender];\n    require(access[computeKey(fundId, receiverIdentity)] == true, \"receiver identity doesn't have access\");\n\n    // check the recipient has require claims\n    uint256[] memory requiredClaimTopics = requiredClaims[fundId];\n\n    for (uint256 i = 0; i < requiredClaimTopics.length; ++i) {\n      bytes32 claimId = keccak256(abi.encode(claimIssuer, requiredClaimTopics[i]));\n\n      (uint256 topic, , , bytes memory signature, bytes memory claimData, ) = IIdentity(receiverIdentity).getClaim(\n        claimId\n      );\n\n      bool isValid = claimIssuer.isClaimValid(IIdentity(receiverIdentity), topic, signature, claimData);\n      require(isValid, 'Claim is not valid');\n    }\n\n    return true;\n  }\n\n  function grantAccess(bytes32 fundId, address identityAddr) public onlyOwner {\n    bytes32 key = computeKey(fundId, identityAddr);\n    access[key] = true;\n    emit AccessGranted(fundId, identityAddr);\n  }\n\n  function updateRequiredClaims(bytes32 fundId, uint256[] calldata claimTopics) public onlyOwner {\n    requiredClaims[fundId] = claimTopics;\n    emit RequiredClaimsUpdated(fundId, claimTopics);\n  }\n\n  function revokeAccess(bytes32 fundId, address identityAddr) public onlyOwner {\n    bytes32 key = computeKey(fundId, identityAddr);\n    access[key] = false;\n    emit AccessRevoked(fundId, identityAddr);\n  }\n\n  function computeKey(bytes32 fundId, address identityAddr) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(fundId, identityAddr));\n  }\n}\n"
    },
    "src/interface/IAccessRegistry.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\npragma solidity 0.8.17;\n\n/**\n * @title Access Registry Interface\n * @author Fireblocks\n * @notice Access Registry Interface serves as a generalized interface for interacting with the Access Registry.\n *\n * @dev Interface for the Access Registry features.\n */\ninterface IAccessRegistry {\n  /**\n   * @notice This function is used to check if the account has necessary permissions to access the system.\n   * @param account The account to be checked.\n   * @param caller The account calling the function requiring an access check.\n   * @param data The data associated with the function call\n   * @return true if the account is allowed to access the system (false otherwise).\n   */\n  function hasAccess(address account, address caller, bytes calldata data) external view returns (bool);\n}\n"
    },
    "src/interface/IClaimIssuer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport \"./IIdentity.sol\";\n\ninterface IClaimIssuer is IIdentity {\n\t/**\n\t * @dev Emitted when a claim is revoked.\n\t *\n\t * Specification: MUST be triggered when revoking a claim.\n\t */\n\tevent ClaimRevoked(bytes indexed signature);\n\n\t/**\n\t * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n\t * @notice will fetch the claim from the identity contract (unsafe).\n\t * @param _claimId the id of the claim\n\t * @param _identity the address of the identity contract\n\t * @return isRevoked true when the claim is revoked\n\t */\n\tfunction revokeClaim(bytes32 _claimId, address _identity) external returns (bool);\n\n\t/**\n\t * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\n\t * @param signature the signature of the claim\n\t */\n\tfunction revokeClaimBySignature(bytes calldata signature) external;\n\n\t/**\n\t * @dev Returns revocation status of a claim.\n\t * @param _sig the signature of the claim\n\t * @return isRevoked true if the claim is revoked and false otherwise\n\t */\n\tfunction isClaimRevoked(bytes calldata _sig) external view returns (bool);\n\n\t/**\n\t * @dev Checks if a claim is valid.\n\t * @param _identity the identity contract related to the claim\n\t * @param claimTopic the claim topic of the claim\n\t * @param sig the signature of the claim\n\t * @param data the data field of the claim\n\t * @return claimValid true if the claim is valid, false otherwise\n\t */\n\tfunction isClaimValid(\n\t\tIIdentity _identity,\n\t\tuint256 claimTopic,\n\t\tbytes calldata sig,\n\t\tbytes calldata data\n\t) external view returns (bool);\n}\n"
    },
    "src/interface/IERC734.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\n/**\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\n */\ninterface IERC734 {\n\t/**\n\t * @dev Emitted when an execution request was approved.\n\t *\n\t * Specification: MUST be triggered when approve was successfully called.\n\t */\n\tevent Approved(uint256 indexed executionId, bool approved);\n\n\t/**\n\t * @dev Emitted when an execute operation was approved and successfully performed.\n\t *\n\t * Specification: MUST be triggered when approve was called and the execution was successfully approved.\n\t */\n\tevent Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n\t/**\n\t * @dev Emitted when an execution request was performed via `execute`.\n\t *\n\t * Specification: MUST be triggered when execute was successfully called.\n\t */\n\tevent ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n\t/**\n\t * @dev Emitted when an execute operation was called and failed\n\t *\n\t * Specification: MUST be triggered when execute call failed\n\t */\n\tevent ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n\n\t/**\n\t * @dev Emitted when a key was added to the Identity.\n\t *\n\t * Specification: MUST be triggered when addKey was successfully called.\n\t */\n\tevent KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n\t/**\n\t * @dev Emitted when a key was removed from the Identity.\n\t *\n\t * Specification: MUST be triggered when removeKey was successfully called.\n\t */\n\tevent KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n\n\n\t/**\n\t * \n\t * @dev Returns True if call is coming from Identity Contract\n\t */\n\tfunction isComingFromIdentity(bool done) external returns (bool);\n\t\n\t/**\n\t * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\n\t *\n\t * Triggers Event: `KeyAdded`\n\t *\n\t * Specification: MUST only be done by keys of purpose 1, or the identity\n\t * itself. If it's the identity itself, the approval process will determine its approval.\n\t */\n\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\n\n\t/**\n\t * @dev Approves an execution.\n\t *\n\t * Triggers Event: `Approved`\n\t * Triggers on execution successful Event: `Executed`\n\t * Triggers on execution failure Event: `ExecutionFailed`\n\t */\n\tfunction approve(uint256 _id, bool _approve) external returns (bool success);\n\n\t/**\n\t * @dev Removes _purpose for _key from the identity.\n\t *\n\t * Triggers Event: `KeyRemoved`\n\t *\n\t * Specification: MUST only be done by keys of purpose 1, or the identity itself.\n\t * If it's the identity itself, the approval process will determine its approval.\n\t */\n\tfunction removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\n\n\t/**\n\t * @dev Passes an execution instruction to an ERC734 identity.\n\t * How the execution is handled is up to the identity implementation:\n\t * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\n\t * approve this execution.\n\t * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\n\t *\n\t * Triggers Event: ExecutionRequested\n\t * Triggers on direct execution Event: Executed\n\t */\n\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\n\n\t/**\n\t * @dev Returns the full key data, if present in the identity.\n\t */\n\tfunction getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\n\n\t/**\n\t * @dev Returns the list of purposes associated with a key.\n\t */\n\tfunction getKeyPurposes(bytes32 _key) external view returns (uint256[] memory _purposes);\n\n\t/**\n\t * @dev Returns an array of public key bytes32 held by this identity.\n\t */\n\tfunction getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\n\n\t/**\n\t * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\n\t */\n\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\n}\n"
    },
    "src/interface/IERC735.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\n/**\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\n */\ninterface IERC735 {\n\t/**\n\t * @dev Emitted when a claim was added.\n\t *\n\t * Specification: MUST be triggered when a claim was successfully added.\n\t */\n\tevent ClaimAdded(\n\t\tbytes32 indexed claimId,\n\t\tuint256 indexed topic,\n\t\tuint256 scheme,\n\t\taddress indexed issuer,\n\t\tbytes signature,\n\t\tbytes data,\n\t\tstring uri\n\t);\n\n\t/**\n\t * @dev Emitted when a claim was removed.\n\t *\n\t * Specification: MUST be triggered when removeClaim was successfully called.\n\t */\n\tevent ClaimRemoved(\n\t\tbytes32 indexed claimId,\n\t\tuint256 indexed topic,\n\t\tuint256 scheme,\n\t\taddress indexed issuer,\n\t\tbytes signature,\n\t\tbytes data,\n\t\tstring uri\n\t);\n\n\t/**\n\t * @dev Emitted when a claim was changed.\n\t *\n\t * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\n\t */\n\tevent ClaimChanged(\n\t\tbytes32 indexed claimId,\n\t\tuint256 indexed topic,\n\t\tuint256 scheme,\n\t\taddress indexed issuer,\n\t\tbytes signature,\n\t\tbytes data,\n\t\tstring uri\n\t);\n\n\t/**\n\t * @dev Add or update a claim.\n\t *\n\t * Triggers Event: `ClaimAdded`, `ClaimChanged`\n\t *\n\t * Specification: Add or update a claim from an issuer.\n\t *\n\t * _signature is a signed message of the following structure:\n\t * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\n\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\n\t */\n\tfunction addClaim(\n\t\tuint256 _topic,\n\t\tuint256 _scheme,\n\t\taddress issuer,\n\t\tbytes calldata _signature,\n\t\tbytes calldata _data,\n\t\tstring calldata _uri\n\t) external returns (bytes32 claimRequestId);\n\n\t/**\n\t * @dev Removes a claim.\n\t *\n\t * Triggers Event: `ClaimRemoved`\n\t *\n\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n\t */\n\tfunction removeClaim(bytes32 _claimId) external returns (bool success);\n\n\t/**\n\t * @dev Get a claim by its ID.\n\t *\n\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\n\t */\n\tfunction getClaim(\n\t\tbytes32 _claimId\n\t)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256 topic,\n\t\t\tuint256 scheme,\n\t\t\taddress issuer,\n\t\t\tbytes memory signature,\n\t\t\tbytes memory data,\n\t\t\tstring memory uri\n\t\t);\n\n\t/**\n\t * @dev Returns an array of claim IDs by topic.\n\t */\n\tfunction getClaimIdsByTopic(uint256 _topic) external view returns (bytes32[] memory claimIds);\n}\n"
    },
    "src/interface/IIdentity.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport \"./IERC734.sol\";\nimport \"./IERC735.sol\";\n\n// solhint-disable-next-line no-empty-blocks\ninterface IIdentity is IERC734, IERC735 {\n\t/**\n\t * @dev Checks if a claim is valid.\n\t * @param _identity the identity contract related to the claim\n\t * @param claimTopic the claim topic of the claim\n\t * @param sig the signature of the claim\n\t * @param data the data field of the claim\n\t * @return claimValid true if the claim is valid, false otherwise\n\t */\n\tfunction isClaimValid(\n\t\tIIdentity _identity,\n\t\tuint256 claimTopic,\n\t\tbytes calldata sig,\n\t\tbytes calldata data\n\t) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}