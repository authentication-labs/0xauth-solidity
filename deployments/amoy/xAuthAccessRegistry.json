{
  "address": "0x46d0228a8Cb6f3F13292453ecAeDaAB6fd109036",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IIdFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IClaimIssuer",
          "name": "_claimIssuer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "AccessGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "AccessRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "RequiredClaimsUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "access",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimIssuer",
      "outputs": [
        {
          "internalType": "contract IClaimIssuer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "computeKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IIdFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fundsContract",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "grantAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requiredClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "revokeAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "updateRequiredClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79f30e46a4958939c535d22d9d4c65b0d4b4523a25f240b105fe3992a65f7f27",
  "receipt": {
    "to": null,
    "from": "0x820F4c6eeF2DbACD463037571ccBDB761fd08AA1",
    "contractAddress": "0x46d0228a8Cb6f3F13292453ecAeDaAB6fd109036",
    "transactionIndex": 7,
    "gasUsed": "886216",
    "logsBloom": "0x
    "blockHash": "0x3c68b928f2b39d79aec1da92597243faca974739148bc000130e16e945c5ed51",
    "transactionHash": "0x79f30e46a4958939c535d22d9d4c65b0d4b4523a25f240b105fe3992a65f7f27",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 13817937,
        "transactionHash": "0x79f30e46a4958939c535d22d9d4c65b0d4b4523a25f240b105fe3992a65f7f27",
        "address": "0x46d0228a8Cb6f3F13292453ecAeDaAB6fd109036",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000820f4c6eef2dbacd463037571ccbdb761fd08aa1"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x3c68b928f2b39d79aec1da92597243faca974739148bc000130e16e945c5ed51"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 13817937,
        "transactionHash": "0x79f30e46a4958939c535d22d9d4c65b0d4b4523a25f240b105fe3992a65f7f27",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000820f4c6eef2dbacd463037571ccbdb761fd08aa1",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000068e4da5b4f7928000000000000000000000000000000000000000000000000140e4ff6454b9b43000000000000000000000000000000000000000000000361fba769e0635b15c000000000000000000000000000000000000000000000000013a56b1be9fc221b000000000000000000000000000000000000000000000361fc104ebabeaa8ee8",
        "logIndex": 12,
        "blockHash": "0x3c68b928f2b39d79aec1da92597243faca974739148bc000130e16e945c5ed51"
      }
    ],
    "blockNumber": 13817937,
    "cumulativeGasUsed": "1324244",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5728B9736E1784cB7086A871fAb27a7CD8FC9042",
    "0x5ECA35D6b9e5cad23DD4033df2d5dC77999e7bF2"
  ],
  "numDeployments": 1,
  "solcInputHash": "0bc1609a12f6e68f0bdc3590255138b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IIdFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"AccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"AccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"RequiredClaimsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"access\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimIssuer\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"computeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IIdFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundsContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"updateRequiredClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasAccess(address,address,bytes)\":{\"params\":{\"account\":\"The account to be checked.\",\"caller\":\"The account calling the function requiring an access check.\",\"data\":\"The data associated with the function call\"},\"returns\":{\"_0\":\"true if the account is allowed to access the system (false otherwise).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasAccess(address,address,bytes)\":{\"notice\":\"This function is used to check if the account has necessary permissions to access the system.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gated/xAuthAccessRegistry.sol\":\"xAuthAccessRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"src/factory/IIdFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IIdFactory {\\n  /// events\\n\\n\\t// AddedKey to notify everyone when key added without listening to long list of identity addresses\\n\\tevent AddedKey(address user, bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\t// AddedClaim to notify everyone when claim0x5119478394F78463CF6aBb254982f89D480DA2A6 added without listening to long list of identity addresses\\n\\tevent AddedClaim(\\n    address indexed user,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n  // event emitted whenever a single contract is deployed by the factory\\n  event Deployed(address indexed _addr);\\n\\n  // event emitted when a wallet is linked to an ONCHAINID contract\\n  event WalletLinked(address indexed wallet, address indexed identity);\\n\\n  // event emitted when a token is linked to an ONCHAINID contract\\n  event TokenLinked(address indexed token, address indexed identity);\\n\\n  // event emitted when a wallet is unlinked from an ONCHAINID contract\\n  event WalletUnlinked(address indexed wallet, address indexed identity);\\n\\n  // event emitted when an address is registered on the factory as a Token\\n  // factory address, granting this address the privilege to issue\\n  // Onchain identities for tokens\\n  event TokenFactoryAdded(address indexed factory);\\n\\n  // event emitted when a previously recorded token factory address is removed\\n  event TokenFactoryRemoved(address indexed factory);\\n\\n  // event emitted when a receiver is added for a chainSelector\\n  event ReceiverAdded(uint64 chainSelector, address receiver, address gateway);\\n\\n  // event emitted when a receiver is removed for a chainSelector\\n  event ReceiverRemoved(uint64 chainSelector);\\n\\n  /// functions\\n\\n  /**\\n   *  @dev function used to create a new Identity proxy from the factory\\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  requires a new salt for each deployment\\n   *  _wallet cannot be linked to another ONCHAINID\\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n   *  of the function, including calls to oracles for multichain\\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\\n   */\\n  function createIdentity(address _wallet, string memory _salt) external returns (address);\\n\\n  /**\\n   *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\\n   * MANAGEMENT keys.\\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\\n   *  requires a new salt for each deployment\\n   *  _wallet cannot be linked to another ONCHAINID\\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n   *  of the function, including calls to oracles for multichain\\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\\n   */\\n  function createIdentityWithManagementKeys(\\n    address _wallet,\\n    string memory _salt,\\n    bytes32[] memory _managementKeys\\n  ) external returns (address);\\n\\n  /**\\n   *  @dev function used to create a new Token Identity proxy from the factory\\n   *  @param _token the address of the token contract\\n   *  @param _tokenOwner the owner address of the token\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  requires a new salt for each deployment\\n   *  _token cannot be linked to another ONCHAINID\\n   *  only Token factory or owner can call (owner should only use its privilege\\n   *  for tokens not issued by a Token factory onchain\\n   */\\n  function createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\\n\\n  /**\\n   * @dev function used to update bridge contract address\\n   * @param _bridge the address of the bridge contract\\n   * can be called only by Owner\\n   */\\n\\n  function setBridge(address _bridge) external;\\n\\n  /**\\n   *  @dev function used to link a new wallet to an existing identity\\n   *  @param _newWallet the address of the wallet to link\\n   *  requires msg.sender to be linked to an existing onchainid\\n   *  the _newWallet will be linked to the same OID contract as msg.sender\\n   *  _newWallet cannot be linked to an OID yet\\n   *  _newWallet cannot be address 0\\n   *  cannot link more than 100 wallets to an OID, for gas consumption reason\\n   */\\n  function linkWallet(address _newWallet) external;\\n\\n  /**\\n   *  @dev function used to unlink a wallet from an existing identity\\n   *  @param _oldWallet the address of the wallet to unlink\\n   *  requires msg.sender to be linked to the same onchainid as _oldWallet\\n   *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\\n   *  _oldWallet cannot be address 0\\n   */\\n  function unlinkWallet(address _oldWallet) external;\\n\\n  /**\\n   *  @dev function used to register an address as a token factory\\n   *  @param _factory the address of the token factory\\n   *  can be called only by Owner\\n   *  _factory cannot be registered yet\\n   *  once the factory has been registered it can deploy token identities\\n   */\\n  function addTokenFactory(address _factory) external;\\n\\n  /**\\n   *  @dev function used to unregister an address previously registered as a token factory\\n   *  @param _factory the address of the token factory\\n   *  can be called only by Owner\\n   *  _factory has to be registered previously\\n   *  once the factory has been unregistered it cannot deploy token identities anymore\\n   */\\n  function removeTokenFactory(address _factory) external;\\n\\n  /**\\n   *  @dev function used to add a receiver for a chainSelector\\n   *  @param _chainSelector the chainSelector for which the receiver is added\\n   *  @param _receiver the address of the receiver\\n   *  @param _gateway the address of the gateway\\n   *  can be called only by Owner\\n   *  _receiver cannot be registered yet\\n   *  once the receiver has been registered it can receive messages from the chainSelector\\n   */\\n  function addReceiver(uint64 _chainSelector, address _receiver, address _gateway) external;\\n\\n  /**\\n   *  @dev function used to remove a receiver for a chainSelector\\n   *  @param _chainSelector the chainSelector for which the receiver is removed\\n   *  can be called only by Owner\\n   *  _receiver has to be registered previously\\n   *  once the receiver has been removed it cannot receive messages from the chainSelector anymore\\n   */\\n  function removeReceiver(uint64 _chainSelector) external;\\n\\n  /**\\n   *  @dev getter for OID contract corresponding to a wallet/token\\n   *  @param _wallet the wallet/token address\\n   */\\n  function getIdentity(address _wallet) external view returns (address);\\n\\n  /**\\n   *  @dev getter to fetch the array of wallets linked to an OID contract\\n   *  @param _identity the address of the OID contract\\n   *  returns an array of addresses linked to the OID\\n   */\\n  function getWallets(address _identity) external view returns (address[] memory);\\n\\n  /**\\n   *  @dev getter to fetch the token address linked to an OID contract\\n   *  @param _identity the address of the OID contract\\n   *  returns the address linked to the OID\\n   */\\n  function getToken(address _identity) external view returns (address);\\n\\n  /**\\n   *  @dev getter to know if an address is registered as token factory or not\\n   *  @param _factory the address of the factory\\n   *  returns true if the address corresponds to a registered factory\\n   */\\n  function isTokenFactory(address _factory) external view returns (bool);\\n\\n  /**\\n   *  @dev getter to know if a salt is taken for the create2 deployment\\n   *  @param _salt the salt used for deployment\\n   */\\n  function isSaltTaken(string calldata _salt) external view returns (bool);\\n\\n  /**\\n   * @dev getter for the implementation authority used by this factory.\\n   */\\n  function implementationAuthority() external view returns (address);\\n\\n  /**\\n   * @dev getter for the receiver of a chainSelector\\n   * @param _chainSelector the chainSelector for which the receiver is fetched\\n   */\\n  function getReceiver(uint64 _chainSelector) external view returns (address);\\n\\n  /**\\n   * @dev getter for the list of chainSelectors\\n   */\\n  function getChainSelectors() external view returns (uint64[] memory);\\n\\n  /**\\n   * @dev getter for the list of receivers\\n   */\\n  function getReceivers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev getter for the bridge contract address\\n   */\\n  function bridge() external view returns (address);\\n\\n  /**\\n   * @dev getter for the created Identites\\n   */\\n  function identityIsCreated(address identity) external view returns (bool);\\n\\n  function addedKey(\\n    bool _isTrue,\\n    bytes32 _key,\\n    uint256 _purpose,\\n    uint256 _type\\n    ) external;\\n\\n    function addedClaim(\\n    bool _isTrue,\\n    uint256 _topic,\\n    uint256 _scheme,\\n    address _issuer,\\n    bytes memory _signature,\\n    bytes memory _data,\\n    string memory _uri\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0919e6f31bba65cc0d39c271f9702adf22273f0d6626cd39f494c0bce6b408ea\",\"license\":\"GPL-3.0\"},\"src/gated/xAuthAccessRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport '../interface/IAccessRegistry.sol';\\nimport '../factory/IIdFactory.sol';\\nimport '../interface/IClaimIssuer.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract xAuthAccessRegistry is IAccessRegistry, Ownable {\\n  IIdFactory public factory;\\n  IClaimIssuer public claimIssuer;\\n\\n  mapping(bytes32 => bool) public access;\\n  mapping(address => bytes32) public fundsContract;\\n  mapping(bytes32 => uint256[]) public requiredClaims;\\n\\n  event AccessGranted(bytes32 fundId, address identityAddr);\\n  event AccessRevoked(bytes32 fundId, address identityAddr);\\n  event RequiredClaimsUpdated(bytes32 fundId, uint256[] claimTopics);\\n\\n  constructor(IIdFactory _factory, IClaimIssuer _claimIssuer) Ownable() {\\n    factory = _factory;\\n    claimIssuer = _claimIssuer;\\n  }\\n\\n  function hasAccess(address account, address caller, bytes calldata data) external view override returns (bool) {\\n    address senderIdentity = factory.getIdentity(account);\\n\\n    // require(senderIdentity != address(0), 'sender identity is null');\\n\\n    // extract data\\n\\n    (address recipient, uint256 amount) = abi.decode(data[4:], (address, uint256));\\n\\n    address receiverIdentity = factory.getIdentity(recipient);\\n\\n    require(senderIdentity != address(0), 'receiver identity is null');\\n\\n    // check the recipient has access to institutional contract\\n\\n    bytes32 fundId = fundsContract[msg.sender];\\n    require(access[computeKey(fundId, receiverIdentity)] == true, \\\"receiver identity doesn't have access\\\");\\n\\n    // check the recipient has require claims\\n    uint256[] memory requiredClaimTopics = requiredClaims[fundId];\\n\\n    for (uint256 i = 0; i < requiredClaimTopics.length; ++i) {\\n      bytes32 claimId = keccak256(abi.encode(claimIssuer, requiredClaimTopics[i]));\\n\\n      (uint256 topic, , , bytes memory signature, bytes memory claimData, ) = IIdentity(receiverIdentity).getClaim(\\n        claimId\\n      );\\n\\n      bool isValid = claimIssuer.isClaimValid(IIdentity(receiverIdentity), topic, signature, claimData);\\n      require(isValid, 'Claim is not valid');\\n    }\\n\\n    return true;\\n  }\\n\\n  function grantAccess(bytes32 fundId, address identityAddr) public onlyOwner {\\n    bytes32 key = computeKey(fundId, identityAddr);\\n    access[key] = true;\\n    emit AccessGranted(fundId, identityAddr);\\n  }\\n\\n  function updateRequiredClaims(bytes32 fundId, uint256[] calldata claimTopics) public onlyOwner {\\n    requiredClaims[fundId] = claimTopics;\\n    emit RequiredClaimsUpdated(fundId, claimTopics);\\n  }\\n\\n  function revokeAccess(bytes32 fundId, address identityAddr) public onlyOwner {\\n    bytes32 key = computeKey(fundId, identityAddr);\\n    access[key] = false;\\n    emit AccessRevoked(fundId, identityAddr);\\n  }\\n\\n  function computeKey(bytes32 fundId, address identityAddr) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(fundId, identityAddr));\\n  }\\n}\\n\",\"keccak256\":\"0xc9d42b56b45dfe736bd21e4ed9e4cbfdb4f540677e114d9b99cbe0695354e013\",\"license\":\"MIT\"},\"src/interface/IAccessRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Access Registry Interface\\n * @author Fireblocks\\n * @notice Access Registry Interface serves as a generalized interface for interacting with the Access Registry.\\n *\\n * @dev Interface for the Access Registry features.\\n */\\ninterface IAccessRegistry {\\n  /**\\n   * @notice This function is used to check if the account has necessary permissions to access the system.\\n   * @param account The account to be checked.\\n   * @param caller The account calling the function requiring an access check.\\n   * @param data The data associated with the function call\\n   * @return true if the account is allowed to access the system (false otherwise).\\n   */\\n  function hasAccess(address account, address caller, bytes calldata data) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x408e16af926a4b154433302809c95364bfc255b2a2277dcae818d0bbc254bfee\",\"license\":\"AGPL-3.0-or-later\"},\"src/interface/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\t/**\\n\\t * @dev Emitted when a claim is revoked.\\n\\t *\\n\\t * Specification: MUST be triggered when revoking a claim.\\n\\t */\\n\\tevent ClaimRevoked(bytes indexed signature);\\n\\n\\t/**\\n\\t * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n\\t * @notice will fetch the claim from the identity contract (unsafe).\\n\\t * @param _claimId the id of the claim\\n\\t * @param _identity the address of the identity contract\\n\\t * @return isRevoked true when the claim is revoked\\n\\t */\\n\\tfunction revokeClaim(bytes32 _claimId, address _identity) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n\\t * @param signature the signature of the claim\\n\\t */\\n\\tfunction revokeClaimBySignature(bytes calldata signature) external;\\n\\n\\t/**\\n\\t * @dev Returns revocation status of a claim.\\n\\t * @param _sig the signature of the claim\\n\\t * @return isRevoked true if the claim is revoked and false otherwise\\n\\t */\\n\\tfunction isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev Checks if a claim is valid.\\n\\t * @param _identity the identity contract related to the claim\\n\\t * @param claimTopic the claim topic of the claim\\n\\t * @param sig the signature of the claim\\n\\t * @param data the data field of the claim\\n\\t * @return claimValid true if the claim is valid, false otherwise\\n\\t */\\n\\tfunction isClaimValid(\\n\\t\\tIIdentity _identity,\\n\\t\\tuint256 claimTopic,\\n\\t\\tbytes calldata sig,\\n\\t\\tbytes calldata data\\n\\t) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa2500d5d63e8509796c5fe4130628df40aff0b3a5c905893eb38782b080fdaa7\",\"license\":\"GPL-3.0\"},\"src/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\t/**\\n\\t * @dev Emitted when an execution request was approved.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was successfully called.\\n\\t */\\n\\tevent Approved(uint256 indexed executionId, bool approved);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was approved and successfully performed.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n\\t */\\n\\tevent Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execution request was performed via `execute`.\\n\\t *\\n\\t * Specification: MUST be triggered when execute was successfully called.\\n\\t */\\n\\tevent ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was called and failed\\n\\t *\\n\\t * Specification: MUST be triggered when execute call failed\\n\\t */\\n\\tevent ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was added to the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when addKey was successfully called.\\n\\t */\\n\\tevent KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was removed from the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when removeKey was successfully called.\\n\\t */\\n\\tevent KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\n\\t/**\\n\\t * \\n\\t * @dev Returns True if call is coming from Identity Contract\\n\\t */\\n\\tfunction isComingFromIdentity(bool done) external returns (bool);\\n\\t\\n\\t/**\\n\\t * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n\\t *\\n\\t * Triggers Event: `KeyAdded`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity\\n\\t * itself. If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Approves an execution.\\n\\t *\\n\\t * Triggers Event: `Approved`\\n\\t * Triggers on execution successful Event: `Executed`\\n\\t * Triggers on execution failure Event: `ExecutionFailed`\\n\\t */\\n\\tfunction approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Removes _purpose for _key from the identity.\\n\\t *\\n\\t * Triggers Event: `KeyRemoved`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n\\t * If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Passes an execution instruction to an ERC734 identity.\\n\\t * How the execution is handled is up to the identity implementation:\\n\\t * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n\\t * approve this execution.\\n\\t * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n\\t *\\n\\t * Triggers Event: ExecutionRequested\\n\\t * Triggers on direct execution Event: Executed\\n\\t */\\n\\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n\\t/**\\n\\t * @dev Returns the full key data, if present in the identity.\\n\\t */\\n\\tfunction getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n\\t/**\\n\\t * @dev Returns the list of purposes associated with a key.\\n\\t */\\n\\tfunction getKeyPurposes(bytes32 _key) external view returns (uint256[] memory _purposes);\\n\\n\\t/**\\n\\t * @dev Returns an array of public key bytes32 held by this identity.\\n\\t */\\n\\tfunction getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n\\t/**\\n\\t * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n\\t */\\n\\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0xd5aa8c3915426a519b3826b2ccf5fa510c032e1bc0a5adfa6798d39bb17276cb\",\"license\":\"GPL-3.0\"},\"src/interface/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\t/**\\n\\t * @dev Emitted when a claim was added.\\n\\t *\\n\\t * Specification: MUST be triggered when a claim was successfully added.\\n\\t */\\n\\tevent ClaimAdded(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when a claim was removed.\\n\\t *\\n\\t * Specification: MUST be triggered when removeClaim was successfully called.\\n\\t */\\n\\tevent ClaimRemoved(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when a claim was changed.\\n\\t *\\n\\t * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n\\t */\\n\\tevent ClaimChanged(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Add or update a claim.\\n\\t *\\n\\t * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n\\t *\\n\\t * Specification: Add or update a claim from an issuer.\\n\\t *\\n\\t * _signature is a signed message of the following structure:\\n\\t * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n\\t */\\n\\tfunction addClaim(\\n\\t\\tuint256 _topic,\\n\\t\\tuint256 _scheme,\\n\\t\\taddress issuer,\\n\\t\\tbytes calldata _signature,\\n\\t\\tbytes calldata _data,\\n\\t\\tstring calldata _uri\\n\\t) external returns (bytes32 claimRequestId);\\n\\n\\t/**\\n\\t * @dev Removes a claim.\\n\\t *\\n\\t * Triggers Event: `ClaimRemoved`\\n\\t *\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n\\t */\\n\\tfunction removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Get a claim by its ID.\\n\\t *\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n\\t */\\n\\tfunction getClaim(\\n\\t\\tbytes32 _claimId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 topic,\\n\\t\\t\\tuint256 scheme,\\n\\t\\t\\taddress issuer,\\n\\t\\t\\tbytes memory signature,\\n\\t\\t\\tbytes memory data,\\n\\t\\t\\tstring memory uri\\n\\t\\t);\\n\\n\\t/**\\n\\t * @dev Returns an array of claim IDs by topic.\\n\\t */\\n\\tfunction getClaimIdsByTopic(uint256 _topic) external view returns (bytes32[] memory claimIds);\\n}\\n\",\"keccak256\":\"0xbbe0f6eec226d7d425ad7765f6791a8b46a725526837fd404529077749e27282\",\"license\":\"GPL-3.0\"},\"src/interface/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n\\t/**\\n\\t * @dev Checks if a claim is valid.\\n\\t * @param _identity the identity contract related to the claim\\n\\t * @param claimTopic the claim topic of the claim\\n\\t * @param sig the signature of the claim\\n\\t * @param data the data field of the claim\\n\\t * @return claimValid true if the claim is valid, false otherwise\\n\\t */\\n\\tfunction isClaimValid(\\n\\t\\tIIdentity _identity,\\n\\t\\tuint256 claimTopic,\\n\\t\\tbytes calldata sig,\\n\\t\\tbytes calldata data\\n\\t) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xec87b3d3cb3a2e7cfd75fec5dd80521a286676536de59568f408580ffd8ed26e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080346100c057601f610eaf38819003918201601f19168301916001600160401b038311848410176100c55780849260409485528339810103126100c05780516001600160a01b0391828216918290036100c05760200151908282168092036100c0576000549060018060a01b0319913383821617600055604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a38160015416176001556002541617600255610dd390816100dc8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081630c6f78a914610bad5750806330b2ae9014610b6b5780633f96f55714610b3157806340554c3a14610aa457806367dd95f7146109305780636d43c4c9146108ff578063715018a61461088e5780638d53b208146107ff5780638da5cb5b146107d8578063c45a0155146107b1578063c5b8a6b614610783578063eefb7e9a146101a35763f2fde38b146100ae57600080fd5b3461019e57602060031936011261019e576100c7610bd1565b6100cf610bfd565b6001600160a01b0380911690811561013457600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b600080fd5b3461019e57606060031936011261019e576101bc610bd1565b6101c4610be7565b5067ffffffffffffffff6044351161019e5736602360443501121561019e5767ffffffffffffffff604435600401351161019e573660246044356004013560443501011161019e576001600160a01b0360015416906001600160a01b03604051917f2fea7b81000000000000000000000000000000000000000000000000000000008352166004820152602081602481855afa90811561056257600091610749575b506044356004013560041161019e5760406044356004810135810103600319011261019e57602860443501356001600160a01b03811680910361019e576020906024604051809581937f2fea7b8100000000000000000000000000000000000000000000000000000000835260048301525afa91821561056257600092610705575b506001600160a01b0316156106c1573360005260046020526040600020546103108282610d54565b6000526003602052600160ff604060002054161515036106575760005260056020526040600020906040518083602082955493848152019060005260206000209260005b81811061063e57505061036992500383610c71565b6002546001600160a01b031660005b83518110156106335760208160051b8501015160405160208101918483526040820152604081526103a881610c55565b519020604051907fc9100bcb00000000000000000000000000000000000000000000000000000000825260048201526000816024816001600160a01b0388165afa80156105625760009060009260009161056e575b509160209161046b6104599460405195869485947fc0969a6e0000000000000000000000000000000000000000000000000000000086526001600160a01b038c1660048701526024860152608060448601526084850190610d2f565b90600319848303016064850152610d2f565b0381865afa90811561056257600091610527575b50156104e3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146104b457600101610378565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b606460405162461bcd60e51b815260206004820152601260248201527f436c61696d206973206e6f742076616c696400000000000000000000000000006044820152fd5b90506020813d60201161055a575b8161054260209383610c71565b8101031261019e5751801515810361019e578561047f565b3d9150610535565b6040513d6000823e3d90fd5b925050503d90816000823e6105838282610c71565b60c081838101031261019e5780519061059e60408201610c94565b50606081015167ffffffffffffffff811161019e576105c290848301908301610d12565b608082015167ffffffffffffffff811161019e576105e590858401908401610d12565b9160a08101519367ffffffffffffffff851161019e57858201601f86840101121561019e5761062860209583876104599961046b96019280830151920101610ccb565b5091945050916103fd565b602060405160018152f35b8454835260019485019487945060209093019201610354565b608460405162461bcd60e51b815260206004820152602560248201527f7265636569766572206964656e7469747920646f65736e27742068617665206160448201527f63636573730000000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601960248201527f7265636569766572206964656e74697479206973206e756c6c000000000000006044820152fd5b9091506020813d602011610741575b8161072160209383610c71565b8101031261019e5761073a6001600160a01b0391610c94565b91906102e8565b3d9150610714565b90506020813d60201161077b575b8161076460209383610c71565b8101031261019e5761077590610c94565b82610266565b3d9150610757565b3461019e57604060031936011261019e5760206107a96107a1610be7565b600435610d54565b604051908152f35b3461019e57600060031936011261019e5760206001600160a01b0360015416604051908152f35b3461019e57600060031936011261019e5760206001600160a01b0360005416604051908152f35b3461019e57604060031936011261019e577fe7906b77ea165c70ad8268ce5b59b778a198edf9c1ae4118378eefdc76fce5f460043561083c610be7565b90610845610bfd565b61084f8282610d54565b6000526003602052604060002060ff198154169055610889604051928392839092916001600160a01b036020916040840195845216910152565b0390a1005b3461019e57600060031936011261019e576108a7610bfd565b60006001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461019e57602060031936011261019e576004356000526003602052602060ff604060002054166040519015158152f35b3461019e57604060031936011261019e5767ffffffffffffffff60043560243582811161019e573660238201121561019e57806004013592831161019e5760248101928060051b91602483369201011161019e5761098c610bfd565b826000526020600581526040600020680100000000000000008311610a75578054838255808410610a4d575b508590600052816000209060005b848110610a3b575050509060407f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9281519586528501528060408501521161019e5781816060927f7c769db54a25afd07a9e50f502e0b9881e964323620166bdf47f5a9e5034ec5a95848401378101030190a1005b813583820155908301906001016109c6565b81600052838360002091820191015b818110610a6957506109b8565b60008155600101610a5c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b3461019e57604060031936011261019e577ff20afd7b032307b01752ee91e3f6a4b83a5b4ab631f9ab279322fd45634382c0600435610ae1610be7565b90610aea610bfd565b610af48282610d54565b60005260036020526040600020600160ff19825416179055610889604051928392839092916001600160a01b036020916040840195845216910152565b3461019e57602060031936011261019e576001600160a01b03610b52610bd1565b1660005260046020526020604060002054604051908152f35b3461019e57604060031936011261019e576024356004356000526005602052604060002090815481101561019e57602091600052816000200154604051908152f35b3461019e57600060031936011261019e576020906001600160a01b03600254168152f35b600435906001600160a01b038216820361019e57565b602435906001600160a01b038216820361019e57565b6001600160a01b03600054163303610c1157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6060810190811067ffffffffffffffff821117610a7557604052565b90601f601f19910116810190811067ffffffffffffffff821117610a7557604052565b51906001600160a01b038216820361019e57565b60005b838110610cbb5750506000910152565b8181015183820152602001610cab565b9092919267ffffffffffffffff8111610a755760405191610cf66020601f19601f8501160184610c71565b82948284528282011161019e576020610d10930190610ca8565b565b9080601f8301121561019e578151610d2c92602001610ccb565b90565b90601f19601f602093610d4d81518092818752878088019101610ca8565b0116010190565b907fffffffffffffffffffffffffffffffffffffffff000000000000000000000000604051916020830193845260601b16604082015260348152610d9781610c55565b5190209056fea264697066735822122042c69b4cff01f1941f63e4b2c22a91d9518a78ce948e7cf8295a803cd5be10c764736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630c6f78a914610bad5750806330b2ae9014610b6b5780633f96f55714610b3157806340554c3a14610aa457806367dd95f7146109305780636d43c4c9146108ff578063715018a61461088e5780638d53b208146107ff5780638da5cb5b146107d8578063c45a0155146107b1578063c5b8a6b614610783578063eefb7e9a146101a35763f2fde38b146100ae57600080fd5b3461019e57602060031936011261019e576100c7610bd1565b6100cf610bfd565b6001600160a01b0380911690811561013457600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b600080fd5b3461019e57606060031936011261019e576101bc610bd1565b6101c4610be7565b5067ffffffffffffffff6044351161019e5736602360443501121561019e5767ffffffffffffffff604435600401351161019e573660246044356004013560443501011161019e576001600160a01b0360015416906001600160a01b03604051917f2fea7b81000000000000000000000000000000000000000000000000000000008352166004820152602081602481855afa90811561056257600091610749575b506044356004013560041161019e5760406044356004810135810103600319011261019e57602860443501356001600160a01b03811680910361019e576020906024604051809581937f2fea7b8100000000000000000000000000000000000000000000000000000000835260048301525afa91821561056257600092610705575b506001600160a01b0316156106c1573360005260046020526040600020546103108282610d54565b6000526003602052600160ff604060002054161515036106575760005260056020526040600020906040518083602082955493848152019060005260206000209260005b81811061063e57505061036992500383610c71565b6002546001600160a01b031660005b83518110156106335760208160051b8501015160405160208101918483526040820152604081526103a881610c55565b519020604051907fc9100bcb00000000000000000000000000000000000000000000000000000000825260048201526000816024816001600160a01b0388165afa80156105625760009060009260009161056e575b509160209161046b6104599460405195869485947fc0969a6e0000000000000000000000000000000000000000000000000000000086526001600160a01b038c1660048701526024860152608060448601526084850190610d2f565b90600319848303016064850152610d2f565b0381865afa90811561056257600091610527575b50156104e3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146104b457600101610378565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b606460405162461bcd60e51b815260206004820152601260248201527f436c61696d206973206e6f742076616c696400000000000000000000000000006044820152fd5b90506020813d60201161055a575b8161054260209383610c71565b8101031261019e5751801515810361019e578561047f565b3d9150610535565b6040513d6000823e3d90fd5b925050503d90816000823e6105838282610c71565b60c081838101031261019e5780519061059e60408201610c94565b50606081015167ffffffffffffffff811161019e576105c290848301908301610d12565b608082015167ffffffffffffffff811161019e576105e590858401908401610d12565b9160a08101519367ffffffffffffffff851161019e57858201601f86840101121561019e5761062860209583876104599961046b96019280830151920101610ccb565b5091945050916103fd565b602060405160018152f35b8454835260019485019487945060209093019201610354565b608460405162461bcd60e51b815260206004820152602560248201527f7265636569766572206964656e7469747920646f65736e27742068617665206160448201527f63636573730000000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601960248201527f7265636569766572206964656e74697479206973206e756c6c000000000000006044820152fd5b9091506020813d602011610741575b8161072160209383610c71565b8101031261019e5761073a6001600160a01b0391610c94565b91906102e8565b3d9150610714565b90506020813d60201161077b575b8161076460209383610c71565b8101031261019e5761077590610c94565b82610266565b3d9150610757565b3461019e57604060031936011261019e5760206107a96107a1610be7565b600435610d54565b604051908152f35b3461019e57600060031936011261019e5760206001600160a01b0360015416604051908152f35b3461019e57600060031936011261019e5760206001600160a01b0360005416604051908152f35b3461019e57604060031936011261019e577fe7906b77ea165c70ad8268ce5b59b778a198edf9c1ae4118378eefdc76fce5f460043561083c610be7565b90610845610bfd565b61084f8282610d54565b6000526003602052604060002060ff198154169055610889604051928392839092916001600160a01b036020916040840195845216910152565b0390a1005b3461019e57600060031936011261019e576108a7610bfd565b60006001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461019e57602060031936011261019e576004356000526003602052602060ff604060002054166040519015158152f35b3461019e57604060031936011261019e5767ffffffffffffffff60043560243582811161019e573660238201121561019e57806004013592831161019e5760248101928060051b91602483369201011161019e5761098c610bfd565b826000526020600581526040600020680100000000000000008311610a75578054838255808410610a4d575b508590600052816000209060005b848110610a3b575050509060407f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9281519586528501528060408501521161019e5781816060927f7c769db54a25afd07a9e50f502e0b9881e964323620166bdf47f5a9e5034ec5a95848401378101030190a1005b813583820155908301906001016109c6565b81600052838360002091820191015b818110610a6957506109b8565b60008155600101610a5c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b3461019e57604060031936011261019e577ff20afd7b032307b01752ee91e3f6a4b83a5b4ab631f9ab279322fd45634382c0600435610ae1610be7565b90610aea610bfd565b610af48282610d54565b60005260036020526040600020600160ff19825416179055610889604051928392839092916001600160a01b036020916040840195845216910152565b3461019e57602060031936011261019e576001600160a01b03610b52610bd1565b1660005260046020526020604060002054604051908152f35b3461019e57604060031936011261019e576024356004356000526005602052604060002090815481101561019e57602091600052816000200154604051908152f35b3461019e57600060031936011261019e576020906001600160a01b03600254168152f35b600435906001600160a01b038216820361019e57565b602435906001600160a01b038216820361019e57565b6001600160a01b03600054163303610c1157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6060810190811067ffffffffffffffff821117610a7557604052565b90601f601f19910116810190811067ffffffffffffffff821117610a7557604052565b51906001600160a01b038216820361019e57565b60005b838110610cbb5750506000910152565b8181015183820152602001610cab565b9092919267ffffffffffffffff8111610a755760405191610cf66020601f19601f8501160184610c71565b82948284528282011161019e576020610d10930190610ca8565b565b9080601f8301121561019e578151610d2c92602001610ccb565b90565b90601f19601f602093610d4d81518092818752878088019101610ca8565b0116010190565b907fffffffffffffffffffffffffffffffffffffffff000000000000000000000000604051916020830193845260601b16604082015260348152610d9781610c55565b5190209056fea264697066735822122042c69b4cff01f1941f63e4b2c22a91d9518a78ce948e7cf8295a803cd5be10c764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "hasAccess(address,address,bytes)": {
        "params": {
          "account": "The account to be checked.",
          "caller": "The account calling the function requiring an access check.",
          "data": "The data associated with the function call"
        },
        "returns": {
          "_0": "true if the account is allowed to access the system (false otherwise)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasAccess(address,address,bytes)": {
        "notice": "This function is used to check if the account has necessary permissions to access the system."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 419,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IIdFactory)406"
      },
      {
        "astId": 422,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "claimIssuer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IClaimIssuer)775"
      },
      {
        "astId": 426,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "access",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 430,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "fundsContract",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 435,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "requiredClaims",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IClaimIssuer)775": {
        "encoding": "inplace",
        "label": "contract IClaimIssuer",
        "numberOfBytes": "20"
      },
      "t_contract(IIdFactory)406": {
        "encoding": "inplace",
        "label": "contract IIdFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}