{
  "address": "0x4D5483c8699390F2C3D6866E8908eF68108649a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IIdFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IClaimIssuer",
          "name": "_claimIssuer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "AccessGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "AccessRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "RequiredClaimsUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "access",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimIssuer",
      "outputs": [
        {
          "internalType": "contract IClaimIssuer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "computeKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IIdFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fundsContract",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "grantAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requiredClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "identityAddr",
          "type": "address"
        }
      ],
      "name": "revokeAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IClaimIssuer",
          "name": "_claimIssuer",
          "type": "address"
        }
      ],
      "name": "updateClaimIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IIdFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "updateFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "updateRequiredClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2cdaf57b719e15d9af6a55bd1d8a1929c03ab72637378393c9d8094f780312a",
  "receipt": {
    "to": null,
    "from": "0x820F4c6eeF2DbACD463037571ccBDB761fd08AA1",
    "contractAddress": "0x4D5483c8699390F2C3D6866E8908eF68108649a8",
    "transactionIndex": 0,
    "gasUsed": "673652",
    "logsBloom": "0x00000002000000000000000000040000000000000000000000840000000000000000000000000000000000000000000000008000000000000000000000400000000000000000000000000000000000800001000000000000000100001000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000010000000000000000000000000000000000000000000200000000000000000000000800000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000020000000000000000000000000000000008000000800000000000000000000100000",
    "blockHash": "0xc7450e37d099700df91952db16434209e75b64902eefcf929fc14ee160273f36",
    "transactionHash": "0xb2cdaf57b719e15d9af6a55bd1d8a1929c03ab72637378393c9d8094f780312a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13839793,
        "transactionHash": "0xb2cdaf57b719e15d9af6a55bd1d8a1929c03ab72637378393c9d8094f780312a",
        "address": "0x4D5483c8699390F2C3D6866E8908eF68108649a8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000820f4c6eef2dbacd463037571ccbdb761fd08aa1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc7450e37d099700df91952db16434209e75b64902eefcf929fc14ee160273f36"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13839793,
        "transactionHash": "0xb2cdaf57b719e15d9af6a55bd1d8a1929c03ab72637378393c9d8094f780312a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000820f4c6eef2dbacd463037571ccbdb761fd08aa1",
          "0x0000000000000000000000004ad84f7014b7b44f723f284a85b1662337971439"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000514095d58166340000000000000000000000000000000000000000000000001331c4b36db93f630000000000000000000000000000000000000000000003ade4f30451d521154c00000000000000000000000000000000000000000000000012e0841d9837d92f0000000000000000000000000000000000000000000003ade54444e7aaa27b80",
        "logIndex": 1,
        "blockHash": "0xc7450e37d099700df91952db16434209e75b64902eefcf929fc14ee160273f36"
      }
    ],
    "blockNumber": 13839793,
    "cumulativeGasUsed": "673652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A0Fa067dE12a527501FA009a2806AAD3d9df630",
    "0x6b0a61Bd492655845963044BFA70EB77FA1512a7"
  ],
  "numDeployments": 3,
  "solcInputHash": "4914c933cd395ac5252c0dc5fb2e7920",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IIdFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"AccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"AccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"RequiredClaimsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"access\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimIssuer\",\"outputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"computeKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IIdFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundsContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"identityAddr\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_claimIssuer\",\"type\":\"address\"}],\"name\":\"updateClaimIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"updateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"updateRequiredClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasAccess(address,address,bytes)\":{\"params\":{\"account\":\"The account to be checked.\",\"caller\":\"The account calling the function requiring an access check.\",\"data\":\"The data associated with the function call\"},\"returns\":{\"_0\":\"true if the account is allowed to access the system (false otherwise).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasAccess(address,address,bytes)\":{\"notice\":\"This function is used to check if the account has necessary permissions to access the system.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gated/xAuthAccessRegistry.sol\":\"xAuthAccessRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/factory/IIdFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IIdFactory {\\n  /// events\\n\\n\\t// AddedKey to notify everyone when key added without listening to long list of identity addresses\\n\\tevent AddedKey(address user, bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\t// AddedClaim to notify everyone when claim0x5119478394F78463CF6aBb254982f89D480DA2A6 added without listening to long list of identity addresses\\n\\tevent AddedClaim(\\n    address indexed user,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n  // event emitted whenever a single contract is deployed by the factory\\n  event Deployed(address indexed _addr);\\n\\n  // event emitted when a wallet is linked to an ONCHAINID contract\\n  event WalletLinked(address indexed wallet, address indexed identity);\\n\\n  // event emitted when a token is linked to an ONCHAINID contract\\n  event TokenLinked(address indexed token, address indexed identity);\\n\\n  // event emitted when a wallet is unlinked from an ONCHAINID contract\\n  event WalletUnlinked(address indexed wallet, address indexed identity);\\n\\n  // event emitted when an address is registered on the factory as a Token\\n  // factory address, granting this address the privilege to issue\\n  // Onchain identities for tokens\\n  event TokenFactoryAdded(address indexed factory);\\n\\n  // event emitted when a previously recorded token factory address is removed\\n  event TokenFactoryRemoved(address indexed factory);\\n\\n  // event emitted when a receiver is added for a chainSelector\\n  event ReceiverAdded(uint64 chainSelector, address receiver, address gateway);\\n\\n  // event emitted when a receiver is removed for a chainSelector\\n  event ReceiverRemoved(uint64 chainSelector);\\n\\n  /// functions\\n\\n  /**\\n   *  @dev function used to create a new Identity proxy from the factory\\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  requires a new salt for each deployment\\n   *  _wallet cannot be linked to another ONCHAINID\\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n   *  of the function, including calls to oracles for multichain\\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\\n   */\\n  function createIdentity(address _wallet, string memory _salt) external returns (address);\\n\\n  /**\\n   *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\\n   * MANAGEMENT keys.\\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\\n   *  requires a new salt for each deployment\\n   *  _wallet cannot be linked to another ONCHAINID\\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n   *  of the function, including calls to oracles for multichain\\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\\n   */\\n  function createIdentityWithManagementKeys(\\n    address _wallet,\\n    string memory _salt,\\n    bytes32[] memory _managementKeys\\n  ) external returns (address);\\n\\n  /**\\n   *  @dev function used to create a new Token Identity proxy from the factory\\n   *  @param _token the address of the token contract\\n   *  @param _tokenOwner the owner address of the token\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  requires a new salt for each deployment\\n   *  _token cannot be linked to another ONCHAINID\\n   *  only Token factory or owner can call (owner should only use its privilege\\n   *  for tokens not issued by a Token factory onchain\\n   */\\n  function createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\\n\\n  /**\\n   * @dev function used to update bridge contract address\\n   * @param _bridge the address of the bridge contract\\n   * can be called only by Owner\\n   */\\n\\n  function setBridge(address _bridge) external;\\n\\n  /**\\n   *  @dev function used to link a new wallet to an existing identity\\n   *  @param _newWallet the address of the wallet to link\\n   *  requires msg.sender to be linked to an existing onchainid\\n   *  the _newWallet will be linked to the same OID contract as msg.sender\\n   *  _newWallet cannot be linked to an OID yet\\n   *  _newWallet cannot be address 0\\n   *  cannot link more than 100 wallets to an OID, for gas consumption reason\\n   */\\n  function linkWallet(address _newWallet) external;\\n\\n  /**\\n   *  @dev function used to unlink a wallet from an existing identity\\n   *  @param _oldWallet the address of the wallet to unlink\\n   *  requires msg.sender to be linked to the same onchainid as _oldWallet\\n   *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\\n   *  _oldWallet cannot be address 0\\n   */\\n  function unlinkWallet(address _oldWallet) external;\\n\\n  /**\\n   *  @dev function used to register an address as a token factory\\n   *  @param _factory the address of the token factory\\n   *  can be called only by Owner\\n   *  _factory cannot be registered yet\\n   *  once the factory has been registered it can deploy token identities\\n   */\\n  function addTokenFactory(address _factory) external;\\n\\n  /**\\n   *  @dev function used to unregister an address previously registered as a token factory\\n   *  @param _factory the address of the token factory\\n   *  can be called only by Owner\\n   *  _factory has to be registered previously\\n   *  once the factory has been unregistered it cannot deploy token identities anymore\\n   */\\n  function removeTokenFactory(address _factory) external;\\n\\n  /**\\n   *  @dev function used to add a receiver for a chainSelector\\n   *  @param _chainSelector the chainSelector for which the receiver is added\\n   *  @param _receiver the address of the receiver\\n   *  @param _gateway the address of the gateway\\n   *  can be called only by Owner\\n   *  _receiver cannot be registered yet\\n   *  once the receiver has been registered it can receive messages from the chainSelector\\n   */\\n  function addReceiver(uint64 _chainSelector, address _receiver, address _gateway) external;\\n\\n  /**\\n   *  @dev function used to remove a receiver for a chainSelector\\n   *  @param _chainSelector the chainSelector for which the receiver is removed\\n   *  can be called only by Owner\\n   *  _receiver has to be registered previously\\n   *  once the receiver has been removed it cannot receive messages from the chainSelector anymore\\n   */\\n  function removeReceiver(uint64 _chainSelector) external;\\n\\n  /**\\n   *  @dev getter for OID contract corresponding to a wallet/token\\n   *  @param _wallet the wallet/token address\\n   */\\n  function getIdentity(address _wallet) external view returns (address);\\n\\n  /**\\n   *  @dev getter to fetch the array of wallets linked to an OID contract\\n   *  @param _identity the address of the OID contract\\n   *  returns an array of addresses linked to the OID\\n   */\\n  function getWallets(address _identity) external view returns (address[] memory);\\n\\n  /**\\n   *  @dev getter to fetch the token address linked to an OID contract\\n   *  @param _identity the address of the OID contract\\n   *  returns the address linked to the OID\\n   */\\n  function getToken(address _identity) external view returns (address);\\n\\n  /**\\n   *  @dev getter to know if an address is registered as token factory or not\\n   *  @param _factory the address of the factory\\n   *  returns true if the address corresponds to a registered factory\\n   */\\n  function isTokenFactory(address _factory) external view returns (bool);\\n\\n  /**\\n   *  @dev getter to know if a salt is taken for the create2 deployment\\n   *  @param _salt the salt used for deployment\\n   */\\n  function isSaltTaken(string calldata _salt) external view returns (bool);\\n\\n  /**\\n   * @dev getter for the implementation authority used by this factory.\\n   */\\n  function implementationAuthority() external view returns (address);\\n\\n  /**\\n   * @dev getter for the receiver of a chainSelector\\n   * @param _chainSelector the chainSelector for which the receiver is fetched\\n   */\\n  function getReceiver(uint64 _chainSelector) external view returns (address);\\n\\n  /**\\n   * @dev getter for the list of chainSelectors\\n   */\\n  function getChainSelectors() external view returns (uint64[] memory);\\n\\n  /**\\n   * @dev getter for the list of receivers\\n   */\\n  function getReceivers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev getter for the bridge contract address\\n   */\\n  function bridge() external view returns (address);\\n\\n  /**\\n   * @dev getter for the created Identites\\n   */\\n  function identityIsCreated(address identity) external view returns (bool);\\n\\n  function addedKey(\\n    bool _isTrue,\\n    bytes32 _key,\\n    uint256 _purpose,\\n    uint256 _type\\n    ) external;\\n\\n    function addedClaim(\\n    bool _isTrue,\\n    uint256 _topic,\\n    uint256 _scheme,\\n    address _issuer,\\n    bytes memory _signature,\\n    bytes memory _data,\\n    string memory _uri\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0919e6f31bba65cc0d39c271f9702adf22273f0d6626cd39f494c0bce6b408ea\",\"license\":\"GPL-3.0\"},\"src/gated/xAuthAccessRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport '../interface/IAccessRegistry.sol';\\nimport '../factory/IIdFactory.sol';\\nimport '../interface/IClaimIssuer.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\ncontract xAuthAccessRegistry is IAccessRegistry, Ownable, ERC165 {\\n  IIdFactory public factory;\\n  IClaimIssuer public claimIssuer;\\n\\n  mapping(bytes32 => bool) public access;\\n  mapping(address => bytes32) public fundsContract;\\n  mapping(bytes32 => uint256[]) public requiredClaims;\\n\\n  event AccessGranted(bytes32 fundId, address identityAddr);\\n  event AccessRevoked(bytes32 fundId, address identityAddr);\\n  event RequiredClaimsUpdated(bytes32 fundId, uint256[] claimTopics);\\n\\n  constructor(IIdFactory _factory, IClaimIssuer _claimIssuer) Ownable() {\\n    factory = _factory;\\n    claimIssuer = _claimIssuer;\\n  }\\n\\n  function updateFactory(IIdFactory _factory) external onlyOwner {\\n    factory = _factory;\\n  }\\n\\n  function updateClaimIssuer(IClaimIssuer _claimIssuer) external onlyOwner {\\n    claimIssuer = _claimIssuer;\\n  }\\n\\n  function hasAccess(address account, address caller, bytes calldata data) external view override returns (bool) {\\n    address identity = factory.getIdentity(account);\\n\\n    // require(senderIdentity != address(0), 'sender identity is null');\\n\\n    // extract data\\n\\n    // (address recipient, uint256 amount) = abi.decode(data[4:], (address, uint256));\\n\\n    require(identity != address(0), 'account identity is null');\\n\\n    // check the recipient has access to institutional contract\\n\\n    // COMENTED FOR TESTING\\n    // bytes32 fundId = fundsContract[msg.sender];\\n    // require(access[computeKey(fundId, receiverIdentity)] == true, \\\"receiver identity doesn't have access\\\");\\n\\n    // check the recipient has require claims\\n    // uint256[] memory requiredClaimTopics = requiredClaims[fundId];\\n\\n    // for (uint256 i = 0; i < requiredClaimTopics.length; ++i) {\\n    //   bytes32 claimId = keccak256(abi.encode(claimIssuer, requiredClaimTopics[i]));\\n\\n    //   (uint256 topic, , , bytes memory signature, bytes memory claimData, ) = IIdentity(receiverIdentity).getClaim(\\n    //     claimId\\n    //   );\\n\\n    //   bool isValid = claimIssuer.isClaimValid(IIdentity(receiverIdentity), topic, signature, claimData);\\n    //   require(isValid, 'Claim is not valid');\\n    // }\\n\\n    return true;\\n  }\\n\\n  function grantAccess(bytes32 fundId, address identityAddr) public onlyOwner {\\n    bytes32 key = computeKey(fundId, identityAddr);\\n    access[key] = true;\\n    emit AccessGranted(fundId, identityAddr);\\n  }\\n\\n  function updateRequiredClaims(bytes32 fundId, uint256[] calldata claimTopics) public onlyOwner {\\n    requiredClaims[fundId] = claimTopics;\\n    emit RequiredClaimsUpdated(fundId, claimTopics);\\n  }\\n\\n  function revokeAccess(bytes32 fundId, address identityAddr) public onlyOwner {\\n    bytes32 key = computeKey(fundId, identityAddr);\\n    access[key] = false;\\n    emit AccessRevoked(fundId, identityAddr);\\n  }\\n\\n  function computeKey(bytes32 fundId, address identityAddr) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(fundId, identityAddr));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    if (interfaceId == type(IAccessRegistry).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x7e6ad18067372d1a92804a17904caff4cc5c65fc680c6cd1f845e73487de9685\",\"license\":\"MIT\"},\"src/interface/IAccessRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2024 Fireblocks <support@fireblocks.com>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Access Registry Interface\\n * @author Fireblocks\\n * @notice Access Registry Interface serves as a generalized interface for interacting with the Access Registry.\\n *\\n * @dev Interface for the Access Registry features.\\n */\\ninterface IAccessRegistry {\\n  /**\\n   * @notice This function is used to check if the account has necessary permissions to access the system.\\n   * @param account The account to be checked.\\n   * @param caller The account calling the function requiring an access check.\\n   * @param data The data associated with the function call\\n   * @return true if the account is allowed to access the system (false otherwise).\\n   */\\n  function hasAccess(address account, address caller, bytes calldata data) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x408e16af926a4b154433302809c95364bfc255b2a2277dcae818d0bbc254bfee\",\"license\":\"AGPL-3.0-or-later\"},\"src/interface/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\t/**\\n\\t * @dev Emitted when a claim is revoked.\\n\\t *\\n\\t * Specification: MUST be triggered when revoking a claim.\\n\\t */\\n\\tevent ClaimRevoked(bytes indexed signature);\\n\\n\\t/**\\n\\t * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n\\t * @notice will fetch the claim from the identity contract (unsafe).\\n\\t * @param _claimId the id of the claim\\n\\t * @param _identity the address of the identity contract\\n\\t * @return isRevoked true when the claim is revoked\\n\\t */\\n\\tfunction revokeClaim(bytes32 _claimId, address _identity) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n\\t * @param signature the signature of the claim\\n\\t */\\n\\tfunction revokeClaimBySignature(bytes calldata signature) external;\\n\\n\\t/**\\n\\t * @dev Returns revocation status of a claim.\\n\\t * @param _sig the signature of the claim\\n\\t * @return isRevoked true if the claim is revoked and false otherwise\\n\\t */\\n\\tfunction isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev Checks if a claim is valid.\\n\\t * @param _identity the identity contract related to the claim\\n\\t * @param claimTopic the claim topic of the claim\\n\\t * @param sig the signature of the claim\\n\\t * @param data the data field of the claim\\n\\t * @return claimValid true if the claim is valid, false otherwise\\n\\t */\\n\\tfunction isClaimValid(\\n\\t\\tIIdentity _identity,\\n\\t\\tuint256 claimTopic,\\n\\t\\tbytes calldata sig,\\n\\t\\tbytes calldata data\\n\\t) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa2500d5d63e8509796c5fe4130628df40aff0b3a5c905893eb38782b080fdaa7\",\"license\":\"GPL-3.0\"},\"src/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\t/**\\n\\t * @dev Emitted when an execution request was approved.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was successfully called.\\n\\t */\\n\\tevent Approved(uint256 indexed executionId, bool approved);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was approved and successfully performed.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n\\t */\\n\\tevent Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execution request was performed via `execute`.\\n\\t *\\n\\t * Specification: MUST be triggered when execute was successfully called.\\n\\t */\\n\\tevent ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was called and failed\\n\\t *\\n\\t * Specification: MUST be triggered when execute call failed\\n\\t */\\n\\tevent ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was added to the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when addKey was successfully called.\\n\\t */\\n\\tevent KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was removed from the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when removeKey was successfully called.\\n\\t */\\n\\tevent KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\n\\t/**\\n\\t * \\n\\t * @dev Returns True if call is coming from Identity Contract\\n\\t */\\n\\tfunction isComingFromIdentity(bool done) external returns (bool);\\n\\t\\n\\t/**\\n\\t * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n\\t *\\n\\t * Triggers Event: `KeyAdded`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity\\n\\t * itself. If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Approves an execution.\\n\\t *\\n\\t * Triggers Event: `Approved`\\n\\t * Triggers on execution successful Event: `Executed`\\n\\t * Triggers on execution failure Event: `ExecutionFailed`\\n\\t */\\n\\tfunction approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Removes _purpose for _key from the identity.\\n\\t *\\n\\t * Triggers Event: `KeyRemoved`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n\\t * If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Passes an execution instruction to an ERC734 identity.\\n\\t * How the execution is handled is up to the identity implementation:\\n\\t * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n\\t * approve this execution.\\n\\t * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n\\t *\\n\\t * Triggers Event: ExecutionRequested\\n\\t * Triggers on direct execution Event: Executed\\n\\t */\\n\\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n\\t/**\\n\\t * @dev Returns the full key data, if present in the identity.\\n\\t */\\n\\tfunction getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n\\t/**\\n\\t * @dev Returns the list of purposes associated with a key.\\n\\t */\\n\\tfunction getKeyPurposes(bytes32 _key) external view returns (uint256[] memory _purposes);\\n\\n\\t/**\\n\\t * @dev Returns an array of public key bytes32 held by this identity.\\n\\t */\\n\\tfunction getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n\\t/**\\n\\t * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n\\t */\\n\\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0xd5aa8c3915426a519b3826b2ccf5fa510c032e1bc0a5adfa6798d39bb17276cb\",\"license\":\"GPL-3.0\"},\"src/interface/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\t/**\\n\\t * @dev Emitted when a claim was added.\\n\\t *\\n\\t * Specification: MUST be triggered when a claim was successfully added.\\n\\t */\\n\\tevent ClaimAdded(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when a claim was removed.\\n\\t *\\n\\t * Specification: MUST be triggered when removeClaim was successfully called.\\n\\t */\\n\\tevent ClaimRemoved(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when a claim was changed.\\n\\t *\\n\\t * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n\\t */\\n\\tevent ClaimChanged(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Add or update a claim.\\n\\t *\\n\\t * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n\\t *\\n\\t * Specification: Add or update a claim from an issuer.\\n\\t *\\n\\t * _signature is a signed message of the following structure:\\n\\t * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n\\t */\\n\\tfunction addClaim(\\n\\t\\tuint256 _topic,\\n\\t\\tuint256 _scheme,\\n\\t\\taddress issuer,\\n\\t\\tbytes calldata _signature,\\n\\t\\tbytes calldata _data,\\n\\t\\tstring calldata _uri\\n\\t) external returns (bytes32 claimRequestId);\\n\\n\\t/**\\n\\t * @dev Removes a claim.\\n\\t *\\n\\t * Triggers Event: `ClaimRemoved`\\n\\t *\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n\\t */\\n\\tfunction removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Get a claim by its ID.\\n\\t *\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n\\t */\\n\\tfunction getClaim(\\n\\t\\tbytes32 _claimId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 topic,\\n\\t\\t\\tuint256 scheme,\\n\\t\\t\\taddress issuer,\\n\\t\\t\\tbytes memory signature,\\n\\t\\t\\tbytes memory data,\\n\\t\\t\\tstring memory uri\\n\\t\\t);\\n\\n\\t/**\\n\\t * @dev Returns an array of claim IDs by topic.\\n\\t */\\n\\tfunction getClaimIdsByTopic(uint256 _topic) external view returns (bytes32[] memory claimIds);\\n}\\n\",\"keccak256\":\"0xbbe0f6eec226d7d425ad7765f6791a8b46a725526837fd404529077749e27282\",\"license\":\"GPL-3.0\"},\"src/interface/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n\\t/**\\n\\t * @dev Checks if a claim is valid.\\n\\t * @param _identity the identity contract related to the claim\\n\\t * @param claimTopic the claim topic of the claim\\n\\t * @param sig the signature of the claim\\n\\t * @param data the data field of the claim\\n\\t * @return claimValid true if the claim is valid, false otherwise\\n\\t */\\n\\tfunction isClaimValid(\\n\\t\\tIIdentity _identity,\\n\\t\\tuint256 claimTopic,\\n\\t\\tbytes calldata sig,\\n\\t\\tbytes calldata data\\n\\t) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xec87b3d3cb3a2e7cfd75fec5dd80521a286676536de59568f408580ffd8ed26e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080346100c057601f610acf38819003918201601f19168301916001600160401b038311848410176100c55780849260409485528339810103126100c05780516001600160a01b0391828216918290036100c05760200151908282168092036100c0576000549060018060a01b0319913383821617600055604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a381600154161760015560025416176002556109f390816100dc8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a7146107ff575080630c6f78a9146107d757806330b2ae901461079d5780633f96f5571461076857806340554c3a146106e05780634ef1660b1461069257806367dd95f71461053d5780636d43c4c914610511578063715018a6146104ab5780638d53b208146104205780638da5cb5b146103fa578063c45a0155146103d2578063c5b8a6b6146103a3578063d9f165dc14610355578063eefb7e9a146101bc5763f2fde38b146100d357600080fd5b346101b85760206003193601126101b8576100ec610850565b906100f5610881565b6001600160a01b0380921692831561014f57505082548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50346101b85760606003193601126101b8576101d6610850565b6101de61086b565b5067ffffffffffffffff6044358181116103515736602382011215610351578084013582811161034d5736910160240111610349576001600160a01b03948592836001541686519788927f2fea7b8100000000000000000000000000000000000000000000000000000000845216868301528160246020998a935afa92831561033f5782936102ba575b505050161561027957505160018152f35b82606492519162461bcd60e51b8352820152601860248201527f6163636f756e74206964656e74697479206973206e756c6c00000000000000006044820152fd5b9091925086903d8811610337575b601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168301908111838210176103245787918391885281010312610320575190828216820361031d5750388080610268565b80fd5b5080fd5b602484604188634e487b7160e01b835252fd5b3d91506102c8565b86513d84823e3d90fd5b8480fd5b8680fd5b8580fd5b83823461032057602060031936011261032057356001600160a01b03811680910361032057610382610881565b73ffffffffffffffffffffffffffffffffffffffff19600154161760015580f35b50913461031d578160031936011261031d57506103cb6020926103c461086b565b90356108d9565b9051908152f35b5050346103205781600319360112610320576020906001600160a01b03600154169051908152f35b5050346103205781600319360112610320576001600160a01b0360209254169051908152f35b5090346101b857806003193601126101b8577fe7906b77ea165c70ad8268ce5b59b778a198edf9c1ae4118378eefdc76fce5f491356104a561046061086b565b92610469610881565b61047384846108d9565b8652600360205280862060ff19815416905551928392839092916001600160a01b036020916040840195845216910152565b0390a180f35b833461031d578060031936011261031d576104c4610881565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101b85760206003193601126101b8578160209360ff923581526003855220541690519015158152f35b5090346101b857806003193601126101b8578135906024359067ffffffffffffffff90818311610351573660238401121561035157828501359182116103515760248301948260051b93602485369201011161034d5761059b610881565b848752602090600582528288209068010000000000000000851161067f5750805484825580851061065a575b50875280872086885b858110610648575050509181807f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94839451978852870152850152116106445781816060927f7c769db54a25afd07a9e50f502e0b9881e964323620166bdf47f5a9e5034ec5a95848401378101030190a180f35b8380fd5b813583820155908301906001016105d0565b81895284838a2091820191015b81811061067457506105c7565b898155600101610667565b886041602492634e487b7160e01b835252fd5b83823461032057602060031936011261032057356001600160a01b038116809103610320576106bf610881565b73ffffffffffffffffffffffffffffffffffffffff19600254161760025580f35b5090346101b857806003193601126101b8577ff20afd7b032307b01752ee91e3f6a4b83a5b4ab631f9ab279322fd45634382c091356104a561072061086b565b92610729610881565b61073384846108d9565b86526003602052808620600160ff1982541617905551928392839092916001600160a01b036020916040840195845216910152565b50346101b85760206003193601126101b85760209282916001600160a01b0361078f610850565b168252845220549051908152f35b50346101b857816003193601126101b857602435903583526005602052818320805482101561064457835260209283902001549051908152f35b5050346103205781600319360112610320576020906001600160a01b03600254169051908152f35b925050346101b85760206003193601126101b85735917fffffffff000000000000000000000000000000000000000000000000000000008316830361031d575061084a602092610949565b15158152f35b600435906001600160a01b038216820361086657565b600080fd5b602435906001600160a01b038216820361086657565b6001600160a01b0360005416330361089557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b907fffffffffffffffffffffffffffffffffffffffff000000000000000000000000604051916020830193845260601b166040820152603481526060810181811067ffffffffffffffff8211176109335760405251902090565b634e487b7160e01b600052604160045260246000fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167feefb7e9a0000000000000000000000000000000000000000000000000000000081146109b7577f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b5060019056fea26469706673582212202560ccfb37a0fdbc0f3e0e7a88d22ac35527fd386d19ccbac95f7d6216ad55ef64736f6c63430008110033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a7146107ff575080630c6f78a9146107d757806330b2ae901461079d5780633f96f5571461076857806340554c3a146106e05780634ef1660b1461069257806367dd95f71461053d5780636d43c4c914610511578063715018a6146104ab5780638d53b208146104205780638da5cb5b146103fa578063c45a0155146103d2578063c5b8a6b6146103a3578063d9f165dc14610355578063eefb7e9a146101bc5763f2fde38b146100d357600080fd5b346101b85760206003193601126101b8576100ec610850565b906100f5610881565b6001600160a01b0380921692831561014f57505082548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50346101b85760606003193601126101b8576101d6610850565b6101de61086b565b5067ffffffffffffffff6044358181116103515736602382011215610351578084013582811161034d5736910160240111610349576001600160a01b03948592836001541686519788927f2fea7b8100000000000000000000000000000000000000000000000000000000845216868301528160246020998a935afa92831561033f5782936102ba575b505050161561027957505160018152f35b82606492519162461bcd60e51b8352820152601860248201527f6163636f756e74206964656e74697479206973206e756c6c00000000000000006044820152fd5b9091925086903d8811610337575b601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168301908111838210176103245787918391885281010312610320575190828216820361031d5750388080610268565b80fd5b5080fd5b602484604188634e487b7160e01b835252fd5b3d91506102c8565b86513d84823e3d90fd5b8480fd5b8680fd5b8580fd5b83823461032057602060031936011261032057356001600160a01b03811680910361032057610382610881565b73ffffffffffffffffffffffffffffffffffffffff19600154161760015580f35b50913461031d578160031936011261031d57506103cb6020926103c461086b565b90356108d9565b9051908152f35b5050346103205781600319360112610320576020906001600160a01b03600154169051908152f35b5050346103205781600319360112610320576001600160a01b0360209254169051908152f35b5090346101b857806003193601126101b8577fe7906b77ea165c70ad8268ce5b59b778a198edf9c1ae4118378eefdc76fce5f491356104a561046061086b565b92610469610881565b61047384846108d9565b8652600360205280862060ff19815416905551928392839092916001600160a01b036020916040840195845216910152565b0390a180f35b833461031d578060031936011261031d576104c4610881565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101b85760206003193601126101b8578160209360ff923581526003855220541690519015158152f35b5090346101b857806003193601126101b8578135906024359067ffffffffffffffff90818311610351573660238401121561035157828501359182116103515760248301948260051b93602485369201011161034d5761059b610881565b848752602090600582528288209068010000000000000000851161067f5750805484825580851061065a575b50875280872086885b858110610648575050509181807f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94839451978852870152850152116106445781816060927f7c769db54a25afd07a9e50f502e0b9881e964323620166bdf47f5a9e5034ec5a95848401378101030190a180f35b8380fd5b813583820155908301906001016105d0565b81895284838a2091820191015b81811061067457506105c7565b898155600101610667565b886041602492634e487b7160e01b835252fd5b83823461032057602060031936011261032057356001600160a01b038116809103610320576106bf610881565b73ffffffffffffffffffffffffffffffffffffffff19600254161760025580f35b5090346101b857806003193601126101b8577ff20afd7b032307b01752ee91e3f6a4b83a5b4ab631f9ab279322fd45634382c091356104a561072061086b565b92610729610881565b61073384846108d9565b86526003602052808620600160ff1982541617905551928392839092916001600160a01b036020916040840195845216910152565b50346101b85760206003193601126101b85760209282916001600160a01b0361078f610850565b168252845220549051908152f35b50346101b857816003193601126101b857602435903583526005602052818320805482101561064457835260209283902001549051908152f35b5050346103205781600319360112610320576020906001600160a01b03600254169051908152f35b925050346101b85760206003193601126101b85735917fffffffff000000000000000000000000000000000000000000000000000000008316830361031d575061084a602092610949565b15158152f35b600435906001600160a01b038216820361086657565b600080fd5b602435906001600160a01b038216820361086657565b6001600160a01b0360005416330361089557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b907fffffffffffffffffffffffffffffffffffffffff000000000000000000000000604051916020830193845260601b166040820152603481526060810181811067ffffffffffffffff8211176109335760405251902090565b634e487b7160e01b600052604160045260246000fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167feefb7e9a0000000000000000000000000000000000000000000000000000000081146109b7577f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b5060019056fea26469706673582212202560ccfb37a0fdbc0f3e0e7a88d22ac35527fd386d19ccbac95f7d6216ad55ef64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "hasAccess(address,address,bytes)": {
        "params": {
          "account": "The account to be checked.",
          "caller": "The account calling the function requiring an access check.",
          "data": "The data associated with the function call"
        },
        "returns": {
          "_0": "true if the account is allowed to access the system (false otherwise)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasAccess(address,address,bytes)": {
        "notice": "This function is used to check if the account has necessary permissions to access the system."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 458,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IIdFactory)442"
      },
      {
        "astId": 461,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "claimIssuer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IClaimIssuer)758"
      },
      {
        "astId": 465,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "access",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 469,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "fundsContract",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 474,
        "contract": "src/gated/xAuthAccessRegistry.sol:xAuthAccessRegistry",
        "label": "requiredClaims",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IClaimIssuer)758": {
        "encoding": "inplace",
        "label": "contract IClaimIssuer",
        "numberOfBytes": "20"
      },
      "t_contract(IIdFactory)442": {
        "encoding": "inplace",
        "label": "contract IIdFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}