{
  "address": "0xF96E3e5a3949A3015AE5026d29fE12f98a95a4b7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementationAuthority",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isHomeChain",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "AddedClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purpose",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        }
      ],
      "name": "AddedKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "_type",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "AllowedAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gateway",
          "type": "address"
        }
      ],
      "name": "ReceiverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "ReceiverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "RemovedClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purpose",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        }
      ],
      "name": "RemovedKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "TokenFactoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "TokenFactoryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "TokenLinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "WalletLinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "WalletUnlinked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_isHomeChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gateway",
          "type": "address"
        }
      ],
      "name": "addReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "addTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isTrue",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_topic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_scheme",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isTrue",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "addedKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_salt",
          "type": "string"
        }
      ],
      "name": "createIdentity",
      "outputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_salt",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "_managementKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "createIdentityWithManagementKeys",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_salt",
          "type": "string"
        }
      ],
      "name": "createTokenIdentity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "destinationChainSelectorToGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "destinationChainSelectorToReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainSelectors",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainSelector",
          "type": "uint64"
        }
      ],
      "name": "getGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "getIdentity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainSelector",
          "type": "uint64"
        }
      ],
      "name": "getReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReceivers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        }
      ],
      "name": "getWallets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        }
      ],
      "name": "identityIsCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationAuthority",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAllowedContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCreatedIdentity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_salt",
          "type": "string"
        }
      ],
      "name": "isSaltTaken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "isTokenFactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWallet",
          "type": "address"
        }
      ],
      "name": "linkWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainSelector",
          "type": "uint64"
        }
      ],
      "name": "removeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "removeTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isTrue",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_topic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_scheme",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "removedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isTrue",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "removedKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setAllowedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldWallet",
          "type": "address"
        }
      ],
      "name": "unlinkWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd255cd4d5c27875307ff93c0991bd5c4619da53c0f208eae2f0dfa51efd2d63",
  "receipt": {
    "to": null,
    "from": "0x6D571882684d4d34733F204a4612613D666250EC",
    "contractAddress": "0xF96E3e5a3949A3015AE5026d29fE12f98a95a4b7",
    "transactionIndex": 0,
    "gasUsed": "3548247",
    "logsBloom": "0x
    "blockHash": "0x4fc8b503b702ecffe75c02e6f1b64a703c322e12cfb6d791ab18119b7e3f3f78",
    "transactionHash": "0xbd255cd4d5c27875307ff93c0991bd5c4619da53c0f208eae2f0dfa51efd2d63",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12715792,
        "transactionHash": "0xbd255cd4d5c27875307ff93c0991bd5c4619da53c0f208eae2f0dfa51efd2d63",
        "address": "0xF96E3e5a3949A3015AE5026d29fE12f98a95a4b7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d571882684d4d34733f204a4612613d666250ec"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4fc8b503b702ecffe75c02e6f1b64a703c322e12cfb6d791ab18119b7e3f3f78"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12715792,
        "transactionHash": "0xbd255cd4d5c27875307ff93c0991bd5c4619da53c0f208eae2f0dfa51efd2d63",
        "address": "0xF96E3e5a3949A3015AE5026d29fE12f98a95a4b7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006d571882684d4d34733f204a4612613d666250ec",
          "0x0000000000000000000000006d571882684d4d34733f204a4612613d666250ec"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4fc8b503b702ecffe75c02e6f1b64a703c322e12cfb6d791ab18119b7e3f3f78"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12715792,
        "transactionHash": "0xbd255cd4d5c27875307ff93c0991bd5c4619da53c0f208eae2f0dfa51efd2d63",
        "address": "0xF96E3e5a3949A3015AE5026d29fE12f98a95a4b7",
        "topics": [
          "0x77b360cfa209016bdd91c2800cd667bb8ad1b916258568b44a73da1cfe9a44cc",
          "0x0000000000000000000000006d571882684d4d34733f204a4612613d666250ec",
          "0x0000000000000000000000000000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x4fc8b503b702ecffe75c02e6f1b64a703c322e12cfb6d791ab18119b7e3f3f78"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12715792,
        "transactionHash": "0xbd255cd4d5c27875307ff93c0991bd5c4619da53c0f208eae2f0dfa51efd2d63",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006d571882684d4d34733f204a4612613d666250ec",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002748ae9071a6db000000000000000000000000000000000000000000000000034c7cb5e7cd770ce0000000000000000000000000000000000000000000003ec2131556b6e2c2bfc0000000000000000000000000000000000000000000000003253407575bd031e0000000000000000000000000000000000000000000003ec23a5e054754699ac",
        "logIndex": 3,
        "blockHash": "0x4fc8b503b702ecffe75c02e6f1b64a703c322e12cfb6d791ab18119b7e3f3f78"
      }
    ],
    "blockNumber": 12715792,
    "cumulativeGasUsed": "3548247",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6D571882684d4d34733F204a4612613D666250EC",
    "0x3C37e05b696345010afA7b1624912289769aDcd5",
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "e8dd1848045d2086f6e3761ce86f1225",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementationAuthority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isHomeChain\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"AddedClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"AddedKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_type\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AllowedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"ReceiverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ReceiverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"RemovedClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"RemovedKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"TokenFactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"TokenFactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"TokenLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"WalletLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"WalletUnlinked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_isHomeChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"addReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"addedKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"}],\"name\":\"createIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_managementKeys\",\"type\":\"bytes32[]\"}],\"name\":\"createIdentityWithManagementKeys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"}],\"name\":\"createTokenIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"destinationChainSelectorToGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"destinationChainSelectorToReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainSelectors\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainSelector\",\"type\":\"uint64\"}],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainSelector\",\"type\":\"uint64\"}],\"name\":\"getReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"identityIsCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCreatedIdentity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"}],\"name\":\"isSaltTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"isTokenFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"linkWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainSelector\",\"type\":\"uint64\"}],\"name\":\"removeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"removedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"removedKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldWallet\",\"type\":\"address\"}],\"name\":\"unlinkWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addReceiver(uint64,address,address)\":{\"details\":\"See {IdFactory-addReceiver}.\"},\"addTokenFactory(address)\":{\"details\":\"See {IdFactory-addTokenFactory}.\"},\"createIdentity(address,string)\":{\"details\":\"See {IdFactory-createIdentity}.\"},\"createIdentityWithManagementKeys(address,string,bytes32[])\":{\"details\":\"See {IdFactory-createIdentityWithManagementKeys}.\"},\"createTokenIdentity(address,address,string)\":{\"details\":\"See {IdFactory-createTokenIdentity}.\"},\"getBridge()\":{\"details\":\"get bridge address\"},\"getChainSelectors()\":{\"details\":\"See {IdFactory-getChainSelectors}.\"},\"getIdentity(address)\":{\"details\":\"See {IdFactory-getIdentity}.\"},\"getReceiver(uint64)\":{\"details\":\"See {IdFactory-getReceiver}.\"},\"getReceivers()\":{\"details\":\"See {IdFactory-getReceivers}.\"},\"getToken(address)\":{\"details\":\"See {IdFactory-getToken}.\"},\"getWallets(address)\":{\"details\":\"See {IdFactory-getWallets}.\"},\"implementationAuthority()\":{\"details\":\"See {IdFactory-implementationAuthority}.\"},\"isSaltTaken(string)\":{\"details\":\"See {IdFactory-isSaltTaken}.\"},\"isTokenFactory(address)\":{\"details\":\"See {IdFactory-isTokenFactory}.\"},\"linkWallet(address)\":{\"details\":\"See {IdFactory-linkWallet}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeReceiver(uint64)\":{\"details\":\"See {IdFactory-removeReceiver}.\"},\"removeTokenFactory(address)\":{\"details\":\"See {IdFactory-removeTokenFactory}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBridge(address)\":{\"params\":{\"_bridge\":\"the address of the bridge contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlinkWallet(address)\":{\"details\":\"See {IdFactory-unlinkWallet}.\"}},\"stateVariables\":{\"bridge\":{\"details\":\"getter for the bridge contract address\"}},\"version\":1},\"userdoc\":{\"events\":{\"AddedKey(address,bytes32,uint256,uint256)\":{\"notice\":\"events\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factory/IdFactory.sol\":\"IdFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_ccipRouter)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x23827b8b1cd9f1d7886720ab0347d34891c4a584dc9ee048b85a41dc2241917f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"src/bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n// Chainlink\\nimport { IRouterClient } from '@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol';\\nimport { CCIPReceiver } from '@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol';\\nimport { Client } from '@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol';\\n// OpenZeppelin\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\nimport { ReentrancyGuard } from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n// Interfaces\\nimport { IIdentity } from '../interface/IIdentity.sol';\\nimport { Gateway } from '../gateway/Gateway.sol';\\nimport '../factory/IIdFactory.sol';\\n\\ncontract CrossChainBridge is CCIPReceiver, ReentrancyGuard {\\n  /// @notice REMOVE for prod\\n  string public ccipMessage;\\n\\n  address immutable i_router;\\n  address public idFactoryAddress;\\n\\n  // Map to store the messageIds of the messages sent\\n  mapping(bytes32 => bool) public messageIds;\\n\\n  // Map to store allowedContracts\\n  mapping(address => bool) public isAllowedContract;\\n\\n  // Map to store onlyManagers\\n  mapping(address => bool) public isManager;\\n\\n  // Define the enum\\n  enum AccessAddressTypes {\\n    CONTRACT,\\n    MANAGER\\n  }\\n\\n  modifier onlyAllowedSender {\\n    require(\\n      isAllowedContract[msg.sender] == true || isManager[msg.sender] == true,\\n      'Permissions: Sender is not a allowed'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyAllowedContract() {\\n    require(isAllowedContract[msg.sender] == true, 'Permissions: Sender is not a allowed contract');\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    require(isManager[msg.sender] == true, 'Permissions: Sender is not a Manager');\\n    _;\\n  }\\n\\n  modifier onlyAllowedIdentity(address _identity) {\\n    IIdFactory idFactory = IIdFactory(idFactoryAddress);\\n    require(idFactory.identityIsCreated(_identity), 'Permissions: idFactory marks this address as not identity');\\n    _;\\n  }\\n\\n  event AllowedAddress(address indexed _address, uint64 indexed _type, bool indexed _status);\\n\\n  event MessageSent(bytes32 indexed messageId);\\n  event MessageReceived(\\n    bytes32 messageId,\\n    uint64 indexed sourceChainSelector,\\n    address indexed sender,\\n    string indexed action\\n  );\\n  event IdFactoryUpdated(address indexed sender, address indexed newAddress);\\n\\n  constructor(address _router) CCIPReceiver(_router) {\\n    i_router = _router;\\n    isManager[msg.sender] = true;\\n    emit AllowedAddress(msg.sender, uint64(AccessAddressTypes.MANAGER), true);\\n  }\\n\\n  receive() external payable {}\\n\\n  function setFactoryAddress(address _idFactoryAddress) external onlyManager {\\n    idFactoryAddress = _idFactoryAddress;\\n    emit IdFactoryUpdated(msg.sender, _idFactoryAddress);\\n  }\\n\\n  function sendAddClaim(\\n    uint64 destinationChainSelector,\\n    address receiver,\\n    uint256 topic,\\n    uint256 scheme,\\n    address issuer,\\n    bytes memory signature,\\n    bytes memory data,\\n    string memory uri\\n  ) external onlyAllowedIdentity(msg.sender) {\\n    bytes memory _payload = abi.encode(msg.sender, topic, scheme, issuer, signature, data, uri);\\n    bytes memory metaPayload = abi.encode('AddClaim', _payload);\\n    _sendMessage(destinationChainSelector, receiver, metaPayload);\\n  }\\n\\n  function sendRemoveClaim(\\n    uint64 destinationChainSelector,\\n    address receiver,\\n    bytes32 claimId\\n  ) external onlyAllowedIdentity(msg.sender) {\\n    bytes memory _payload = abi.encode(msg.sender, claimId);\\n    bytes memory metaPayload = abi.encode('RemoveClaim',_payload);\\n    _sendMessage(destinationChainSelector, receiver, metaPayload);\\n  }\\n\\n  function sendAddKey(\\n    uint64 destinationChainSelector,\\n    address receiver,\\n    bytes32 key,\\n    uint256 purpose,\\n    uint256 keyType\\n  ) external onlyAllowedIdentity(msg.sender) {\\n    bytes memory _payload = abi.encode(msg.sender, key, purpose, keyType);\\n    bytes memory metaPayload = abi.encode('AddKey', _payload);\\n    _sendMessage(destinationChainSelector, receiver, metaPayload);\\n  }\\n\\n  function sendRemoveKey(\\n    uint64 destinationChainSelector,\\n    address receiver,\\n    bytes32 key,\\n    uint256 purpose\\n  ) external onlyAllowedIdentity(msg.sender) {\\n     bytes memory _payload = abi.encode(msg.sender, key, purpose);\\n    bytes memory metaPayload = abi.encode('RemoveKey', _payload);\\n    _sendMessage(destinationChainSelector, receiver, metaPayload);\\n  }\\n\\n  function sendCreateIdentity(\\n    uint64 destinationChainSelector,\\n    address receiver,\\n    address gateway,\\n    address identityOwner,\\n    string memory salt,\\n    bytes32[] calldata managementKeys\\n  ) external onlyAllowedSender {\\n    bytes memory _payload = abi.encode(gateway, identityOwner, salt, managementKeys);\\n    bytes memory metaPayload = abi.encode('CreateIdentity', _payload);\\n    _sendMessage(destinationChainSelector, receiver, metaPayload);\\n  }\\n\\n  function _sendMessage(uint64 destinationChainSelector, address receiver, bytes memory payload) internal nonReentrant {\\n    (uint256 fee, Client.EVM2AnyMessage memory message) = calculateFeeAndMessage(\\n      destinationChainSelector,\\n      receiver,\\n      payload\\n    );\\n\\n    bytes32 messageId = IRouterClient(i_router).ccipSend{ value: fee }(destinationChainSelector, message);\\n\\n    emit MessageSent(messageId);\\n  }\\n\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal override {\\n    // Check if the message was already processed\\n    require(!messageIds[message.messageId], 'Message already processed');\\n    messageIds[message.messageId] = true;\\n    // Decode the message data\\n    (string memory action, bytes memory _payload) = abi.decode(message.data, (string, bytes));\\n    if (keccak256(bytes(action)) == keccak256(bytes('AddClaim'))) {\\n        (\\n          address targetContract,\\n          uint256 topic,\\n          uint256 scheme,\\n          address issuer,\\n          bytes memory signature,\\n          bytes memory decodedData,\\n          string memory uri\\n        ) = abi.decode(_payload, (address, uint256, uint256, address, bytes, bytes, string));\\n        IIdentity(targetContract).addClaim(topic, scheme, issuer, signature, decodedData, uri);\\n      } else if (keccak256(bytes(action)) == keccak256(bytes('RemoveClaim'))) {\\n        (address targetIdentity, bytes32 claimId) = abi.decode(_payload, (address,bytes32));\\n        IIdentity(targetIdentity).removeClaim(claimId);\\n    } else if (keccak256(bytes(action)) == keccak256(bytes('AddKey'))) {\\n      (address targetIdentity, bytes32 key, uint256 purpose, uint256 keyType) = abi.decode(\\n        _payload,\\n        (address, bytes32, uint256, uint256)\\n      );\\n      IIdentity(targetIdentity).addKey(key, purpose, keyType);\\n      } else if (keccak256(bytes(action)) == keccak256(bytes('RemoveKey'))) {\\n        (address targetIdentity, bytes32 key, uint256 purpose) = abi.decode(_payload, (address, bytes32, uint256));\\n        IIdentity(targetIdentity).removeKey(key, purpose);\\n    } else if (keccak256(bytes(action)) == keccak256(bytes('CreateIdentity'))) {\\n      (address targetContract, address identityOwner, string memory salt, bytes32[] memory managementKeys) = abi.decode(\\n        _payload,\\n        (address, address, string, bytes32[])\\n      );\\n      Gateway(targetContract).deployIdentity(identityOwner, salt, managementKeys);\\n    } else {\\n      revert('Unknown action');\\n    }\\n    emit MessageReceived(message.messageId, message.sourceChainSelector, abi.decode(message.sender, (address)), action);\\n  }\\n\\n  // Function to set allowed contracts\\n  function setAllowedContract(address _contract, bool _status) external onlyManager {\\n    if (_status == true) {\\n      require(Address.isContract(_contract), 'Permissions: Address is not a contract');\\n    }\\n    isAllowedContract[_contract] = _status;\\n\\n    emit AllowedAddress(_contract, uint64(AccessAddressTypes.CONTRACT), _status);\\n  }\\n\\n  // Function to set manager status\\n  function setManager(address _manager, bool _status) external onlyManager {\\n    isManager[_manager] = _status;\\n\\n    emit AllowedAddress(_manager, uint64(AccessAddressTypes.MANAGER), _status);\\n  }\\n\\n  /// @notice REMOVE for prod\\n  function testSendMessage(\\n    uint64 _destinationChainSelector,\\n    address _receiver,\\n    string memory _message\\n  ) public onlyAllowedSender {\\n    bytes memory payload = abi.encode(_message);\\n    _sendMessage(_destinationChainSelector, _receiver, payload);\\n  }\\n\\n  /// @notice REMOVE for prod\\n  function _testRecieveMessage(Client.Any2EVMMessage memory any2EvmMessage) internal {\\n    bytes32 s_lastReceivedMessageId = any2EvmMessage.messageId; // fetch the messageId\\n    ccipMessage = abi.decode(any2EvmMessage.data, (string)); // abi-decoding of the sent text\\n    emit MessageReceived(s_lastReceivedMessageId, 0, msg.sender, ccipMessage);\\n  }\\n\\n  function calculateFeeAndMessage(\\n    uint64 destinationChainSelector,\\n    address receiver,\\n    bytes memory payload\\n  ) public view returns (uint256 fee, Client.EVM2AnyMessage memory message) {\\n    message = Client.EVM2AnyMessage({\\n      receiver: abi.encode(receiver),\\n      data: payload,\\n      tokenAmounts: new Client.EVMTokenAmount[](0),\\n      extraArgs: Client._argsToBytes(Client.EVMExtraArgsV1({ gasLimit: 1000000 })),\\n      feeToken: address(0) // Use native token\\n    });\\n    fee = IRouterClient(i_router).getFee(destinationChainSelector, message);\\n    return (fee, message);\\n  }\\n\\n  // Function to withdraw native token from the contract\\n  function withdraw(address _to, uint256 _amount) external onlyManager nonReentrant {\\n    require(address(this).balance >= _amount, 'Insufficient balance');\\n    Address.sendValue(payable(_to), _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x13056a3bb9d611f03989e45272485191142eb6db22fb1fea9b4d7252a7e1daa6\",\"license\":\"GPL-3.0\"},\"src/factory/IIdFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IIdFactory {\\n  /// events\\n\\n\\t// AddedKey to notify everyone when key added without listening to long list of identity addresses\\n\\tevent AddedKey(address user, bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n  // RemovedKey to notify everyone when key removed without listening to long list of identity addresses\\n\\tevent RemovedKey(address user, bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\n\\t// AddedClaim to notify everyone when claim added without listening to long list of identity addresses\\n\\tevent AddedClaim(\\n    address indexed user,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\tevent RemovedClaim(\\n    address user,\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n  // event emitted whenever a single contract is deployed by the factory\\n  event Deployed(address indexed _addr);\\n\\n  // event emitted when a wallet is linked to an ONCHAINID contract\\n  event WalletLinked(address indexed wallet, address indexed identity);\\n\\n  // event emitted when a token is linked to an ONCHAINID contract\\n  event TokenLinked(address indexed token, address indexed identity);\\n\\n  // event emitted when a wallet is unlinked from an ONCHAINID contract\\n  event WalletUnlinked(address indexed wallet, address indexed identity);\\n\\n  // event emitted when an address is registered on the factory as a Token\\n  // factory address, granting this address the privilege to issue\\n  // Onchain identities for tokens\\n  event TokenFactoryAdded(address indexed factory);\\n\\n  // event emitted when a previously recorded token factory address is removed\\n  event TokenFactoryRemoved(address indexed factory);\\n\\n  // event emitted when a receiver is added for a chainSelector\\n  event ReceiverAdded(uint64 chainSelector, address receiver, address gateway);\\n\\n  // event emitted when a receiver is removed for a chainSelector\\n  event ReceiverRemoved(uint64 chainSelector);\\n\\n  /// functions\\n\\n  /**\\n   *  @dev function used to create a new Identity proxy from the factory\\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  requires a new salt for each deployment\\n   *  _wallet cannot be linked to another ONCHAINID\\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n   *  of the function, including calls to oracles for multichain\\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\\n   */\\n  function createIdentity(address _wallet, string memory _salt) external returns (address);\\n\\n  /**\\n   *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\\n   * MANAGEMENT keys.\\n   *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\\n   *  requires a new salt for each deployment\\n   *  _wallet cannot be linked to another ONCHAINID\\n   *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n   *  of the function, including calls to oracles for multichain\\n   *  deployment security (avoid identity theft), defining payment requirements, etc.\\n   */\\n  function createIdentityWithManagementKeys(\\n    address _wallet,\\n    string memory _salt,\\n    bytes32[] memory _managementKeys\\n  ) external returns (address);\\n\\n  /**\\n   *  @dev function used to create a new Token Identity proxy from the factory\\n   *  @param _token the address of the token contract\\n   *  @param _tokenOwner the owner address of the token\\n   *  @param _salt the salt used by create2 to issue the contract\\n   *  requires a new salt for each deployment\\n   *  _token cannot be linked to another ONCHAINID\\n   *  only Token factory or owner can call (owner should only use its privilege\\n   *  for tokens not issued by a Token factory onchain\\n   */\\n  function createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\\n\\n  /**\\n   * @dev function used to update bridge contract address\\n   * @param _bridge the address of the bridge contract\\n   * can be called only by Owner\\n   */\\n\\n  function setBridge(address _bridge) external;\\n\\n  /**\\n   *  @dev function used to link a new wallet to an existing identity\\n   *  @param _newWallet the address of the wallet to link\\n   *  requires msg.sender to be linked to an existing onchainid\\n   *  the _newWallet will be linked to the same OID contract as msg.sender\\n   *  _newWallet cannot be linked to an OID yet\\n   *  _newWallet cannot be address 0\\n   *  cannot link more than 100 wallets to an OID, for gas consumption reason\\n   */\\n  function linkWallet(address _newWallet) external;\\n\\n  /**\\n   *  @dev function used to unlink a wallet from an existing identity\\n   *  @param _oldWallet the address of the wallet to unlink\\n   *  requires msg.sender to be linked to the same onchainid as _oldWallet\\n   *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\\n   *  _oldWallet cannot be address 0\\n   */\\n  function unlinkWallet(address _oldWallet) external;\\n\\n  /**\\n   *  @dev function used to register an address as a token factory\\n   *  @param _factory the address of the token factory\\n   *  can be called only by Owner\\n   *  _factory cannot be registered yet\\n   *  once the factory has been registered it can deploy token identities\\n   */\\n  function addTokenFactory(address _factory) external;\\n\\n  /**\\n   *  @dev function used to unregister an address previously registered as a token factory\\n   *  @param _factory the address of the token factory\\n   *  can be called only by Owner\\n   *  _factory has to be registered previously\\n   *  once the factory has been unregistered it cannot deploy token identities anymore\\n   */\\n  function removeTokenFactory(address _factory) external;\\n\\n  /**\\n   *  @dev function used to add a receiver for a chainSelector\\n   *  @param _chainSelector the chainSelector for which the receiver is added\\n   *  @param _receiver the address of the receiver\\n   *  @param _gateway the address of the gateway\\n   *  can be called only by Owner\\n   *  _receiver cannot be registered yet\\n   *  once the receiver has been registered it can receive messages from the chainSelector\\n   */\\n  function addReceiver(uint64 _chainSelector, address _receiver, address _gateway) external;\\n\\n  /**\\n   *  @dev function used to remove a receiver for a chainSelector\\n   *  @param _chainSelector the chainSelector for which the receiver is removed\\n   *  can be called only by Owner\\n   *  _receiver has to be registered previously\\n   *  once the receiver has been removed it cannot receive messages from the chainSelector anymore\\n   */\\n  function removeReceiver(uint64 _chainSelector) external;\\n\\n  /**\\n   *  @dev getter for OID contract corresponding to a wallet/token\\n   *  @param _wallet the wallet/token address\\n   */\\n  function getIdentity(address _wallet) external view returns (address);\\n\\n  /**\\n   *  @dev getter to fetch the array of wallets linked to an OID contract\\n   *  @param _identity the address of the OID contract\\n   *  returns an array of addresses linked to the OID\\n   */\\n  function getWallets(address _identity) external view returns (address[] memory);\\n\\n  /**\\n   *  @dev getter to fetch the token address linked to an OID contract\\n   *  @param _identity the address of the OID contract\\n   *  returns the address linked to the OID\\n   */\\n  function getToken(address _identity) external view returns (address);\\n\\n  /**\\n   *  @dev getter to know if an address is registered as token factory or not\\n   *  @param _factory the address of the factory\\n   *  returns true if the address corresponds to a registered factory\\n   */\\n  function isTokenFactory(address _factory) external view returns (bool);\\n\\n  /**\\n   *  @dev getter to know if a salt is taken for the create2 deployment\\n   *  @param _salt the salt used for deployment\\n   */\\n  function isSaltTaken(string calldata _salt) external view returns (bool);\\n\\n  /**\\n   * @dev getter for the implementation authority used by this factory.\\n   */\\n  function implementationAuthority() external view returns (address);\\n\\n  /**\\n   * @dev getter for the receiver of a chainSelector\\n   * @param _chainSelector the chainSelector for which the receiver is fetched\\n   */\\n  function getReceiver(uint64 _chainSelector) external view returns (address);\\n\\n  /**\\n   * @dev getter for the list of chainSelectors\\n   */\\n  function getChainSelectors() external view returns (uint64[] memory);\\n\\n  /**\\n   * @dev getter for the list of receivers\\n   */\\n  function getReceivers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev getter for the bridge contract address\\n   */\\n  function bridge() external view returns (address);\\n\\n  /**\\n   * @dev getter for the created Identites\\n   */\\n  function identityIsCreated(address identity) external view returns (bool);\\n\\n  function addedKey(\\n    bool _isTrue,\\n    bytes32 _key,\\n    uint256 _purpose,\\n    uint256 _type\\n    ) external;\\n\\n    function addedClaim(\\n    bool _isTrue,\\n    uint256 _topic,\\n    uint256 _scheme,\\n    address _issuer,\\n    bytes memory _signature,\\n    bytes memory _data,\\n    string memory _uri\\n    ) external;\\n\\n\\n  function removedKey(\\n    bool _isTrue,\\n    bytes32 _key,\\n    uint256 _purpose,\\n    uint256 _type\\n    ) external;\\n\\n    function removedClaim(\\n    bool _isTrue,\\n    bytes32 _claimId,\\n    uint256 _topic,\\n    uint256 _scheme,\\n    address _issuer,\\n    bytes memory _signature,\\n    bytes memory _data,\\n    string memory _uri\\n    ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0x25757a4fd1fd017f21aea5759ce5e0a21ee338fb996dc414c2343c0b8c456f34\",\"license\":\"GPL-3.0\"},\"src/factory/IdFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport '../proxy/IdentityProxy.sol';\\nimport './IIdFactory.sol';\\nimport '../interface/IERC734.sol';\\nimport { CrossChainBridge } from '../bridge/Bridge.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\n/// @notice REMOVE in prod\\nimport 'hardhat/console.sol';\\n\\ncontract IdFactory is IIdFactory, Ownable {\\n  mapping(address => bool) private _tokenFactories;\\n\\n  // address of the _implementationAuthority contract making the link to the implementation contract\\n  address private immutable _implementationAuthority;\\n\\n  // as it is not possible to deploy 2 times the same contract address, this mapping allows us to check which\\n  // salt is taken and which is not\\n  mapping(string => bool) private _saltTaken;\\n\\n  // ONCHAINID of the wallet owner\\n  mapping(address => address) private _userIdentity;\\n  mapping(address => address) private _identityWallet;\\n\\n  // wallets currently linked to an ONCHAINID\\n  mapping(address => address[]) private _wallets;\\n\\n  // ONCHAINID of the token\\n  mapping(address => address) private _tokenIdentity;\\n\\n  // token linked to an ONCHAINID\\n  mapping(address => address) private _tokenAddress;\\n\\n  // flag to check if the contract is on the home chain\\n  bool public _isHomeChain;\\n\\n  // DetinationChainSelectors and Receivers address (Receiver is the Bridge contract on the destination chain)\\n  mapping(uint64 => address) public destinationChainSelectorToReceiver;\\n  mapping(uint64 => address) public destinationChainSelectorToGateway;\\n  uint64[] private chainSelectors;\\n\\n  // CrossChainBridge address\\n  address public bridge;\\n\\n  // Map to store allowedContracts\\n  mapping(address => bool) public isAllowedContract;\\n\\n  // Map to store onlyManagers\\n  mapping(address => bool) public isManager;\\n\\n  // Map to store created identities\\n  mapping(address => bool) public isCreatedIdentity;\\n\\n  // Define the enum\\n  enum AccessAddressTypes {\\n    CONTRACT,\\n    MANAGER\\n  }\\n\\n  modifier onlyAllowedSender() {\\n    require(\\n      isAllowedContract[msg.sender] == true || isManager[msg.sender] == true,\\n      'Permissions: Sender is not a allowed'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyAllowedContract() {\\n    require(isAllowedContract[msg.sender] == true, 'Permissions: Sender is not a allowed contract');\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    require(isManager[msg.sender] == true, 'Permissions: Sender is not a Manager');\\n    _;\\n  }\\n\\n  event AllowedAddress(address indexed _address, uint64 indexed _type, bool indexed _status);\\n\\n  // setting\\n  constructor(address _owner, address implementationAuthority, bool isHomeChain) {\\n    require(implementationAuthority != address(0), 'invalid argument - zero address');\\n    require(_owner != address(0), 'invalid argument - zero address');\\n\\n    _implementationAuthority = implementationAuthority;\\n    _isHomeChain = isHomeChain;\\n    isManager[_owner] = true;\\n    _transferOwnership(_owner);\\n    emit AllowedAddress(_owner, uint64(AccessAddressTypes.MANAGER), true);\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-addTokenFactory}.\\n   */\\n  function addTokenFactory(address _factory) external override onlyOwner {\\n    require(_factory != address(0), 'invalid argument - zero address');\\n    require(!isTokenFactory(_factory), 'already a factory');\\n    _tokenFactories[_factory] = true;\\n    emit TokenFactoryAdded(_factory);\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-removeTokenFactory}.\\n   */\\n  function removeTokenFactory(address _factory) external override onlyOwner {\\n    require(_factory != address(0), 'invalid argument - zero address');\\n    require(isTokenFactory(_factory), 'not a factory');\\n    _tokenFactories[_factory] = false;\\n    emit TokenFactoryRemoved(_factory);\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-createIdentity}.\\n   */\\n  function createIdentity(\\n    address _wallet,\\n    string memory _salt\\n  ) external override onlyAllowedSender returns (address identity) {\\n    require(_wallet != address(0), 'invalid argument - zero address');\\n    require(keccak256(abi.encode(_salt)) != keccak256(abi.encode('')), 'invalid argument - empty string');\\n    require(!_saltTaken[_salt], 'salt already taken');\\n    require(_userIdentity[_wallet] == address(0), 'wallet already linked to an identity');\\n    identity = _deployIdentity(_salt, _implementationAuthority, _wallet);\\n    _saltTaken[_salt] = true;\\n    _userIdentity[_wallet] = identity;\\n    _identityWallet[identity] = _wallet;\\n    _wallets[identity].push(_wallet);\\n    emit WalletLinked(_wallet, identity);\\n\\n    isCreatedIdentity[identity] = true;\\n    if (_isHomeChain == true) {\\n      bytes32[] memory _keys;\\n      _bridgeCreateIdentity(_wallet, _salt, _keys);\\n    }\\n    return identity;\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-createIdentityWithManagementKeys}.\\n   */\\n  function createIdentityWithManagementKeys(\\n    address _wallet,\\n    string memory _salt,\\n    bytes32[] memory _managementKeys\\n  ) external override onlyAllowedSender returns (address) {\\n    require(_wallet != address(0), 'invalid argument - zero address');\\n    require(keccak256(abi.encode(_salt)) != keccak256(abi.encode('')), 'invalid argument - empty string');\\n    string memory oidSalt = string.concat('OID', _salt);\\n    require(!_saltTaken[oidSalt], 'salt already taken');\\n    require(_userIdentity[_wallet] == address(0), 'wallet already linked to an identity');\\n    require(_managementKeys.length > 0, 'invalid argument - empty list of keys');\\n\\n    address identity = _deployIdentity(oidSalt, _implementationAuthority, address(this));\\n\\n    _saltTaken[oidSalt] = true;\\n    _userIdentity[_wallet] = identity;\\n    _identityWallet[identity] = _wallet;\\n    _wallets[identity].push(_wallet);\\n    isCreatedIdentity[identity] = true;\\n    if (_isHomeChain == true) {\\n      _bridgeCreateIdentity(_wallet, _salt, _managementKeys);\\n    }\\n    for (uint i = 0; i < _managementKeys.length; i++) {\\n      require(\\n        _managementKeys[i] != keccak256(abi.encode(_wallet)),\\n        'invalid argument - wallet is also listed in management keys'\\n      );\\n      IERC734(identity).addKey(_managementKeys[i], 1, 1);\\n    }\\n\\n    IERC734(identity).removeKey(keccak256(abi.encode(address(this))), 1);\\n\\n    emit WalletLinked(_wallet, identity);\\n\\n    return identity;\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-createTokenIdentity}.\\n   */\\n  function createTokenIdentity(\\n    address _token,\\n    address _tokenOwner,\\n    string memory _salt\\n  ) external override returns (address) {\\n    require(isTokenFactory(msg.sender) || msg.sender == owner(), 'only Factory or owner can call');\\n    require(_token != address(0), 'invalid argument - zero address');\\n    require(_tokenOwner != address(0), 'invalid argument - zero address');\\n    require(keccak256(abi.encode(_salt)) != keccak256(abi.encode('')), 'invalid argument - empty string');\\n    string memory tokenIdSalt = string.concat('Token', _salt);\\n    require(!_saltTaken[tokenIdSalt], 'salt already taken');\\n    require(_tokenIdentity[_token] == address(0), 'token already linked to an identity');\\n    address identity = _deployIdentity(tokenIdSalt, _implementationAuthority, _tokenOwner);\\n    _saltTaken[tokenIdSalt] = true;\\n    _tokenIdentity[_token] = identity;\\n    _tokenAddress[identity] = _token;\\n    emit TokenLinked(_token, identity);\\n    return identity;\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-linkWallet}.\\n   */\\n  function linkWallet(address _newWallet) external override {\\n    require(_newWallet != address(0), 'invalid argument - zero address');\\n    require(_userIdentity[msg.sender] != address(0), 'wallet not linked to an identity contract');\\n    require(_userIdentity[_newWallet] == address(0), 'new wallet already linked');\\n    require(_tokenIdentity[_newWallet] == address(0), 'invalid argument - token address');\\n    address identity = _userIdentity[msg.sender];\\n    require(_wallets[identity].length < 101, 'max amount of wallets per ID exceeded');\\n    _userIdentity[_newWallet] = identity;\\n    _wallets[identity].push(_newWallet);\\n    emit WalletLinked(_newWallet, identity);\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-unlinkWallet}.\\n   */\\n  function unlinkWallet(address _oldWallet) external override {\\n    require(_oldWallet != address(0), 'invalid argument - zero address');\\n    require(_oldWallet != msg.sender, 'cannot be called on sender address');\\n    require(_userIdentity[msg.sender] == _userIdentity[_oldWallet], 'only a linked wallet can unlink');\\n    address _identity = _userIdentity[_oldWallet];\\n    delete _userIdentity[_oldWallet];\\n    uint256 length = _wallets[_identity].length;\\n    for (uint256 i = 0; i < length; i++) {\\n      if (_wallets[_identity][i] == _oldWallet) {\\n        _wallets[_identity][i] = _wallets[_identity][length - 1];\\n        _wallets[_identity].pop();\\n        break;\\n      }\\n    }\\n    emit WalletUnlinked(_oldWallet, _identity);\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-addReceiver}.\\n   */\\n\\n  function addReceiver(uint64 _chainSelector, address _receiver, address _gateway) external override onlyOwner {\\n    require(_receiver != address(0), 'invalid argument - zero address');\\n    require(destinationChainSelectorToReceiver[_chainSelector] == address(0), 'receiver already added');\\n    require(destinationChainSelectorToGateway[_chainSelector] == address(0), 'gateway already added');\\n\\n    destinationChainSelectorToReceiver[_chainSelector] = _receiver;\\n    destinationChainSelectorToGateway[_chainSelector] = _gateway;\\n\\n    chainSelectors.push(_chainSelector);\\n    emit ReceiverAdded(_chainSelector, _receiver, _gateway);\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-removeReceiver}.\\n   */\\n\\n  function removeReceiver(uint64 _chainSelector) external override onlyOwner {\\n    require(destinationChainSelectorToReceiver[_chainSelector] != address(0), 'receiver not added');\\n    delete destinationChainSelectorToReceiver[_chainSelector];\\n    delete destinationChainSelectorToGateway[_chainSelector];\\n\\n    uint256 length = chainSelectors.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      if (chainSelectors[i] == _chainSelector) {\\n        chainSelectors[i] = chainSelectors[length - 1];\\n        chainSelectors.pop();\\n        break;\\n      }\\n    }\\n    emit ReceiverRemoved(_chainSelector);\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-getChainSelectors}.\\n   */\\n\\n  function getChainSelectors() external view override returns (uint64[] memory) {\\n    return chainSelectors;\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-getReceiver}.\\n   */\\n\\n  function getReceiver(uint64 _chainSelector) external view override returns (address) {\\n    return destinationChainSelectorToReceiver[_chainSelector];\\n  }\\n\\n  function getGateway(uint64 _chainSelector) external view returns (address) {\\n    return destinationChainSelectorToGateway[_chainSelector];\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-getReceivers}.\\n   */\\n\\n  function getReceivers() external view override returns (address[] memory) {\\n    address[] memory receivers = new address[](chainSelectors.length);\\n    for (uint256 i = 0; i < chainSelectors.length; i++) {\\n      receivers[i] = destinationChainSelectorToReceiver[chainSelectors[i]];\\n    }\\n    return receivers;\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-getIdentity}.\\n   */\\n  function getIdentity(address _wallet) public view override returns (address) {\\n    if (_tokenIdentity[_wallet] != address(0)) {\\n      return _tokenIdentity[_wallet];\\n    } else {\\n      return _userIdentity[_wallet];\\n    }\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-isSaltTaken}.\\n   */\\n  function isSaltTaken(string calldata _salt) external view override returns (bool) {\\n    return _saltTaken[_salt];\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-getWallets}.\\n   */\\n  function getWallets(address _identity) external view override returns (address[] memory) {\\n    return _wallets[_identity];\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-getToken}.\\n   */\\n  function getToken(address _identity) external view override returns (address) {\\n    return _tokenAddress[_identity];\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-isTokenFactory}.\\n   */\\n  function isTokenFactory(address _factory) public view override returns (bool) {\\n    return _tokenFactories[_factory];\\n  }\\n\\n  /**\\n   *  @dev See {IdFactory-implementationAuthority}.\\n   */\\n  function implementationAuthority() public view override returns (address) {\\n    return _implementationAuthority;\\n  }\\n\\n  /**\\n   *\\n   * @param _bridge the address of the bridge contract\\n   */\\n  function setBridge(address _bridge) external onlyOwner {\\n    require(_bridge != address(0), 'invalid argument - zero address');\\n    bridge = _bridge;\\n  }\\n\\n  /**\\n   *  @dev get bridge address\\n   */\\n  function getBridge() external view returns (address) {\\n    return bridge;\\n  }\\n\\n  // deploy function with create2 opcode call\\n  // returns the address of the contract created\\n  function _deploy(string memory salt, bytes memory bytecode) private returns (address) {\\n    bytes32 saltBytes = bytes32(keccak256(abi.encodePacked(salt)));\\n    address addr;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let encoded_data := add(0x20, bytecode) // load initialization code.\\n      let encoded_size := mload(bytecode) // load init code's length.\\n      addr := create2(0, encoded_data, encoded_size, saltBytes)\\n      if iszero(extcodesize(addr)) {\\n        revert(0, 0)\\n      }\\n    }\\n    emit Deployed(addr);\\n    return addr;\\n  }\\n\\n  // function used to deploy an identity using CREATE2\\n  function _deployIdentity(\\n    string memory _salt,\\n    address implementationAuthority,\\n    address _wallet\\n  ) private returns (address) {\\n    bytes memory _code = type(IdentityProxy).creationCode;\\n    bytes memory _constructData = abi.encode(implementationAuthority, _wallet, address(this));\\n    bytes memory bytecode = abi.encodePacked(_code, _constructData);\\n    return _deploy(_salt, bytecode);\\n  }\\n\\n  function _bridgeCreateIdentity(\\n    address _wallet,\\n    string memory oidSalt,\\n    bytes32[] memory managementKeys // uint256 signatureExpiry, // bytes calldata signature\\n  ) internal {\\n    for (uint256 i = 0; i < chainSelectors.length; i++) {\\n      CrossChainBridge bridgeContract = CrossChainBridge(payable(bridge));\\n      bridgeContract.sendCreateIdentity(\\n        chainSelectors[i],\\n        destinationChainSelectorToReceiver[chainSelectors[i]],\\n        destinationChainSelectorToGateway[chainSelectors[i]],\\n        _wallet,\\n        oidSalt,\\n        managementKeys\\n        // signatureExpiry,\\n        // signature\\n      );\\n    }\\n  }\\n\\n  // Function to set allowed contracts\\n  function setAllowedContract(address _contract, bool _status) external onlyManager {\\n    if (_status == true) {\\n      require(Address.isContract(_contract), 'Permissions: Address is not a contract');\\n    }\\n    isAllowedContract[_contract] = _status;\\n\\n    emit AllowedAddress(_contract, uint64(AccessAddressTypes.CONTRACT), _status);\\n  }\\n\\n  // Function to set manager status\\n  function setManager(address _manager, bool _status) external onlyManager {\\n    isManager[_manager] = _status;\\n\\n    emit AllowedAddress(_manager, uint64(AccessAddressTypes.MANAGER), _status);\\n  }\\n\\n  function identityIsCreated(address _identity) external view returns (bool) {\\n    return isCreatedIdentity[_identity];\\n  }\\n\\n  function addedKey(\\n    bool isTrue,\\n    bytes32 _key,\\n    uint256 _purpose,\\n    uint256 _type\\n    ) public {\\n      \\n    require(isCreatedIdentity[msg.sender]== true, \\\"Invalid Identity\\\");\\n    require(isTrue == IERC734(msg.sender).isComingFromIdentity(true), \\\"Permissions: Only Identity can Call\\\");\\n    emit AddedKey(_identityWallet[msg.sender], _key, _purpose, _type);\\n    IERC734(msg.sender).isComingFromIdentity(false);\\n\\n  }\\n\\n    function addedClaim(\\n    bool isTrue,\\n    uint256 _topic,\\n    uint256 _scheme,\\n    address _issuer,\\n    bytes memory _signature,\\n    bytes memory _data,\\n    string memory _uri\\n    ) public {\\n    \\n    require(isCreatedIdentity[msg.sender]== true, \\\"Invalid Identity\\\");\\n    require(isTrue == IERC734(msg.sender).isComingFromIdentity(true), \\\"Permissions: Only Identity can Call\\\");\\n    emit AddedClaim(_identityWallet[msg.sender],_topic, _scheme, _issuer, _signature, _data, _uri);\\n    IERC734(msg.sender).isComingFromIdentity(false);\\n\\n  }\\n\\n\\n  function removedKey(\\n    bool isTrue,\\n    bytes32 _key,\\n    uint256 _purpose,\\n    uint256 _type\\n    ) public {\\n      \\n    require(isCreatedIdentity[msg.sender]== true, \\\"Invalid Identity\\\");\\n    require(isTrue == IERC734(msg.sender).isComingFromIdentity(true), \\\"Permissions: Only Identity can Call\\\");\\n    emit RemovedKey(_identityWallet[msg.sender], _key, _purpose, _type);\\n    IERC734(msg.sender).isComingFromIdentity(false);\\n\\n  }\\n\\n    function removedClaim(\\n    bool isTrue,\\n    bytes32 _claimId,\\n    uint256 _topic,\\n    uint256 _scheme,\\n    address _issuer,\\n    bytes memory _signature,\\n    bytes memory _data,\\n    string memory _uri\\n    ) public {\\n    \\n    require(isCreatedIdentity[msg.sender]== true, \\\"Invalid Identity\\\");\\n    require(isTrue == IERC734(msg.sender).isComingFromIdentity(true), \\\"Permissions: Only Identity can Call\\\");\\n    emit RemovedClaim(_identityWallet[msg.sender], _claimId,_topic, _scheme, _issuer, _signature, _data, _uri);\\n    IERC734(msg.sender).isComingFromIdentity(false);\\n\\n  }\\n\\n}\",\"keccak256\":\"0xd00d7f1f4a8869cf66c6a1a8735f9b70bd448acdbdaaba0860a7277b36b04fd7\",\"license\":\"GPL-3.0\"},\"src/gateway/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '../factory/IdFactory.sol';\\n// import '../bridge/Bridge.sol';\\n\\nusing ECDSA for bytes32;\\n\\n/// A required parameter was set to the Zero address.\\nerror ZeroAddress();\\n/// The maximum number of signers was reached at deployment.\\nerror TooManySigners();\\n/// The signed attempted to add was already approved.\\nerror SignerAlreadyApproved(address signer);\\n/// The signed attempted to remove was not approved.\\nerror SignerAlreadyNotApproved(address signer);\\n/// A requested ONCHAINID deployment was requested without a valid signature while the Gateway requires one.\\nerror UnsignedDeployment();\\n/// A requested ONCHAINID deployment was requested and signer by a non approved signer.\\nerror UnapprovedSigner(address signer);\\n/// A requested ONCHAINID deployment was requested with a signature revoked.\\nerror RevokedSignature(bytes signature);\\n/// A requested ONCHAINID deployment was requested with a signature that expired.\\nerror ExpiredSignature(bytes signature);\\n/// Attempted to revoke a signature that was already revoked.\\nerror SignatureAlreadyRevoked(bytes signature);\\n/// Attempted to approve a signature that was not revoked.\\nerror SignatureNotRevoked(bytes signature);\\n\\ncontract Gateway is Ownable {\\n  IdFactory public idFactory;\\n  mapping(address => bool) public approvedSigners;\\n  mapping(bytes => bool) public revokedSignatures;\\n\\n  event SignerApproved(address indexed signer);\\n  event SignerRevoked(address indexed signer);\\n  event SignatureRevoked(bytes indexed signature);\\n  event SignatureApproved(bytes indexed signature);\\n\\n  /**\\n   *  @dev Constructor for the ONCHAINID Factory Gateway.\\n   *  @param idFactoryAddress the address of the factory to operate (the Gateway must be owner of the Factory).\\n   */\\n  constructor(address idFactoryAddress, address[] memory signersToApprove) Ownable() {\\n    if (idFactoryAddress == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    if (signersToApprove.length > 10) {\\n      revert TooManySigners();\\n    }\\n\\n    for (uint i = 0; i < signersToApprove.length; i++) {\\n      approvedSigners[signersToApprove[i]] = true;\\n    }\\n\\n    idFactory = IdFactory(idFactoryAddress);\\n  }\\n\\n  /**\\n   *  @dev Approve a signer to sign ONCHAINID deployments. If the Gateway is setup to require signature, only\\n   *  deployments requested with a valid signature from an approved signer will be accepted.\\n   *  If the gateway does not require a signature,\\n   *  @param signer the signer address to approve.\\n   */\\n  function approveSigner(address signer) external onlyOwner {\\n    if (signer == address(0)) {\\n      revert ZeroAddress();\\n    }\\n\\n    if (approvedSigners[signer]) {\\n      revert SignerAlreadyApproved(signer);\\n    }\\n\\n    approvedSigners[signer] = true;\\n\\n    emit SignerApproved(signer);\\n  }\\n\\n  /**\\n   *  @dev Revoke a signer to sign ONCHAINID deployments.\\n   *  @param signer the signer address to revoke.\\n   */\\n  function revokeSigner(address signer) external onlyOwner {\\n    if (signer == address(0)) {\\n      revert ZeroAddress();\\n    }\\n\\n    if (!approvedSigners[signer]) {\\n      revert SignerAlreadyNotApproved(signer);\\n    }\\n\\n    delete approvedSigners[signer];\\n\\n    emit SignerRevoked(signer);\\n  }\\n\\n  function deployIdentity(\\n    address identityOwner,\\n    string memory salt,\\n    bytes32[] calldata managementKeys\\n  ) public returns (address) {\\n    if (managementKeys.length == 0) {\\n      return deployIdentityWithSalt(identityOwner, salt);\\n    } else {\\n      return deployIdentityWithSaltAndManagementKeys(identityOwner, salt, managementKeys);\\n    }\\n  }\\n\\n  /**\\n   *  @dev Deploy an ONCHAINID using a factory. The operation must be signed by\\n   *  an approved public key. This method allow to deploy an ONCHAINID using a custom salt.\\n   *  @param identityOwner the address to set as a management key.\\n   *  @param salt to use for the deployment.\\n   */\\n  function deployIdentityWithSalt(address identityOwner, string memory salt) public returns (address) {\\n    if (identityOwner == address(0)) {\\n      revert ZeroAddress();\\n    }\\n\\n    if (!approvedSigners[msg.sender]) {\\n      revert UnapprovedSigner(msg.sender);\\n    }\\n\\n    return idFactory.createIdentity(identityOwner, salt);\\n  }\\n\\n  /**\\n   *  @dev Deploy an ONCHAINID using a factory. The operation must be signed by\\n   *  an approved public key. This method allow to deploy an ONCHAINID using a custom salt and a custom list of\\n   *  management keys. Note that the identity Owner address won't be added as a management keys, if this is desired,\\n   *  the key hash must be listed in the managementKeys array.\\n   *  @param identityOwner the address to set as a management key.\\n   *  @param salt to use for the deployment.\\n   *  @param managementKeys the list of management keys to add to the ONCHAINID.\\n   */\\n  function deployIdentityWithSaltAndManagementKeys(\\n    address identityOwner,\\n    string memory salt,\\n    bytes32[] calldata managementKeys\\n  ) public returns (address) {\\n    if (identityOwner == address(0)) {\\n      revert ZeroAddress();\\n    }\\n\\n    if (!approvedSigners[msg.sender]) {\\n      revert UnapprovedSigner(msg.sender);\\n    }\\n\\n    address identity = idFactory.createIdentityWithManagementKeys(identityOwner, salt, managementKeys);\\n\\n    // bool isHomeChain = idFactory._isHomeChain();\\n\\n    // if (isHomeChain) {\\n    //   address bridgeAddress = idFactory.getBridge();\\n    //   // Explicit conversion to payable address and then to CrossChainBridge\\n    //   CrossChainBridge bridge = CrossChainBridge(payable(bridgeAddress));\\n    //   // Get Destination Chain Selectors and their receivers\\n    //   address[] memory receivers = idFactory.getReceivers();\\n    //   uint64[] memory chainSelectors = idFactory.getChainSelectors();\\n    // Send the CreateIdentity message to the bridge\\n    //   for (uint i = 0; i < receivers.length; i++) {\\n    //     if (receivers[i] != address(bridge)) {\\n    //       bridge.sendCreateIdentity(\\n    //         chainSelectors[i],\\n    //         receivers[i],\\n    //         address(this),\\n    //         identityOwner,\\n    //         salt,\\n    //         managementKeys,\\n    //         signatureExpiry,\\n    //         signature\\n    //       );\\n    //     }\\n    //   }\\n    // }\\n\\n    return identity;\\n  }\\n\\n  /**\\n   *  @dev Deploy an ONCHAINID using a factory using the identityOwner address as salt.\\n   *  @param identityOwner the address to set as a management key.\\n   */\\n  function deployIdentityForWallet(address identityOwner) external returns (address) {\\n    if (identityOwner == address(0)) {\\n      revert ZeroAddress();\\n    }\\n\\n    return idFactory.createIdentity(identityOwner, Strings.toHexString(identityOwner));\\n  }\\n\\n  /**\\n   *  @dev Revoke a signature, if the signature is used to deploy an ONCHAINID, the deployment would be rejected.\\n   *  @param signature the signature to revoke.\\n   */\\n  function revokeSignature(bytes calldata signature) external onlyOwner {\\n    if (revokedSignatures[signature]) {\\n      revert SignatureAlreadyRevoked(signature);\\n    }\\n\\n    revokedSignatures[signature] = true;\\n\\n    emit SignatureRevoked(signature);\\n  }\\n\\n  /**\\n   *  @dev Remove a signature from the revoke list.\\n   *  @param signature the signature to approve.\\n   */\\n  function approveSignature(bytes calldata signature) external onlyOwner {\\n    if (!revokedSignatures[signature]) {\\n      revert SignatureNotRevoked(signature);\\n    }\\n\\n    delete revokedSignatures[signature];\\n\\n    emit SignatureApproved(signature);\\n  }\\n\\n  /**\\n   *  @dev Transfer the ownership of the factory to a new owner.\\n   *  @param newOwner the new owner of the factory.\\n   */\\n  function transferFactoryOwnership(address newOwner) external onlyOwner {\\n    idFactory.transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   *  @dev Call a function on the factory. Only the owner of the Gateway can call this method.\\n   *  @param data the data to call on the factory.\\n   */\\n  function callFactory(bytes memory data) external onlyOwner {\\n    (bool success, ) = address(idFactory).call(data);\\n    require(success, 'Gateway: call to factory failed');\\n  }\\n}\\n\",\"keccak256\":\"0x832a8f2d69c1a7f736f00e156983a3515de8495ff1146301fd6d667ebd4e0d3c\",\"license\":\"GPL-3.0\"},\"src/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\t/**\\n\\t * @dev Emitted when an execution request was approved.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was successfully called.\\n\\t */\\n\\tevent Approved(uint256 indexed executionId, bool approved);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was approved and successfully performed.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n\\t */\\n\\tevent Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execution request was performed via `execute`.\\n\\t *\\n\\t * Specification: MUST be triggered when execute was successfully called.\\n\\t */\\n\\tevent ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was called and failed\\n\\t *\\n\\t * Specification: MUST be triggered when execute call failed\\n\\t */\\n\\tevent ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was added to the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when addKey was successfully called.\\n\\t */\\n\\tevent KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was removed from the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when removeKey was successfully called.\\n\\t */\\n\\tevent KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\n\\t/**\\n\\t * \\n\\t * @dev Returns True if call is coming from Identity Contract\\n\\t */\\n\\tfunction isComingFromIdentity(bool done) external returns (bool);\\n\\t\\n\\t/**\\n\\t * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n\\t *\\n\\t * Triggers Event: `KeyAdded`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity\\n\\t * itself. If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Approves an execution.\\n\\t *\\n\\t * Triggers Event: `Approved`\\n\\t * Triggers on execution successful Event: `Executed`\\n\\t * Triggers on execution failure Event: `ExecutionFailed`\\n\\t */\\n\\tfunction approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Removes _purpose for _key from the identity.\\n\\t *\\n\\t * Triggers Event: `KeyRemoved`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n\\t * If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Passes an execution instruction to an ERC734 identity.\\n\\t * How the execution is handled is up to the identity implementation:\\n\\t * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n\\t * approve this execution.\\n\\t * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n\\t *\\n\\t * Triggers Event: ExecutionRequested\\n\\t * Triggers on direct execution Event: Executed\\n\\t */\\n\\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n\\t/**\\n\\t * @dev Returns the full key data, if present in the identity.\\n\\t */\\n\\tfunction getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n\\t/**\\n\\t * @dev Returns the list of purposes associated with a key.\\n\\t */\\n\\tfunction getKeyPurposes(bytes32 _key) external view returns (uint256[] memory _purposes);\\n\\n\\t/**\\n\\t * @dev Returns an array of public key bytes32 held by this identity.\\n\\t */\\n\\tfunction getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n\\t/**\\n\\t * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n\\t */\\n\\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0xd5aa8c3915426a519b3826b2ccf5fa510c032e1bc0a5adfa6798d39bb17276cb\",\"license\":\"GPL-3.0\"},\"src/interface/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\t/**\\n\\t * @dev Emitted when a claim was added.\\n\\t *\\n\\t * Specification: MUST be triggered when a claim was successfully added.\\n\\t */\\n\\tevent ClaimAdded(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when a claim was removed.\\n\\t *\\n\\t * Specification: MUST be triggered when removeClaim was successfully called.\\n\\t */\\n\\tevent ClaimRemoved(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when a claim was changed.\\n\\t *\\n\\t * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n\\t */\\n\\tevent ClaimChanged(\\n\\t\\tbytes32 indexed claimId,\\n\\t\\tuint256 indexed topic,\\n\\t\\tuint256 scheme,\\n\\t\\taddress indexed issuer,\\n\\t\\tbytes signature,\\n\\t\\tbytes data,\\n\\t\\tstring uri\\n\\t);\\n\\n\\t/**\\n\\t * @dev Add or update a claim.\\n\\t *\\n\\t * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n\\t *\\n\\t * Specification: Add or update a claim from an issuer.\\n\\t *\\n\\t * _signature is a signed message of the following structure:\\n\\t * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n\\t */\\n\\tfunction addClaim(\\n\\t\\tuint256 _topic,\\n\\t\\tuint256 _scheme,\\n\\t\\taddress issuer,\\n\\t\\tbytes calldata _signature,\\n\\t\\tbytes calldata _data,\\n\\t\\tstring calldata _uri\\n\\t) external returns (bytes32 claimRequestId);\\n\\n\\t/**\\n\\t * @dev Removes a claim.\\n\\t *\\n\\t * Triggers Event: `ClaimRemoved`\\n\\t *\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n\\t */\\n\\tfunction removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Get a claim by its ID.\\n\\t *\\n\\t * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n\\t */\\n\\tfunction getClaim(\\n\\t\\tbytes32 _claimId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 topic,\\n\\t\\t\\tuint256 scheme,\\n\\t\\t\\taddress issuer,\\n\\t\\t\\tbytes memory signature,\\n\\t\\t\\tbytes memory data,\\n\\t\\t\\tstring memory uri\\n\\t\\t);\\n\\n\\t/**\\n\\t * @dev Returns an array of claim IDs by topic.\\n\\t */\\n\\tfunction getClaimIdsByTopic(uint256 _topic) external view returns (bytes32[] memory claimIds);\\n}\\n\",\"keccak256\":\"0xbbe0f6eec226d7d425ad7765f6791a8b46a725526837fd404529077749e27282\",\"license\":\"GPL-3.0\"},\"src/interface/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n\\t/**\\n\\t * @dev Checks if a claim is valid.\\n\\t * @param _identity the identity contract related to the claim\\n\\t * @param claimTopic the claim topic of the claim\\n\\t * @param sig the signature of the claim\\n\\t * @param data the data field of the claim\\n\\t * @return claimValid true if the claim is valid, false otherwise\\n\\t */\\n\\tfunction isClaimValid(\\n\\t\\tIIdentity _identity,\\n\\t\\tuint256 claimTopic,\\n\\t\\tbytes calldata sig,\\n\\t\\tbytes calldata data\\n\\t) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xec87b3d3cb3a2e7cfd75fec5dd80521a286676536de59568f408580ffd8ed26e\",\"license\":\"GPL-3.0\"},\"src/interface/IImplementationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface IImplementationAuthority {\\n\\t// event emitted when the implementation contract is updated\\n\\tevent UpdatedImplementation(address newAddress);\\n\\n\\t/**\\n\\t * @dev updates the address used as implementation by the proxies linked\\n\\t * to this ImplementationAuthority contract\\n\\t * @param _newImplementation the address of the new implementation contract\\n\\t * only Owner can call\\n\\t */\\n\\tfunction updateImplementation(address _newImplementation) external;\\n\\n\\t/**\\n\\t * @dev returns the address of the implementation\\n\\t */\\n\\tfunction getImplementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x949a5f9238b5e95797eeef34e34c05ad9546d41b17be5be54acb5859a3c99918\",\"license\":\"GPL-3.0\"},\"src/proxy/IdentityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport '../interface/IImplementationAuthority.sol';\\n\\ncontract IdentityProxy {\\n  /**\\n   *  @dev constructor of the proxy Identity contract\\n   *  @param _implementationAuthority the implementation Authority contract address\\n   *  @param initialManagementKey the management key at deployment\\n   *  @param _idFactoryAddress the _idFactoryAddress at deployment\\n   *  the proxy is going to use the logic deployed on the implementation contract\\n   *  deployed at an address listed in the ImplementationAuthority contract\\n   */\\n  constructor(address _implementationAuthority, address initialManagementKey, address _idFactoryAddress) {\\n    require(_implementationAuthority != address(0), 'invalid argument - zero address');\\n    require(initialManagementKey != address(0), 'invalid argument - zero address');\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(0x821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc, _implementationAuthority)\\n    }\\n\\n    address logic = IImplementationAuthority(_implementationAuthority).getImplementation();\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = logic.delegatecall(\\n      abi.encodeWithSignature('initialize(address,address)', initialManagementKey, _idFactoryAddress)\\n    );\\n    require(success, 'Initialization failed.');\\n  }\\n\\n  /**\\n   *  @dev fallback proxy function used for any transaction call that is made using\\n   *  the Identity contract ABI and called on the proxy contract\\n   *  The proxy will update its local storage depending on the behaviour requested\\n   *  by the implementation contract given by the Implementation Authority\\n   */\\n  // solhint-disable-next-line no-complex-fallback\\n  fallback() external payable {\\n    address logic = IImplementationAuthority(implementationAuthority()).getImplementation();\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      calldatacopy(0x0, 0x0, calldatasize())\\n      let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\\n      let retSz := returndatasize()\\n      returndatacopy(0, 0, retSz)\\n      switch success\\n      case 0 {\\n        revert(0, retSz)\\n      }\\n      default {\\n        return(0, retSz)\\n      }\\n    }\\n  }\\n\\n  function implementationAuthority() public view returns (address) {\\n    address implemAuth;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      implemAuth := sload(0x821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc)\\n    }\\n    return implemAuth;\\n  }\\n}\\n\",\"keccak256\":\"0xc820d53d36131569fd96bc21683b324fc93ce3090af74166b3029113025e71bb\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0346200012b57601f6200406d38819003918201601f19168301916001600160401b0383118484101762000130578084926060946040528339810103126200012b576200004d8162000146565b60406200005d6020840162000146565b920151908115158092036200012b57620000d4916200007c33620001a8565b6001600160a01b036200009385821615156200015b565b821693620000a38515156200015b565b60805260ff199060ff826008541691161760085583600052600e6020526001604060002091825416179055620001a8565b600180604051927f77b360cfa209016bdd91c2800cd667bb8ad1b916258568b44a73da1cfe9a44cc600080a4613e7d9081620001f0823960805181818161046b015281816107e30152818161138c01526126640152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200012b57565b156200016357565b60405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d207a65726f2061646472657373006044820152606490fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe6080604052600436101562000014575b600080fd5b60003560e01c80630fffbaf31462000227578063213c9c7a146200023d5780632307f88214620003505780632c8aa6de14620003455780632fea7b81146200033a5780633a500451146200032f5780633d56ff6614620003245780633e3bc3d71462000319578063422c29a4146200030e5780634a2a333214620002695780635027dbe21462000303578063532f946514620002f857806355de1faf14620002ed5780635977043814620002e25780635cdfd64214620002d7578063715018a614620002cc5780637b6b91c714620002c15780638da5cb5b14620002b65780638dd1480214620002ab5780638e952bfe14620002a0578063937529ef14620002955780639ce19365146200028a5780639d7c87b8146200021c578063a262d8d2146200027f578063a5e90eee1462000274578063ab12c35f1462000269578063ad67cd0f146200025e578063b4442b7b1462000253578063b8bb81261462000248578063b97fef86146200023d578063e061646b1462000232578063e78cea921462000227578063edff31f3146200021c578063f2fde38b1462000211578063f3ae24151462000206578063f43b855514620001fb578063fe5cd59a14620001f05763fe5e2e1b14620001e657600080fd5b6200000f62002177565b506200000f620020b3565b506200000f62002044565b506200000f62002000565b506200000f62001f13565b506200000f620016ad565b506200000f62000367565b506200000f62001e45565b506200000f62000404565b506200000f62001cbd565b506200000f62001af7565b506200000f6200195c565b506200000f62000a20565b506200000f620018b6565b506200000f62001720565b506200000f620015c9565b506200000f620014da565b506200000f6200125f565b506200000f620011fe565b506200000f620011d4565b506200000f6200105f565b506200000f62000fa9565b506200000f62000f0c565b506200000f62000ecc565b506200000f62000d8b565b506200000f62000ced565b506200000f62000a69565b506200000f62000976565b506200000f620008ec565b506200000f6200063e565b506200000f620004f0565b506200000f620004b5565b506200000f6200048f565b506200000f62000448565b60009103126200000f57565b50346200000f5760006003193601126200000f5760206001600160a01b03600c5416604051908152f35b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b606435906001600160a01b03821682036200000f57565b608435906001600160a01b03821682036200000f57565b604435906001600160a01b03821682036200000f57565b50346200000f5760206003193601126200000f576001600160a01b036200042a62000391565b16600052600f602052602060ff604060002054166040519015158152f35b50346200000f5760006003193601126200000f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346200000f5760006003193601126200000f57602060ff600854166040519015158152f35b50346200000f5760206003193601126200000f576020620004df620004d962000391565b62003043565b6001600160a01b0360405191168152f35b50346200000f5760206003193601126200000f5760043567ffffffffffffffff8082116200000f57366023830112156200000f5781600401359081116200000f5736602482840101116200000f57620005556200055c9160246200056e940162003087565b5460ff1690565b60405190151581529081906020820190565b0390f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116200059e57604052565b620005a862000572565b604052565b90601f601f19910116810190811067ffffffffffffffff8211176200059e57604052565b81601f820112156200000f5780359067ffffffffffffffff82116200062e575b604051926200060b6020601f19601f8601160185620005ad565b828452602083830101116200000f57816000926020809301838601378301015290565b6200063862000572565b620005f1565b50346200000f5760606003193601126200000f576200065c62000391565b62000666620003a8565b9060443567ffffffffffffffff81116200000f576200068e6200056e913690600401620005d1565b92620006b162000555336001600160a01b03166000526001602052604060002090565b8015620008c6575b620006c49062002b18565b620008866001600160a01b03936200081d62000810620008096200077588851699620006f28b151562002282565b620007018a8916151562002282565b6200076f60405160208101816200071985836200238b565b03916200072f601f1993848101835282620005ad565b5190209060405162000764602082019282620007578560409060208152600060208201520190565b03908101835282620005ad565b5190201415620023a1565b62002b64565b9562000797620007916200078d620005558a620023ed565b1590565b62002415565b620007e1620007da620007ce620007c1886001600160a01b03166000526006602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b1562002bbc565b7f000000000000000000000000000000000000000000000000000000000000000087620030a0565b94620023ed565b600160ff19825416179055565b620008688362000840836001600160a01b03166000526006602052604060002090565b906001600160a01b031673ffffffffffffffffffffffffffffffffffffffff19825416179055565b62000840836001600160a01b03166000526007602052604060002090565b6040519384938216907fa8261d398ddc63db24cc53cd0c63c9464cabad1bc478ede2107b32c1c4010b7a600080a36001600160a01b031682526020820190565b50620006c4620008e2620007ce6000546001600160a01b031690565b33149050620006b9565b50346200000f5760206003193601126200000f576001600160a01b036200091262000391565b166000526001602052602060ff604060002054166040519015158152f35b6020908160408183019282815285518094520193019160005b82811062000958575050505090565b83516001600160a01b03168552938101939281019260010162000949565b50346200000f576020806003193601126200000f576001600160a01b03806200099e62000391565b1660005260058252604060002091604051809282855492838152019460005282600020926000915b838310620009ee576200056e86620009e1818a0382620005ad565b6040519182918262000930565b8454811687529581019560019485019490920191620009c6565b6004359067ffffffffffffffff821682036200000f57565b50346200000f5760206003193601126200000f5767ffffffffffffffff62000a4762000a08565b16600052600960205260206001600160a01b0360406000205416604051908152f35b50346200000f5760206003193601126200000f5762000a8762000391565b6001600160a01b03908181169162000aa183151562002282565b62000aaf3384141562002daa565b62000b0562000ad5620007c1336001600160a01b03166000526003602052604060002090565b8262000afc620007ce620007c1876001600160a01b03166000526003602052604060002090565b91161462002e1c565b62000b6662000b4962000b2f620007c1856001600160a01b03166000526003602052604060002090565b936001600160a01b03166000526003602052604060002090565b73ffffffffffffffffffffffffffffffffffffffff198154169055565b62000b84826001600160a01b03166000526005602052604060002090565b549160005b83811062000bbd575b818316857f35e6fc363a4bf723d53b26c1a751674aca9c3ead425f0591f84f5540ede86f12600080a3005b8462000c02620007ce62000bef8462000be9876001600160a01b03166000526005602052604060002090565b620024e9565b90546001600160a01b039160031b1c1690565b1462000c195762000c139062002a3c565b62000b89565b62000c7b62000c5c62000bef84959662000c5562000c4e62000ca0976001600160a01b03166000526005602052604060002090565b9162002e68565b90620024e9565b9162000be9856001600160a01b03166000526005602052604060002090565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b62000cc862000cc2826001600160a01b03166000526005602052604060002090565b62002e99565b81903862000b92565b801515036200000f57565b6004359062000ceb8262000cd1565b565b50346200000f5760e06003193601126200000f5760043562000d0f8162000cd1565b62000d19620003bf565b67ffffffffffffffff91906084358381116200000f5762000d3f903690600401620005d1565b60a4358481116200000f5762000d5a903690600401620005d1565b9160c4359485116200000f5762000d7a62000d89953690600401620005d1565b93604435906024359062003659565b005b50346200000f5760406003193601126200000f5762000da962000391565b60243562000db78162000cd1565b60008092338252600e60205262000dda600160ff604085205416151514620034e8565b821515926001841462000e4e575b9062000e266001600160a01b039262000e14836001600160a01b0316600052600d602052604060002090565b9060ff60ff1983541691151516179055565b167f77b360cfa209016bdd91c2800cd667bb8ad1b916258568b44a73da1cfe9a44cc8280a480f35b908092503b1562000e625790839162000de8565b608460405162461bcd60e51b815260206004820152602660248201527f5065726d697373696f6e733a2041646472657373206973206e6f74206120636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b50346200000f5760206003193601126200000f5760206001600160a01b038062000ef562000391565b166000526007825260406000205416604051908152f35b50346200000f576101006003193601126200000f5762000f2b62000cdc565b62000f35620003d6565b67ffffffffffffffff919060a4358381116200000f5762000f5b903690600401620005d1565b60c4358481116200000f5762000f76903690600401620005d1565b9160e4359485116200000f5762000f9662000d89953690600401620005d1565b9360643590604435906024359062003822565b50346200000f57600080600319360112620010155762000fc862002229565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b6020908160408183019282815285518094520193019160005b82811062001040575050505090565b835167ffffffffffffffff168552938101939281019260010162001031565b50346200000f5760006003193601126200000f5760408051600b548082529160208201600b600052927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9906000915b816003840110620011675794620010f39285926200056e9754918181106200114b575b8181106200112d575b8181106200110d575b10620010fe575b500383620005ad565b519182918262001018565b60c01c815260200138620010ea565b608083901c67ffffffffffffffff168452926001906020019301620010e3565b82871c67ffffffffffffffff168452926001906020019301620010da565b67ffffffffffffffff83168452926001906020019301620010d1565b946001600491875490620011c867ffffffffffffffff92620011948385831667ffffffffffffffff169052565b67ffffffffffffffff818a1c851616602084015267ffffffffffffffff608082811c90951616838a015260c01c6060830152565b019601920191620010ae565b50346200000f5760006003193601126200000f5760206001600160a01b0360005416604051908152f35b50346200000f5760206003193601126200000f576001600160a01b036200122462000391565b6200122e62002229565b166200123c81151562002282565b73ffffffffffffffffffffffffffffffffffffffff19600c541617600c55600080f35b50346200000f576040806003193601126200000f576200127e62000391565b6024359167ffffffffffffffff83116200000f57620012a66200056e933690600401620005d1565b9133600052600d602052600160ff8360002054161515148015620014c0575b620012d090620022ce565b6001600160a01b0392838216620012e981151562002282565b6200133d845160208101816200130086836200238b565b039162001316601f1993848101835282620005ad565b51902090865162000764602082019282620007578560409060208152600060208201520190565b62001354620007916200078d6200055585620023ed565b620013856200137e620007ce620007c1866001600160a01b03166000526003602052604060002090565b1562002461565b620013b2837f000000000000000000000000000000000000000000000000000000000000000084620030a0565b94620013c26200081084620023ed565b620013e58662000840866001600160a01b03166000526003602052604060002090565b620014088462000840886001600160a01b03166000526004602052604060002090565b62001431846200142b886001600160a01b03166000526005602052604060002090565b62002513565b8516907f8e0c709111388f5480579514d86663489ab1f206fe6da1a0c4d03ac8c318b3c6600080a36200147b62000810856001600160a01b0316600052600f602052604060002090565b60016200148a60085460ff1690565b151514620014ad575b5050516001600160a01b0390911681529081906020820190565b620014b891620032d7565b388062001493565b50600e60205260008290205460ff161515600114620012c5565b50346200000f5760206003193601126200000f57620014f862000391565b6200150262002229565b6001600160a01b0381166200151981151562002282565b600091818352600160205260ff604084205416156200158557620015546200155e916001600160a01b03166000526001602052604060002090565b60ff198154169055565b7fd1fd5274f793d20291c0abfe42e1ef63213a11b34996d485f7afb8fe014248518280a280f35b606460405162461bcd60e51b815260206004820152600d60248201527f6e6f74206120666163746f7279000000000000000000000000000000000000006044820152fd5b50346200000f5760206003193601126200000f57620015e762000391565b620015f162002229565b6001600160a01b0381166200160881151562002282565b600091818352600160205260ff60408420541662001669576200081062001642916001600160a01b03166000526001602052604060002090565b7f45eb8ac5344d2d3f306550fe6e969ca4190526313c512afed851d052bf2ab2fd8280a280f35b606460405162461bcd60e51b815260206004820152601160248201527f616c7265616479206120666163746f72790000000000000000000000000000006044820152fd5b50346200000f5760206003193601126200000f5767ffffffffffffffff620016d462000a08565b16600052600a60205260206001600160a01b0360406000205416604051908152f35b60031960809101126200000f57600435620017118162000cd1565b90602435906044359060643590565b50346200000f576200173236620016f6565b906200176760016200175e62000555969596336001600160a01b0316600052600f602052604060002090565b15151462003559565b60405193620017ba6320c286c360e11b948587526020968781806200179460048201906001602083019252565b03816000335af1908115620018a6575b60009162001884575b50151590151514620035a5565b7f6c3e6a5419180ece4a65de295843c99b08bcab9c7272b2a262c6fd40c923648a6200181b62001801620007c1336001600160a01b03166000526004602052604060002090565b6040516001600160a01b0390911681529081906020820190565b0390a4604051908152600060048201528181806024810103816000335af1801562001874575b6200184857005b8162000d8992903d106200186c575b620018638183620005ad565b81019062002af3565b503d62001857565b6200187e62002b0b565b62001841565b6200189f9150883d8a116200186c57620018638183620005ad565b38620017ad565b620018b062002b0b565b620017a4565b50346200000f5760406003193601126200000f57620018d462000391565b602435620018e28162000cd1565b60016001600160a01b03600093338552600e6020526200190d8360ff604088205416151514620034e8565b1691828452600e6020526200193281604086209060ff60ff1983541691151516179055565b1515917f77b360cfa209016bdd91c2800cd667bb8ad1b916258568b44a73da1cfe9a44cc8480a480f35b50346200000f5760606003193601126200000f576200197a62000a08565b62001984620003a8565b6200198e620003ed565b916200199962002229565b6001600160a01b03620019b0818416151562002282565b67ffffffffffffffff821660005260096020526040600020541662001ab35762001aae7faf04939e4a104cb535300983808017af7c8d2d67546d09d7e376284b746d503b9362001a2762001a20620007ce620007c18667ffffffffffffffff16600052600a602052604060002090565b1562002eda565b62001a4b84620008408567ffffffffffffffff166000526009602052604060002090565b62001a6f81620008408567ffffffffffffffff16600052600a602052604060002090565b62001a7a8362002f78565b6040519384938491604091949367ffffffffffffffff60608501961684526001600160a01b03809216602085015216910152565b0390a1005b606460405162461bcd60e51b815260206004820152601660248201527f726563656976657220616c7265616479206164646564000000000000000000006044820152fd5b50346200000f5760206003193601126200000f5762001b1562000a08565b62001b1f62002229565b62001b576001600160a01b0362001b4e620007c18467ffffffffffffffff166000526009602052604060002090565b16151562002fb4565b62001b7a62000b498267ffffffffffffffff166000526009602052604060002090565b62001b9d62000b498267ffffffffffffffff16600052600a602052604060002090565b600b5467ffffffffffffffff82811660005b83811062001bf5575b60405167ffffffffffffffff861681527fcea06f9f2bc78e7d1b24fb4ae56d46f703c06c45641f8ee24441d9331b2228e890806020810162001aae565b818362001c1a62001c068462002f26565b905467ffffffffffffffff9160031b1c1690565b161462001c325762001c2c9062002a3c565b62001baf565b7fcea06f9f2bc78e7d1b24fb4ae56d46f703c06c45641f8ee24441d9331b2228e894925062001caa915062001c8462001c7d62001c0662001c7762001aae9762002e68565b62002f26565b9162002f26565b90919082549060031b9167ffffffffffffffff9283811b93849216901b16911916179055565b62001cb462003000565b91388062001bb8565b50346200000f5760206003193601126200000f5762001cdb62000391565b6001600160a01b038082169162001cf483151562002282565b62001d2662001d1e620007ce620007c1336001600160a01b03166000526003602052604060002090565b151562002c2e565b62001d5762001d50620007ce620007c1846001600160a01b03166000526003602052604060002090565b1562002ca0565b62001d8862001d81620007ce620007c1846001600160a01b03166000526006602052604060002090565b1562002cec565b62001e1c62001dae620007c1336001600160a01b03166000526003602052604060002090565b9162001ddb606562001dd3856001600160a01b03166000526005602052604060002090565b541062002d38565b62001dfe8362000840836001600160a01b03166000526003602052604060002090565b6200142b836001600160a01b03166000526005602052604060002090565b16907f8e0c709111388f5480579514d86663489ab1f206fe6da1a0c4d03ac8c318b3c6600080a3005b50346200000f576000806003193601126200101557600b5462001e688162002088565b9060409262001e7a84519384620005ad565b818352601f1962001e8b8362002088565b016020903682860137815b83811062001ead578551806200056e878262000930565b8067ffffffffffffffff62001ec662001f0d9362002f26565b90549060031b1c1684526009835262001f0762001eed8886206001600160a01b0390541690565b62001ef9838962002a5b565b906001600160a01b03169052565b62002a3c565b62001e96565b50346200000f5760206003193601126200000f5762001f3162000391565b62001f3b62002229565b6001600160a01b03809116801562001f965760009182548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346200000f5760206003193601126200000f576001600160a01b036200202662000391565b16600052600e602052602060ff604060002054166040519015158152f35b50346200000f5760206003193601126200000f576001600160a01b036200206a62000391565b16600052600d602052602060ff604060002054166040519015158152f35b60209067ffffffffffffffff8111620020a3575b60051b0190565b620020ad62000572565b6200209c565b50346200000f5760606003193601126200000f57620020d162000391565b67ffffffffffffffff906024358281116200000f57620020f6903690600401620005d1565b906044359283116200000f57366023840112156200000f5782600401356200211e8162002088565b936200212e6040519586620005ad565b81855260209160248387019160051b830101913683116200000f57602401905b82821062002167576200056e620018018888886200254f565b813581529083019083016200214e565b50346200000f576200218936620016f6565b90620021b560016200175e62000555969596336001600160a01b0316600052600f602052604060002090565b60405193620021e26320c286c360e11b948587526020968781806200179460048201906001602083019252565b7fc1a817229c15999766e602bca79965ec75780caeb4c58b34fc0b29b332ab2d896200181b62001801620007c1336001600160a01b03166000526004602052604060002090565b6001600160a01b036000541633036200223e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156200228a57565b606460405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d207a65726f2061646472657373006044820152fd5b15620022d657565b608460405162461bcd60e51b8152602060048201526024808201527f5065726d697373696f6e733a2053656e646572206973206e6f74206120616c6c60448201527f6f776564000000000000000000000000000000000000000000000000000000006064820152fd5b60005b838110620023535750506000910152565b818101518382015260200162002342565b90601f19601f60209362002384815180928187528780880191016200233f565b0116010190565b9060206200239e92818152019062002364565b90565b15620023a957565b606460405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d20656d70747920737472696e67006044820152fd5b6020620024089181604051938285809451938492016200233f565b8101600281520301902090565b156200241d57565b606460405162461bcd60e51b815260206004820152601260248201527f73616c7420616c72656164792074616b656e00000000000000000000000000006044820152fd5b156200246957565b608460405162461bcd60e51b8152602060048201526024808201527f77616c6c657420616c7265616479206c696e6b656420746f20616e206964656e60448201527f74697479000000000000000000000000000000000000000000000000000000006064820152fd5b50634e487b7160e01b600052603260045260246000fd5b805482101562002503575b60005260206000200190600090565b6200250d620024d2565b620024f4565b9062000c7b62000ceb92805490680100000000000000008210156200253f575b600182018155620024e9565b6200254962000572565b62002533565b6200055592600090338252602090600d82526001946040918660ff8487205416151514801562002945575b6200258590620022ce565b6001600160a01b0390818716966200259f88151562002282565b845193620025fe87860186620025b684836200238b565b0396620025cc601f1998898101835282620005ad565b5190208751898101906200076481620025f18460409060208152600060208201520190565b038a8101835282620005ad565b6200261d620007916200078d62002615846200295b565b9d8e620023ed565b620026476200137e620007ce620007c1856001600160a01b03166000526003602052604060002090565b6200265583511515620029b3565b62002691620008106200268a307f00000000000000000000000000000000000000000000000000000000000000008f620030a0565b9c620023ed565b620026b48b62000840846001600160a01b03166000526003602052604060002090565b620026d782620008408d6001600160a01b03166000526004602052604060002090565b620026fa826200142b8d6001600160a01b03166000526005602052604060002090565b6200271c620008108c6001600160a01b0316600052600f602052604060002090565b828a6200272b60085460ff1690565b15151462002931575b5050889287908b16995b62002829575b505050508282620027db927f8e0c709111388f5480579514d86663489ab1f206fe6da1a0c4d03ac8c318b3c6969594516200279884820192826200075730869190916001600160a01b036020820193169052565b5190209051809381927f53d413c5000000000000000000000000000000000000000000000000000000008352600483016020600191939293604081019481520152565b0381868a5af1801562002819575b620027f6575b505080a390565b816200281092903d106200186c57620018638183620005ad565b503880620027ef565b6200282362002b0b565b620027e9565b82518110156200292b57806200287d62002848620028f2938662002a5b565b5188516001600160a01b0386168b820190815290620028728160208401038b8101835282620005ad565b519020141562002a81565b8888620028d98d62002890858962002a5b565b518b519485809481937f1d381240000000000000000000000000000000000000000000000000000000008352600483016040600191939293606081019481528260208201520152565b03925af180156200291b575b620028f9575b5062002a3c565b836200273e565b6200291390893d8b116200186c57620018638183620005ad565b5038620028eb565b6200292562002b0b565b620028e5565b62002744565b6200293d91836200341b565b388262002734565b50600e84528285205460ff16151587146200257a565b9062000ceb602360405180947f4f494400000000000000000000000000000000000000000000000000000000006020830152620029a281518092602086860191016200233f565b8101036003810185520183620005ad565b15620029bb57565b608460405162461bcd60e51b815260206004820152602560248201527f696e76616c696420617267756d656e74202d20656d707479206c697374206f6660448201527f206b6579730000000000000000000000000000000000000000000000000000006064820152fd5b50634e487b7160e01b600052601160045260246000fd5b600190600019811462002a4d570190565b62002a5762002a25565b0190565b602091815181101562002a71575b60051b010190565b62002a7b620024d2565b62002a69565b1562002a8957565b608460405162461bcd60e51b815260206004820152603b60248201527f696e76616c696420617267756d656e74202d2077616c6c657420697320616c7360448201527f6f206c697374656420696e206d616e6167656d656e74206b65797300000000006064820152fd5b908160209103126200000f57516200239e8162000cd1565b506040513d6000823e3d90fd5b1562002b2057565b606460405162461bcd60e51b815260206004820152601e60248201527f6f6e6c7920466163746f7279206f72206f776e65722063616e2063616c6c00006044820152fd5b9062000ceb602560405180947f546f6b656e000000000000000000000000000000000000000000000000000000602083015262002bab81518092602086860191016200233f565b8101036005810185520183620005ad565b1562002bc457565b608460405162461bcd60e51b815260206004820152602360248201527f746f6b656e20616c7265616479206c696e6b656420746f20616e206964656e7460448201527f69747900000000000000000000000000000000000000000000000000000000006064820152fd5b1562002c3657565b608460405162461bcd60e51b815260206004820152602960248201527f77616c6c6574206e6f74206c696e6b656420746f20616e206964656e7469747960448201527f20636f6e747261637400000000000000000000000000000000000000000000006064820152fd5b1562002ca857565b606460405162461bcd60e51b815260206004820152601960248201527f6e65772077616c6c657420616c7265616479206c696e6b6564000000000000006044820152fd5b1562002cf457565b606460405162461bcd60e51b815260206004820152602060248201527f696e76616c696420617267756d656e74202d20746f6b656e20616464726573736044820152fd5b1562002d4057565b608460405162461bcd60e51b815260206004820152602560248201527f6d617820616d6f756e74206f662077616c6c657473207065722049442065786360448201527f65656465640000000000000000000000000000000000000000000000000000006064820152fd5b1562002db257565b608460405162461bcd60e51b815260206004820152602260248201527f63616e6e6f742062652063616c6c6564206f6e2073656e64657220616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b1562002e2457565b606460405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061206c696e6b65642077616c6c65742063616e20756e6c696e6b006044820152fd5b90600019820191821162002e7857565b62000ceb62002a25565b50634e487b7160e01b600052603160045260246000fd5b6000198154801562002eca575b019062002eb48282620024e9565b6001600160a01b0382549160031b1b1916905555565b62002ed462002e82565b62002ea6565b1562002ee257565b606460405162461bcd60e51b815260206004820152601560248201527f6761746577617920616c726561647920616464656400000000000000000000006044820152fd5b90600b5482101562002f68575b600b60005260188260021c7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9019260031b1690565b62002f72620024d2565b62002f33565b62000ceb9062001c84600b546801000000000000000081101562002fa4575b60018101600b5562002f26565b62002fae62000572565b62002f97565b1562002fbc57565b606460405162461bcd60e51b815260206004820152601260248201527f7265636569766572206e6f7420616464656400000000000000000000000000006044820152fd5b600019600b54801562003033575b016200301a8162002f26565b67ffffffffffffffff82549160031b1b19169055600b55565b6200303d62002e82565b6200300e565b6001600160a01b03908116600081815260066020526040902054821615620030775760005260066020526040600020541690565b5060036020526040600020541690565b6020908260405193849283378101600281520301902090565b6200314660206200239e94936105199460405195620030c284820188620005ad565b808752838701906200392f823960405192848401926001600160a01b0380921684521660408401523060608401526060835262003124608084019784891067ffffffffffffffff8a11176200314c575b8860405251809260a08601906200233f565b8201620031398351809360a08401906200233f565b01038085520183620005ad565b6200315c565b6200315662000572565b62003112565b6040516200318a602082816200317c81830196878151938492016200233f565b8101038084520182620005ad565b519020908051906020016000f5803b156200000f576001600160a01b0381167ff40fcec21964ffb566044d083b4073f29f7f7929110ea19e1b3ebe375d89055e600080a290565b94919367ffffffffffffffff6200321794921686526001600160a01b03809281602097168789015216604087015216606085015260c0608085015260c084019062002364565b9160a08184039101528060605192838152019160809160005b8281106200323f575050505090565b83518552938101939281019260010162003230565b9367ffffffffffffffff6200329b94929693961685526001600160a01b03809281602098168888015216604086015216606084015260c0608084015260c083019062002364565b9060a081830391015281808451928381520193019160005b828110620032c2575050505090565b835185529381019392810192600101620032b3565b91909160005b600b54811015620034155762003307620007ce620007ce620007ce600c546001600160a01b031690565b906200331762001c068262002f26565b62003348620007c16200332e62001c068562002f26565b67ffffffffffffffff166000526009602052604060002090565b906200337a620007c16200336062001c068662002f26565b67ffffffffffffffff16600052600a602052604060002090565b843b156200000f57620033e194869360008094620033c98c604051988997889687957ff75b0ec300000000000000000000000000000000000000000000000000000000875260048701620031d1565b03925af1801562003405575b620033e7575062002a3c565b620032dd565b80620033f7620033fe9262000589565b806200035b565b38620028eb565b6200340f62002b0b565b620033d5565b50509050565b9092919260005b600b54811015620034e1576200344c620007ce620007ce620007ce600c546001600160a01b031690565b906200345c62001c068262002f26565b62003473620007c16200332e62001c068562002f26565b906200348b620007c16200336062001c068662002f26565b843b156200000f57620034db94879360008094620033c98d8b604051998a98899788967ff75b0ec30000000000000000000000000000000000000000000000000000000088526004880162003254565b62003422565b5050509050565b15620034f057565b608460405162461bcd60e51b8152602060048201526024808201527f5065726d697373696f6e733a2053656e646572206973206e6f742061204d616e60448201527f61676572000000000000000000000000000000000000000000000000000000006064820152fd5b156200356157565b606460405162461bcd60e51b815260206004820152601060248201527f496e76616c6964204964656e74697479000000000000000000000000000000006044820152fd5b15620035ad57565b608460405162461bcd60e51b815260206004820152602360248201527f5065726d697373696f6e733a204f6e6c79204964656e746974792063616e204360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152fd5b926200363b6200239e95936200364a93865260806020870152608086019062002364565b90848203604086015262002364565b91606081840391015262002364565b94957f6ecc8862e587399c270764c32a5b20be85d8217ea399faa49aa04803f2e645d59193620037426001600160a01b0392969496620036b660016200175e62000555336001600160a01b0316600052600f602052604060002090565b604051996200370c6320c286c360e11b9a8b8d5260208d819e8080620036e56004869401906001602083019252565b03816000335af1918215620037c0575b6000926200379e575b5050151590151514620035a5565b62003732620007ce620007c1336001600160a01b03166000526004602052604060002090565b9660405195869516998562003617565b0390a4604051908152600060048201528181806024810103816000335af180156200378e575b62003771575050565b816200378b92903d106200186c57620018638183620005ad565b50565b6200379862002b0b565b62003768565b620037b89250803d106200186c57620018638183620005ad565b388e620036fe565b620037ca62002b0b565b620036f5565b93906200239e959362003813936001600160a01b036200380493168752602087015260a0604087015260a086019062002364565b90848203606086015262002364565b91608081840391015262002364565b959362003742620038ca987f4a4d2944838c03f4f55259ccea3b43da71c7ae20941cbf3981d737d0df2636b994966001600160a01b039496986200388360016200175e62000555336001600160a01b0316600052600f602052604060002090565b6040516320c286c360e11b8082526001600483015260209d909c90918e9081816024816000335af19182156200391e575b600092620038fc575050151590151514620035a5565b620038ec620007c1336001600160a01b03166000526004602052604060002090565b99604051968796169a86620037d0565b620039169250803d106200186c57620018638183620005ad565b388f620036fe565b6200392862002b0b565b620038b456fe6080604090808252346101e657606081610519803803809161002182856101eb565b8339810103126101e6576100348161020e565b602091600461004f8561004886850161020e565b930161020e565b916001600160a01b0390859085831690839061006c831515610222565b1695610079871515610222565b7f821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc55875163557887a160e11b815293849182905afa9182156101db576000926101a1575b508551928584019463485cc95560e01b8652602485015216604483015260448252608082019060018060401b039383831085841117610185576000938493885251915af4903d1561019b573d90811161018557835190610126601f8201601f19168501836101eb565b81526000833d92013e5b156101435750516102aa908161026f8239f35b606491519062461bcd60e51b82526004820152601660248201527f496e697469616c697a6174696f6e206661696c65642e000000000000000000006044820152fd5b634e487b7160e01b600052604160045260246000fd5b50610130565b90918582813d83116101d4575b6101b881836101eb565b810103126101d157506101ca9061020e565b90386100bd565b80fd5b503d6101ae565b86513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761018557604052565b51906001600160a01b03821682036101e657565b1561022957565b60405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d207a65726f2061646472657373006044820152606490fdfe608080604052600436101561011b575b6000816020816004849561006d73ffffffffffffffffffffffffffffffffffffffff7f821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc541673ffffffffffffffffffffffffffffffffffffffff1690565b7faaf10f420000000000000000000000000000000000000000000000000000000082525afa90811561010e575b82916100e1575b50368280378136917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8f05a01f43d90816000803e156100dd576000f35b6000fd5b61010091506020903d8211610106575b6100fa826101a4565b01610215565b386100a1565b3d91506100f1565b610116610267565b61009a565b6000803560e01c632307f88214610132575061000f565b90346101a057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a05760209073ffffffffffffffffffffffffffffffffffffffff7f821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc54168152f35b5080fd5b601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09101166080016080811067ffffffffffffffff8211176101e657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060209101126102625760805173ffffffffffffffffffffffffffffffffffffffff811681036102625790565b600080fd5b506040513d6000823e3d90fdfea264697066735822122083706edf8447da720c06bd407053cb5f181c237417e1f831e8cfcb4e1a26a3c564736f6c63430008110033a2646970667358221220805a152c14f11f092a35d442663bef7ed2d4216fa38b72aea6acf13ad7ed49b964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b60003560e01c80630fffbaf31462000227578063213c9c7a146200023d5780632307f88214620003505780632c8aa6de14620003455780632fea7b81146200033a5780633a500451146200032f5780633d56ff6614620003245780633e3bc3d71462000319578063422c29a4146200030e5780634a2a333214620002695780635027dbe21462000303578063532f946514620002f857806355de1faf14620002ed5780635977043814620002e25780635cdfd64214620002d7578063715018a614620002cc5780637b6b91c714620002c15780638da5cb5b14620002b65780638dd1480214620002ab5780638e952bfe14620002a0578063937529ef14620002955780639ce19365146200028a5780639d7c87b8146200021c578063a262d8d2146200027f578063a5e90eee1462000274578063ab12c35f1462000269578063ad67cd0f146200025e578063b4442b7b1462000253578063b8bb81261462000248578063b97fef86146200023d578063e061646b1462000232578063e78cea921462000227578063edff31f3146200021c578063f2fde38b1462000211578063f3ae24151462000206578063f43b855514620001fb578063fe5cd59a14620001f05763fe5e2e1b14620001e657600080fd5b6200000f62002177565b506200000f620020b3565b506200000f62002044565b506200000f62002000565b506200000f62001f13565b506200000f620016ad565b506200000f62000367565b506200000f62001e45565b506200000f62000404565b506200000f62001cbd565b506200000f62001af7565b506200000f6200195c565b506200000f62000a20565b506200000f620018b6565b506200000f62001720565b506200000f620015c9565b506200000f620014da565b506200000f6200125f565b506200000f620011fe565b506200000f620011d4565b506200000f6200105f565b506200000f62000fa9565b506200000f62000f0c565b506200000f62000ecc565b506200000f62000d8b565b506200000f62000ced565b506200000f62000a69565b506200000f62000976565b506200000f620008ec565b506200000f6200063e565b506200000f620004f0565b506200000f620004b5565b506200000f6200048f565b506200000f62000448565b60009103126200000f57565b50346200000f5760006003193601126200000f5760206001600160a01b03600c5416604051908152f35b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b606435906001600160a01b03821682036200000f57565b608435906001600160a01b03821682036200000f57565b604435906001600160a01b03821682036200000f57565b50346200000f5760206003193601126200000f576001600160a01b036200042a62000391565b16600052600f602052602060ff604060002054166040519015158152f35b50346200000f5760006003193601126200000f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346200000f5760006003193601126200000f57602060ff600854166040519015158152f35b50346200000f5760206003193601126200000f576020620004df620004d962000391565b62003043565b6001600160a01b0360405191168152f35b50346200000f5760206003193601126200000f5760043567ffffffffffffffff8082116200000f57366023830112156200000f5781600401359081116200000f5736602482840101116200000f57620005556200055c9160246200056e940162003087565b5460ff1690565b60405190151581529081906020820190565b0390f35b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116200059e57604052565b620005a862000572565b604052565b90601f601f19910116810190811067ffffffffffffffff8211176200059e57604052565b81601f820112156200000f5780359067ffffffffffffffff82116200062e575b604051926200060b6020601f19601f8601160185620005ad565b828452602083830101116200000f57816000926020809301838601378301015290565b6200063862000572565b620005f1565b50346200000f5760606003193601126200000f576200065c62000391565b62000666620003a8565b9060443567ffffffffffffffff81116200000f576200068e6200056e913690600401620005d1565b92620006b162000555336001600160a01b03166000526001602052604060002090565b8015620008c6575b620006c49062002b18565b620008866001600160a01b03936200081d62000810620008096200077588851699620006f28b151562002282565b620007018a8916151562002282565b6200076f60405160208101816200071985836200238b565b03916200072f601f1993848101835282620005ad565b5190209060405162000764602082019282620007578560409060208152600060208201520190565b03908101835282620005ad565b5190201415620023a1565b62002b64565b9562000797620007916200078d620005558a620023ed565b1590565b62002415565b620007e1620007da620007ce620007c1886001600160a01b03166000526006602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b1562002bbc565b7f000000000000000000000000000000000000000000000000000000000000000087620030a0565b94620023ed565b600160ff19825416179055565b620008688362000840836001600160a01b03166000526006602052604060002090565b906001600160a01b031673ffffffffffffffffffffffffffffffffffffffff19825416179055565b62000840836001600160a01b03166000526007602052604060002090565b6040519384938216907fa8261d398ddc63db24cc53cd0c63c9464cabad1bc478ede2107b32c1c4010b7a600080a36001600160a01b031682526020820190565b50620006c4620008e2620007ce6000546001600160a01b031690565b33149050620006b9565b50346200000f5760206003193601126200000f576001600160a01b036200091262000391565b166000526001602052602060ff604060002054166040519015158152f35b6020908160408183019282815285518094520193019160005b82811062000958575050505090565b83516001600160a01b03168552938101939281019260010162000949565b50346200000f576020806003193601126200000f576001600160a01b03806200099e62000391565b1660005260058252604060002091604051809282855492838152019460005282600020926000915b838310620009ee576200056e86620009e1818a0382620005ad565b6040519182918262000930565b8454811687529581019560019485019490920191620009c6565b6004359067ffffffffffffffff821682036200000f57565b50346200000f5760206003193601126200000f5767ffffffffffffffff62000a4762000a08565b16600052600960205260206001600160a01b0360406000205416604051908152f35b50346200000f5760206003193601126200000f5762000a8762000391565b6001600160a01b03908181169162000aa183151562002282565b62000aaf3384141562002daa565b62000b0562000ad5620007c1336001600160a01b03166000526003602052604060002090565b8262000afc620007ce620007c1876001600160a01b03166000526003602052604060002090565b91161462002e1c565b62000b6662000b4962000b2f620007c1856001600160a01b03166000526003602052604060002090565b936001600160a01b03166000526003602052604060002090565b73ffffffffffffffffffffffffffffffffffffffff198154169055565b62000b84826001600160a01b03166000526005602052604060002090565b549160005b83811062000bbd575b818316857f35e6fc363a4bf723d53b26c1a751674aca9c3ead425f0591f84f5540ede86f12600080a3005b8462000c02620007ce62000bef8462000be9876001600160a01b03166000526005602052604060002090565b620024e9565b90546001600160a01b039160031b1c1690565b1462000c195762000c139062002a3c565b62000b89565b62000c7b62000c5c62000bef84959662000c5562000c4e62000ca0976001600160a01b03166000526005602052604060002090565b9162002e68565b90620024e9565b9162000be9856001600160a01b03166000526005602052604060002090565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b62000cc862000cc2826001600160a01b03166000526005602052604060002090565b62002e99565b81903862000b92565b801515036200000f57565b6004359062000ceb8262000cd1565b565b50346200000f5760e06003193601126200000f5760043562000d0f8162000cd1565b62000d19620003bf565b67ffffffffffffffff91906084358381116200000f5762000d3f903690600401620005d1565b60a4358481116200000f5762000d5a903690600401620005d1565b9160c4359485116200000f5762000d7a62000d89953690600401620005d1565b93604435906024359062003659565b005b50346200000f5760406003193601126200000f5762000da962000391565b60243562000db78162000cd1565b60008092338252600e60205262000dda600160ff604085205416151514620034e8565b821515926001841462000e4e575b9062000e266001600160a01b039262000e14836001600160a01b0316600052600d602052604060002090565b9060ff60ff1983541691151516179055565b167f77b360cfa209016bdd91c2800cd667bb8ad1b916258568b44a73da1cfe9a44cc8280a480f35b908092503b1562000e625790839162000de8565b608460405162461bcd60e51b815260206004820152602660248201527f5065726d697373696f6e733a2041646472657373206973206e6f74206120636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b50346200000f5760206003193601126200000f5760206001600160a01b038062000ef562000391565b166000526007825260406000205416604051908152f35b50346200000f576101006003193601126200000f5762000f2b62000cdc565b62000f35620003d6565b67ffffffffffffffff919060a4358381116200000f5762000f5b903690600401620005d1565b60c4358481116200000f5762000f76903690600401620005d1565b9160e4359485116200000f5762000f9662000d89953690600401620005d1565b9360643590604435906024359062003822565b50346200000f57600080600319360112620010155762000fc862002229565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b6020908160408183019282815285518094520193019160005b82811062001040575050505090565b835167ffffffffffffffff168552938101939281019260010162001031565b50346200000f5760006003193601126200000f5760408051600b548082529160208201600b600052927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9906000915b816003840110620011675794620010f39285926200056e9754918181106200114b575b8181106200112d575b8181106200110d575b10620010fe575b500383620005ad565b519182918262001018565b60c01c815260200138620010ea565b608083901c67ffffffffffffffff168452926001906020019301620010e3565b82871c67ffffffffffffffff168452926001906020019301620010da565b67ffffffffffffffff83168452926001906020019301620010d1565b946001600491875490620011c867ffffffffffffffff92620011948385831667ffffffffffffffff169052565b67ffffffffffffffff818a1c851616602084015267ffffffffffffffff608082811c90951616838a015260c01c6060830152565b019601920191620010ae565b50346200000f5760006003193601126200000f5760206001600160a01b0360005416604051908152f35b50346200000f5760206003193601126200000f576001600160a01b036200122462000391565b6200122e62002229565b166200123c81151562002282565b73ffffffffffffffffffffffffffffffffffffffff19600c541617600c55600080f35b50346200000f576040806003193601126200000f576200127e62000391565b6024359167ffffffffffffffff83116200000f57620012a66200056e933690600401620005d1565b9133600052600d602052600160ff8360002054161515148015620014c0575b620012d090620022ce565b6001600160a01b0392838216620012e981151562002282565b6200133d845160208101816200130086836200238b565b039162001316601f1993848101835282620005ad565b51902090865162000764602082019282620007578560409060208152600060208201520190565b62001354620007916200078d6200055585620023ed565b620013856200137e620007ce620007c1866001600160a01b03166000526003602052604060002090565b1562002461565b620013b2837f000000000000000000000000000000000000000000000000000000000000000084620030a0565b94620013c26200081084620023ed565b620013e58662000840866001600160a01b03166000526003602052604060002090565b620014088462000840886001600160a01b03166000526004602052604060002090565b62001431846200142b886001600160a01b03166000526005602052604060002090565b62002513565b8516907f8e0c709111388f5480579514d86663489ab1f206fe6da1a0c4d03ac8c318b3c6600080a36200147b62000810856001600160a01b0316600052600f602052604060002090565b60016200148a60085460ff1690565b151514620014ad575b5050516001600160a01b0390911681529081906020820190565b620014b891620032d7565b388062001493565b50600e60205260008290205460ff161515600114620012c5565b50346200000f5760206003193601126200000f57620014f862000391565b6200150262002229565b6001600160a01b0381166200151981151562002282565b600091818352600160205260ff604084205416156200158557620015546200155e916001600160a01b03166000526001602052604060002090565b60ff198154169055565b7fd1fd5274f793d20291c0abfe42e1ef63213a11b34996d485f7afb8fe014248518280a280f35b606460405162461bcd60e51b815260206004820152600d60248201527f6e6f74206120666163746f7279000000000000000000000000000000000000006044820152fd5b50346200000f5760206003193601126200000f57620015e762000391565b620015f162002229565b6001600160a01b0381166200160881151562002282565b600091818352600160205260ff60408420541662001669576200081062001642916001600160a01b03166000526001602052604060002090565b7f45eb8ac5344d2d3f306550fe6e969ca4190526313c512afed851d052bf2ab2fd8280a280f35b606460405162461bcd60e51b815260206004820152601160248201527f616c7265616479206120666163746f72790000000000000000000000000000006044820152fd5b50346200000f5760206003193601126200000f5767ffffffffffffffff620016d462000a08565b16600052600a60205260206001600160a01b0360406000205416604051908152f35b60031960809101126200000f57600435620017118162000cd1565b90602435906044359060643590565b50346200000f576200173236620016f6565b906200176760016200175e62000555969596336001600160a01b0316600052600f602052604060002090565b15151462003559565b60405193620017ba6320c286c360e11b948587526020968781806200179460048201906001602083019252565b03816000335af1908115620018a6575b60009162001884575b50151590151514620035a5565b7f6c3e6a5419180ece4a65de295843c99b08bcab9c7272b2a262c6fd40c923648a6200181b62001801620007c1336001600160a01b03166000526004602052604060002090565b6040516001600160a01b0390911681529081906020820190565b0390a4604051908152600060048201528181806024810103816000335af1801562001874575b6200184857005b8162000d8992903d106200186c575b620018638183620005ad565b81019062002af3565b503d62001857565b6200187e62002b0b565b62001841565b6200189f9150883d8a116200186c57620018638183620005ad565b38620017ad565b620018b062002b0b565b620017a4565b50346200000f5760406003193601126200000f57620018d462000391565b602435620018e28162000cd1565b60016001600160a01b03600093338552600e6020526200190d8360ff604088205416151514620034e8565b1691828452600e6020526200193281604086209060ff60ff1983541691151516179055565b1515917f77b360cfa209016bdd91c2800cd667bb8ad1b916258568b44a73da1cfe9a44cc8480a480f35b50346200000f5760606003193601126200000f576200197a62000a08565b62001984620003a8565b6200198e620003ed565b916200199962002229565b6001600160a01b03620019b0818416151562002282565b67ffffffffffffffff821660005260096020526040600020541662001ab35762001aae7faf04939e4a104cb535300983808017af7c8d2d67546d09d7e376284b746d503b9362001a2762001a20620007ce620007c18667ffffffffffffffff16600052600a602052604060002090565b1562002eda565b62001a4b84620008408567ffffffffffffffff166000526009602052604060002090565b62001a6f81620008408567ffffffffffffffff16600052600a602052604060002090565b62001a7a8362002f78565b6040519384938491604091949367ffffffffffffffff60608501961684526001600160a01b03809216602085015216910152565b0390a1005b606460405162461bcd60e51b815260206004820152601660248201527f726563656976657220616c7265616479206164646564000000000000000000006044820152fd5b50346200000f5760206003193601126200000f5762001b1562000a08565b62001b1f62002229565b62001b576001600160a01b0362001b4e620007c18467ffffffffffffffff166000526009602052604060002090565b16151562002fb4565b62001b7a62000b498267ffffffffffffffff166000526009602052604060002090565b62001b9d62000b498267ffffffffffffffff16600052600a602052604060002090565b600b5467ffffffffffffffff82811660005b83811062001bf5575b60405167ffffffffffffffff861681527fcea06f9f2bc78e7d1b24fb4ae56d46f703c06c45641f8ee24441d9331b2228e890806020810162001aae565b818362001c1a62001c068462002f26565b905467ffffffffffffffff9160031b1c1690565b161462001c325762001c2c9062002a3c565b62001baf565b7fcea06f9f2bc78e7d1b24fb4ae56d46f703c06c45641f8ee24441d9331b2228e894925062001caa915062001c8462001c7d62001c0662001c7762001aae9762002e68565b62002f26565b9162002f26565b90919082549060031b9167ffffffffffffffff9283811b93849216901b16911916179055565b62001cb462003000565b91388062001bb8565b50346200000f5760206003193601126200000f5762001cdb62000391565b6001600160a01b038082169162001cf483151562002282565b62001d2662001d1e620007ce620007c1336001600160a01b03166000526003602052604060002090565b151562002c2e565b62001d5762001d50620007ce620007c1846001600160a01b03166000526003602052604060002090565b1562002ca0565b62001d8862001d81620007ce620007c1846001600160a01b03166000526006602052604060002090565b1562002cec565b62001e1c62001dae620007c1336001600160a01b03166000526003602052604060002090565b9162001ddb606562001dd3856001600160a01b03166000526005602052604060002090565b541062002d38565b62001dfe8362000840836001600160a01b03166000526003602052604060002090565b6200142b836001600160a01b03166000526005602052604060002090565b16907f8e0c709111388f5480579514d86663489ab1f206fe6da1a0c4d03ac8c318b3c6600080a3005b50346200000f576000806003193601126200101557600b5462001e688162002088565b9060409262001e7a84519384620005ad565b818352601f1962001e8b8362002088565b016020903682860137815b83811062001ead578551806200056e878262000930565b8067ffffffffffffffff62001ec662001f0d9362002f26565b90549060031b1c1684526009835262001f0762001eed8886206001600160a01b0390541690565b62001ef9838962002a5b565b906001600160a01b03169052565b62002a3c565b62001e96565b50346200000f5760206003193601126200000f5762001f3162000391565b62001f3b62002229565b6001600160a01b03809116801562001f965760009182548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346200000f5760206003193601126200000f576001600160a01b036200202662000391565b16600052600e602052602060ff604060002054166040519015158152f35b50346200000f5760206003193601126200000f576001600160a01b036200206a62000391565b16600052600d602052602060ff604060002054166040519015158152f35b60209067ffffffffffffffff8111620020a3575b60051b0190565b620020ad62000572565b6200209c565b50346200000f5760606003193601126200000f57620020d162000391565b67ffffffffffffffff906024358281116200000f57620020f6903690600401620005d1565b906044359283116200000f57366023840112156200000f5782600401356200211e8162002088565b936200212e6040519586620005ad565b81855260209160248387019160051b830101913683116200000f57602401905b82821062002167576200056e620018018888886200254f565b813581529083019083016200214e565b50346200000f576200218936620016f6565b90620021b560016200175e62000555969596336001600160a01b0316600052600f602052604060002090565b60405193620021e26320c286c360e11b948587526020968781806200179460048201906001602083019252565b7fc1a817229c15999766e602bca79965ec75780caeb4c58b34fc0b29b332ab2d896200181b62001801620007c1336001600160a01b03166000526004602052604060002090565b6001600160a01b036000541633036200223e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156200228a57565b606460405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d207a65726f2061646472657373006044820152fd5b15620022d657565b608460405162461bcd60e51b8152602060048201526024808201527f5065726d697373696f6e733a2053656e646572206973206e6f74206120616c6c60448201527f6f776564000000000000000000000000000000000000000000000000000000006064820152fd5b60005b838110620023535750506000910152565b818101518382015260200162002342565b90601f19601f60209362002384815180928187528780880191016200233f565b0116010190565b9060206200239e92818152019062002364565b90565b15620023a957565b606460405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d20656d70747920737472696e67006044820152fd5b6020620024089181604051938285809451938492016200233f565b8101600281520301902090565b156200241d57565b606460405162461bcd60e51b815260206004820152601260248201527f73616c7420616c72656164792074616b656e00000000000000000000000000006044820152fd5b156200246957565b608460405162461bcd60e51b8152602060048201526024808201527f77616c6c657420616c7265616479206c696e6b656420746f20616e206964656e60448201527f74697479000000000000000000000000000000000000000000000000000000006064820152fd5b50634e487b7160e01b600052603260045260246000fd5b805482101562002503575b60005260206000200190600090565b6200250d620024d2565b620024f4565b9062000c7b62000ceb92805490680100000000000000008210156200253f575b600182018155620024e9565b6200254962000572565b62002533565b6200055592600090338252602090600d82526001946040918660ff8487205416151514801562002945575b6200258590620022ce565b6001600160a01b0390818716966200259f88151562002282565b845193620025fe87860186620025b684836200238b565b0396620025cc601f1998898101835282620005ad565b5190208751898101906200076481620025f18460409060208152600060208201520190565b038a8101835282620005ad565b6200261d620007916200078d62002615846200295b565b9d8e620023ed565b620026476200137e620007ce620007c1856001600160a01b03166000526003602052604060002090565b6200265583511515620029b3565b62002691620008106200268a307f00000000000000000000000000000000000000000000000000000000000000008f620030a0565b9c620023ed565b620026b48b62000840846001600160a01b03166000526003602052604060002090565b620026d782620008408d6001600160a01b03166000526004602052604060002090565b620026fa826200142b8d6001600160a01b03166000526005602052604060002090565b6200271c620008108c6001600160a01b0316600052600f602052604060002090565b828a6200272b60085460ff1690565b15151462002931575b5050889287908b16995b62002829575b505050508282620027db927f8e0c709111388f5480579514d86663489ab1f206fe6da1a0c4d03ac8c318b3c6969594516200279884820192826200075730869190916001600160a01b036020820193169052565b5190209051809381927f53d413c5000000000000000000000000000000000000000000000000000000008352600483016020600191939293604081019481520152565b0381868a5af1801562002819575b620027f6575b505080a390565b816200281092903d106200186c57620018638183620005ad565b503880620027ef565b6200282362002b0b565b620027e9565b82518110156200292b57806200287d62002848620028f2938662002a5b565b5188516001600160a01b0386168b820190815290620028728160208401038b8101835282620005ad565b519020141562002a81565b8888620028d98d62002890858962002a5b565b518b519485809481937f1d381240000000000000000000000000000000000000000000000000000000008352600483016040600191939293606081019481528260208201520152565b03925af180156200291b575b620028f9575b5062002a3c565b836200273e565b6200291390893d8b116200186c57620018638183620005ad565b5038620028eb565b6200292562002b0b565b620028e5565b62002744565b6200293d91836200341b565b388262002734565b50600e84528285205460ff16151587146200257a565b9062000ceb602360405180947f4f494400000000000000000000000000000000000000000000000000000000006020830152620029a281518092602086860191016200233f565b8101036003810185520183620005ad565b15620029bb57565b608460405162461bcd60e51b815260206004820152602560248201527f696e76616c696420617267756d656e74202d20656d707479206c697374206f6660448201527f206b6579730000000000000000000000000000000000000000000000000000006064820152fd5b50634e487b7160e01b600052601160045260246000fd5b600190600019811462002a4d570190565b62002a5762002a25565b0190565b602091815181101562002a71575b60051b010190565b62002a7b620024d2565b62002a69565b1562002a8957565b608460405162461bcd60e51b815260206004820152603b60248201527f696e76616c696420617267756d656e74202d2077616c6c657420697320616c7360448201527f6f206c697374656420696e206d616e6167656d656e74206b65797300000000006064820152fd5b908160209103126200000f57516200239e8162000cd1565b506040513d6000823e3d90fd5b1562002b2057565b606460405162461bcd60e51b815260206004820152601e60248201527f6f6e6c7920466163746f7279206f72206f776e65722063616e2063616c6c00006044820152fd5b9062000ceb602560405180947f546f6b656e000000000000000000000000000000000000000000000000000000602083015262002bab81518092602086860191016200233f565b8101036005810185520183620005ad565b1562002bc457565b608460405162461bcd60e51b815260206004820152602360248201527f746f6b656e20616c7265616479206c696e6b656420746f20616e206964656e7460448201527f69747900000000000000000000000000000000000000000000000000000000006064820152fd5b1562002c3657565b608460405162461bcd60e51b815260206004820152602960248201527f77616c6c6574206e6f74206c696e6b656420746f20616e206964656e7469747960448201527f20636f6e747261637400000000000000000000000000000000000000000000006064820152fd5b1562002ca857565b606460405162461bcd60e51b815260206004820152601960248201527f6e65772077616c6c657420616c7265616479206c696e6b6564000000000000006044820152fd5b1562002cf457565b606460405162461bcd60e51b815260206004820152602060248201527f696e76616c696420617267756d656e74202d20746f6b656e20616464726573736044820152fd5b1562002d4057565b608460405162461bcd60e51b815260206004820152602560248201527f6d617820616d6f756e74206f662077616c6c657473207065722049442065786360448201527f65656465640000000000000000000000000000000000000000000000000000006064820152fd5b1562002db257565b608460405162461bcd60e51b815260206004820152602260248201527f63616e6e6f742062652063616c6c6564206f6e2073656e64657220616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b1562002e2457565b606460405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061206c696e6b65642077616c6c65742063616e20756e6c696e6b006044820152fd5b90600019820191821162002e7857565b62000ceb62002a25565b50634e487b7160e01b600052603160045260246000fd5b6000198154801562002eca575b019062002eb48282620024e9565b6001600160a01b0382549160031b1b1916905555565b62002ed462002e82565b62002ea6565b1562002ee257565b606460405162461bcd60e51b815260206004820152601560248201527f6761746577617920616c726561647920616464656400000000000000000000006044820152fd5b90600b5482101562002f68575b600b60005260188260021c7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9019260031b1690565b62002f72620024d2565b62002f33565b62000ceb9062001c84600b546801000000000000000081101562002fa4575b60018101600b5562002f26565b62002fae62000572565b62002f97565b1562002fbc57565b606460405162461bcd60e51b815260206004820152601260248201527f7265636569766572206e6f7420616464656400000000000000000000000000006044820152fd5b600019600b54801562003033575b016200301a8162002f26565b67ffffffffffffffff82549160031b1b19169055600b55565b6200303d62002e82565b6200300e565b6001600160a01b03908116600081815260066020526040902054821615620030775760005260066020526040600020541690565b5060036020526040600020541690565b6020908260405193849283378101600281520301902090565b6200314660206200239e94936105199460405195620030c284820188620005ad565b808752838701906200392f823960405192848401926001600160a01b0380921684521660408401523060608401526060835262003124608084019784891067ffffffffffffffff8a11176200314c575b8860405251809260a08601906200233f565b8201620031398351809360a08401906200233f565b01038085520183620005ad565b6200315c565b6200315662000572565b62003112565b6040516200318a602082816200317c81830196878151938492016200233f565b8101038084520182620005ad565b519020908051906020016000f5803b156200000f576001600160a01b0381167ff40fcec21964ffb566044d083b4073f29f7f7929110ea19e1b3ebe375d89055e600080a290565b94919367ffffffffffffffff6200321794921686526001600160a01b03809281602097168789015216604087015216606085015260c0608085015260c084019062002364565b9160a08184039101528060605192838152019160809160005b8281106200323f575050505090565b83518552938101939281019260010162003230565b9367ffffffffffffffff6200329b94929693961685526001600160a01b03809281602098168888015216604086015216606084015260c0608084015260c083019062002364565b9060a081830391015281808451928381520193019160005b828110620032c2575050505090565b835185529381019392810192600101620032b3565b91909160005b600b54811015620034155762003307620007ce620007ce620007ce600c546001600160a01b031690565b906200331762001c068262002f26565b62003348620007c16200332e62001c068562002f26565b67ffffffffffffffff166000526009602052604060002090565b906200337a620007c16200336062001c068662002f26565b67ffffffffffffffff16600052600a602052604060002090565b843b156200000f57620033e194869360008094620033c98c604051988997889687957ff75b0ec300000000000000000000000000000000000000000000000000000000875260048701620031d1565b03925af1801562003405575b620033e7575062002a3c565b620032dd565b80620033f7620033fe9262000589565b806200035b565b38620028eb565b6200340f62002b0b565b620033d5565b50509050565b9092919260005b600b54811015620034e1576200344c620007ce620007ce620007ce600c546001600160a01b031690565b906200345c62001c068262002f26565b62003473620007c16200332e62001c068562002f26565b906200348b620007c16200336062001c068662002f26565b843b156200000f57620034db94879360008094620033c98d8b604051998a98899788967ff75b0ec30000000000000000000000000000000000000000000000000000000088526004880162003254565b62003422565b5050509050565b15620034f057565b608460405162461bcd60e51b8152602060048201526024808201527f5065726d697373696f6e733a2053656e646572206973206e6f742061204d616e60448201527f61676572000000000000000000000000000000000000000000000000000000006064820152fd5b156200356157565b606460405162461bcd60e51b815260206004820152601060248201527f496e76616c6964204964656e74697479000000000000000000000000000000006044820152fd5b15620035ad57565b608460405162461bcd60e51b815260206004820152602360248201527f5065726d697373696f6e733a204f6e6c79204964656e746974792063616e204360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152fd5b926200363b6200239e95936200364a93865260806020870152608086019062002364565b90848203604086015262002364565b91606081840391015262002364565b94957f6ecc8862e587399c270764c32a5b20be85d8217ea399faa49aa04803f2e645d59193620037426001600160a01b0392969496620036b660016200175e62000555336001600160a01b0316600052600f602052604060002090565b604051996200370c6320c286c360e11b9a8b8d5260208d819e8080620036e56004869401906001602083019252565b03816000335af1918215620037c0575b6000926200379e575b5050151590151514620035a5565b62003732620007ce620007c1336001600160a01b03166000526004602052604060002090565b9660405195869516998562003617565b0390a4604051908152600060048201528181806024810103816000335af180156200378e575b62003771575050565b816200378b92903d106200186c57620018638183620005ad565b50565b6200379862002b0b565b62003768565b620037b89250803d106200186c57620018638183620005ad565b388e620036fe565b620037ca62002b0b565b620036f5565b93906200239e959362003813936001600160a01b036200380493168752602087015260a0604087015260a086019062002364565b90848203606086015262002364565b91608081840391015262002364565b959362003742620038ca987f4a4d2944838c03f4f55259ccea3b43da71c7ae20941cbf3981d737d0df2636b994966001600160a01b039496986200388360016200175e62000555336001600160a01b0316600052600f602052604060002090565b6040516320c286c360e11b8082526001600483015260209d909c90918e9081816024816000335af19182156200391e575b600092620038fc575050151590151514620035a5565b620038ec620007c1336001600160a01b03166000526004602052604060002090565b99604051968796169a86620037d0565b620039169250803d106200186c57620018638183620005ad565b388f620036fe565b6200392862002b0b565b620038b456fe6080604090808252346101e657606081610519803803809161002182856101eb565b8339810103126101e6576100348161020e565b602091600461004f8561004886850161020e565b930161020e565b916001600160a01b0390859085831690839061006c831515610222565b1695610079871515610222565b7f821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc55875163557887a160e11b815293849182905afa9182156101db576000926101a1575b508551928584019463485cc95560e01b8652602485015216604483015260448252608082019060018060401b039383831085841117610185576000938493885251915af4903d1561019b573d90811161018557835190610126601f8201601f19168501836101eb565b81526000833d92013e5b156101435750516102aa908161026f8239f35b606491519062461bcd60e51b82526004820152601660248201527f496e697469616c697a6174696f6e206661696c65642e000000000000000000006044820152fd5b634e487b7160e01b600052604160045260246000fd5b50610130565b90918582813d83116101d4575b6101b881836101eb565b810103126101d157506101ca9061020e565b90386100bd565b80fd5b503d6101ae565b86513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761018557604052565b51906001600160a01b03821682036101e657565b1561022957565b60405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d207a65726f2061646472657373006044820152606490fdfe608080604052600436101561011b575b6000816020816004849561006d73ffffffffffffffffffffffffffffffffffffffff7f821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc541673ffffffffffffffffffffffffffffffffffffffff1690565b7faaf10f420000000000000000000000000000000000000000000000000000000082525afa90811561010e575b82916100e1575b50368280378136917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8f05a01f43d90816000803e156100dd576000f35b6000fd5b61010091506020903d8211610106575b6100fa826101a4565b01610215565b386100a1565b3d91506100f1565b610116610267565b61009a565b6000803560e01c632307f88214610132575061000f565b90346101a057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a05760209073ffffffffffffffffffffffffffffffffffffffff7f821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc54168152f35b5080fd5b601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09101166080016080811067ffffffffffffffff8211176101e657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060209101126102625760805173ffffffffffffffffffffffffffffffffffffffff811681036102625790565b600080fd5b506040513d6000823e3d90fdfea264697066735822122083706edf8447da720c06bd407053cb5f181c237417e1f831e8cfcb4e1a26a3c564736f6c63430008110033a2646970667358221220805a152c14f11f092a35d442663bef7ed2d4216fa38b72aea6acf13ad7ed49b964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addReceiver(uint64,address,address)": {
        "details": "See {IdFactory-addReceiver}."
      },
      "addTokenFactory(address)": {
        "details": "See {IdFactory-addTokenFactory}."
      },
      "createIdentity(address,string)": {
        "details": "See {IdFactory-createIdentity}."
      },
      "createIdentityWithManagementKeys(address,string,bytes32[])": {
        "details": "See {IdFactory-createIdentityWithManagementKeys}."
      },
      "createTokenIdentity(address,address,string)": {
        "details": "See {IdFactory-createTokenIdentity}."
      },
      "getBridge()": {
        "details": "get bridge address"
      },
      "getChainSelectors()": {
        "details": "See {IdFactory-getChainSelectors}."
      },
      "getIdentity(address)": {
        "details": "See {IdFactory-getIdentity}."
      },
      "getReceiver(uint64)": {
        "details": "See {IdFactory-getReceiver}."
      },
      "getReceivers()": {
        "details": "See {IdFactory-getReceivers}."
      },
      "getToken(address)": {
        "details": "See {IdFactory-getToken}."
      },
      "getWallets(address)": {
        "details": "See {IdFactory-getWallets}."
      },
      "implementationAuthority()": {
        "details": "See {IdFactory-implementationAuthority}."
      },
      "isSaltTaken(string)": {
        "details": "See {IdFactory-isSaltTaken}."
      },
      "isTokenFactory(address)": {
        "details": "See {IdFactory-isTokenFactory}."
      },
      "linkWallet(address)": {
        "details": "See {IdFactory-linkWallet}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeReceiver(uint64)": {
        "details": "See {IdFactory-removeReceiver}."
      },
      "removeTokenFactory(address)": {
        "details": "See {IdFactory-removeTokenFactory}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBridge(address)": {
        "params": {
          "_bridge": "the address of the bridge contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlinkWallet(address)": {
        "details": "See {IdFactory-unlinkWallet}."
      }
    },
    "stateVariables": {
      "bridge": {
        "details": "getter for the bridge contract address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddedKey(address,bytes32,uint256,uint256)": {
        "notice": "events"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 259,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13710,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_tokenFactories",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13716,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_saltTaken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 13720,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_userIdentity",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13724,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_identityWallet",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13729,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_wallets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 13733,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_tokenIdentity",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13737,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_tokenAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13739,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "_isHomeChain",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 13743,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "destinationChainSelectorToReceiver",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint64,t_address)"
      },
      {
        "astId": 13747,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "destinationChainSelectorToGateway",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint64,t_address)"
      },
      {
        "astId": 13750,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "chainSelectors",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 13752,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "bridge",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 13756,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "isAllowedContract",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13760,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "isManager",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13764,
        "contract": "src/factory/IdFactory.sol:IdFactory",
        "label": "isCreatedIdentity",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}