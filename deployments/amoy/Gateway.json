{
  "address": "0xF378EA9678581F17bc92d13915A12d3C9265C495",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "idFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "signersToApprove",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "ExpiredSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "RevokedSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "SignatureAlreadyRevoked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "SignatureNotRevoked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerAlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerAlreadyNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManySigners",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "UnapprovedSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "SignatureApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "SignatureRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "approveSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "approveSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedSigners",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identityOwner",
          "type": "address"
        }
      ],
      "name": "deployIdentityForWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identityOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "signatureExpiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deployIdentityWithSalt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identityOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "managementKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "signatureExpiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "deployIdentityWithSaltAndManagementKeys",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idFactory",
      "outputs": [
        {
          "internalType": "contract IdFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "revokeSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "revokeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "revokedSignatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferFactoryOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8472de1e9bf00a56499d56b7fa0ebf60a552b9e67c3dcc4b874b4bc70c507c8d",
  "receipt": {
    "to": null,
    "from": "0x5EB124675c38ff71d81760F5F9A3D75BF7509FE0",
    "contractAddress": "0xF378EA9678581F17bc92d13915A12d3C9265C495",
    "transactionIndex": 0,
    "gasUsed": "1489222",
    "logsBloom": "0x
    "blockHash": "0xd79971d2c92705eb5bf61530ada4f0a4cf0caa3d71f367bfdea4930969d17a84",
    "transactionHash": "0x8472de1e9bf00a56499d56b7fa0ebf60a552b9e67c3dcc4b874b4bc70c507c8d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9293579,
        "transactionHash": "0x8472de1e9bf00a56499d56b7fa0ebf60a552b9e67c3dcc4b874b4bc70c507c8d",
        "address": "0xF378EA9678581F17bc92d13915A12d3C9265C495",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005eb124675c38ff71d81760f5f9a3d75bf7509fe0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd79971d2c92705eb5bf61530ada4f0a4cf0caa3d71f367bfdea4930969d17a84"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9293579,
        "transactionHash": "0x8472de1e9bf00a56499d56b7fa0ebf60a552b9e67c3dcc4b874b4bc70c507c8d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005eb124675c38ff71d81760f5f9a3d75bf7509fe0",
          "0x000000000000000000000000033aaded92ebfec6c818624f28a8e4b3c571ab6f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a047ee5fc17ba00000000000000000000000000000000000000000000000009282445a3968b3fe00000000000000000000000000000000000000000000006c7a28ae08a6644a6c00000000000000000000000000000000000000000000000091e1fc6bd9a7385e00000000000000000000000000000000000000000000006c7ac8f5f70625c60c",
        "logIndex": 1,
        "blockHash": "0xd79971d2c92705eb5bf61530ada4f0a4cf0caa3d71f367bfdea4930969d17a84"
      }
    ],
    "blockNumber": 9293579,
    "cumulativeGasUsed": "1489222",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x787da7F27D3ac75657C3e8bdD72187d6871aaeff",
    [
      "0x5EB124675c38ff71d81760F5F9A3D75BF7509FE0"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "ff28d295d54863f7690d3ec1186c2ab3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"idFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"signersToApprove\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"RevokedSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureAlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureNotRevoked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAlreadyApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAlreadyNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"UnapprovedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"approveSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"approveSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedSigners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityOwner\",\"type\":\"address\"}],\"name\":\"deployIdentityForWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deployIdentityWithSalt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"managementKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deployIdentityWithSaltAndManagementKeys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idFactory\",\"outputs\":[{\"internalType\":\"contract IdFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"revokeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"revokedSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferFactoryOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveSignature(bytes)\":{\"details\":\"Remove a signature from the revoke list.\",\"params\":{\"signature\":\"the signature to approve.\"}},\"approveSigner(address)\":{\"details\":\"Approve a signer to sign ONCHAINID deployments. If the Gateway is setup to require signature, only  deployments requested with a valid signature from an approved signer will be accepted.  If the gateway does not require a signature,\",\"params\":{\"signer\":\"the signer address to approve.\"}},\"callFactory(bytes)\":{\"details\":\"Call a function on the factory. Only the owner of the Gateway can call this method.\",\"params\":{\"data\":\"the data to call on the factory.\"}},\"constructor\":{\"details\":\"Constructor for the ONCHAINID Factory Gateway.\",\"params\":{\"idFactoryAddress\":\"the address of the factory to operate (the Gateway must be owner of the Factory).\"}},\"deployIdentityForWallet(address)\":{\"details\":\"Deploy an ONCHAINID using a factory using the identityOwner address as salt.\",\"params\":{\"identityOwner\":\"the address to set as a management key.\"}},\"deployIdentityWithSalt(address,string,uint256,bytes)\":{\"details\":\"Deploy an ONCHAINID using a factory. The operation must be signed by  an approved public key. This method allow to deploy an ONCHAINID using a custom salt.\",\"params\":{\"identityOwner\":\"the address to set as a management key.\",\"salt\":\"to use for the deployment.\",\"signature\":\"the approval containing the salt and the identityOwner address.\",\"signatureExpiry\":\"the block timestamp where the signature will expire.\"}},\"deployIdentityWithSaltAndManagementKeys(address,string,bytes32[],uint256,bytes)\":{\"details\":\"Deploy an ONCHAINID using a factory. The operation must be signed by  an approved public key. This method allow to deploy an ONCHAINID using a custom salt and a custom list of  management keys. Note that the identity Owner address won't be added as a management keys, if this is desired,  the key hash must be listed in the managementKeys array.\",\"params\":{\"identityOwner\":\"the address to set as a management key.\",\"managementKeys\":\"the list of management keys to add to the ONCHAINID.\",\"salt\":\"to use for the deployment.\",\"signature\":\"the approval containing the salt and the identityOwner address.\",\"signatureExpiry\":\"the block timestamp where the signature will expire.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeSignature(bytes)\":{\"details\":\"Revoke a signature, if the signature is used to deploy an ONCHAINID, the deployment would be rejected.\",\"params\":{\"signature\":\"the signature to revoke.\"}},\"revokeSigner(address)\":{\"details\":\"Revoke a signer to sign ONCHAINID deployments.\",\"params\":{\"signer\":\"the signer address to revoke.\"}},\"transferFactoryOwnership(address)\":{\"details\":\"Transfer the ownership of the factory to a new owner.\",\"params\":{\"newOwner\":\"the new owner of the factory.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ExpiredSignature(bytes)\":[{\"notice\":\"A requested ONCHAINID deployment was requested with a signature that expired.\"}],\"RevokedSignature(bytes)\":[{\"notice\":\"A requested ONCHAINID deployment was requested with a signature revoked.\"}],\"SignatureAlreadyRevoked(bytes)\":[{\"notice\":\"Attempted to revoke a signature that was already revoked.\"}],\"SignatureNotRevoked(bytes)\":[{\"notice\":\"Attempted to approve a signature that was not revoked.\"}],\"SignerAlreadyApproved(address)\":[{\"notice\":\"The signed attempted to add was already approved.\"}],\"SignerAlreadyNotApproved(address)\":[{\"notice\":\"The signed attempted to remove was not approved.\"}],\"TooManySigners()\":[{\"notice\":\"The maximum number of signers was reached at deployment.\"}],\"UnapprovedSigner(address)\":[{\"notice\":\"A requested ONCHAINID deployment was requested and signer by a non approved signer.\"}],\"ZeroAddress()\":[{\"notice\":\"A required parameter was set to the Zero address.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gateway/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/factory/IIdFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IIdFactory {\\n\\t/// events\\n\\n\\t// event emitted whenever a single contract is deployed by the factory\\n\\tevent Deployed(address indexed _addr);\\n\\n\\t// event emitted when a wallet is linked to an ONCHAINID contract\\n\\tevent WalletLinked(address indexed wallet, address indexed identity);\\n\\n\\t// event emitted when a token is linked to an ONCHAINID contract\\n\\tevent TokenLinked(address indexed token, address indexed identity);\\n\\n\\t// event emitted when a wallet is unlinked from an ONCHAINID contract\\n\\tevent WalletUnlinked(address indexed wallet, address indexed identity);\\n\\n\\t// event emitted when an address is registered on the factory as a Token\\n\\t// factory address, granting this address the privilege to issue\\n\\t// Onchain identities for tokens\\n\\tevent TokenFactoryAdded(address indexed factory);\\n\\n\\t// event emitted when a previously recorded token factory address is removed\\n\\tevent TokenFactoryRemoved(address indexed factory);\\n\\n\\t/// functions\\n\\n\\t/**\\n\\t *  @dev function used to create a new Identity proxy from the factory\\n\\t *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n\\t *  @param _salt the salt used by create2 to issue the contract\\n\\t *  requires a new salt for each deployment\\n\\t *  _wallet cannot be linked to another ONCHAINID\\n\\t *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n\\t *  of the function, including calls to oracles for multichain\\n\\t *  deployment security (avoid identity theft), defining payment requirements, etc.\\n\\t */\\n\\tfunction createIdentity(address _wallet, string memory _salt) external returns (address);\\n\\n\\t/**\\n\\t *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\\n\\t * MANAGEMENT keys.\\n\\t *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n\\t *  @param _salt the salt used by create2 to issue the contract\\n\\t *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\\n\\t *  requires a new salt for each deployment\\n\\t *  _wallet cannot be linked to another ONCHAINID\\n\\t *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n\\t *  of the function, including calls to oracles for multichain\\n\\t *  deployment security (avoid identity theft), defining payment requirements, etc.\\n\\t */\\n\\tfunction createIdentityWithManagementKeys(\\n\\t\\taddress _wallet,\\n\\t\\tstring memory _salt,\\n\\t\\tbytes32[] memory _managementKeys\\n\\t) external returns (address);\\n\\n\\t/**\\n\\t *  @dev function used to create a new Token Identity proxy from the factory\\n\\t *  @param _token the address of the token contract\\n\\t *  @param _tokenOwner the owner address of the token\\n\\t *  @param _salt the salt used by create2 to issue the contract\\n\\t *  requires a new salt for each deployment\\n\\t *  _token cannot be linked to another ONCHAINID\\n\\t *  only Token factory or owner can call (owner should only use its privilege\\n\\t *  for tokens not issued by a Token factory onchain\\n\\t */\\n\\tfunction createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\\n\\n\\t/**\\n\\t *  @dev function used to link a new wallet to an existing identity\\n\\t *  @param _newWallet the address of the wallet to link\\n\\t *  requires msg.sender to be linked to an existing onchainid\\n\\t *  the _newWallet will be linked to the same OID contract as msg.sender\\n\\t *  _newWallet cannot be linked to an OID yet\\n\\t *  _newWallet cannot be address 0\\n\\t *  cannot link more than 100 wallets to an OID, for gas consumption reason\\n\\t */\\n\\tfunction linkWallet(address _newWallet) external;\\n\\n\\t/**\\n\\t *  @dev function used to unlink a wallet from an existing identity\\n\\t *  @param _oldWallet the address of the wallet to unlink\\n\\t *  requires msg.sender to be linked to the same onchainid as _oldWallet\\n\\t *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\\n\\t *  _oldWallet cannot be address 0\\n\\t */\\n\\tfunction unlinkWallet(address _oldWallet) external;\\n\\n\\t/**\\n\\t *  @dev function used to register an address as a token factory\\n\\t *  @param _factory the address of the token factory\\n\\t *  can be called only by Owner\\n\\t *  _factory cannot be registered yet\\n\\t *  once the factory has been registered it can deploy token identities\\n\\t */\\n\\tfunction addTokenFactory(address _factory) external;\\n\\n\\t/**\\n\\t *  @dev function used to unregister an address previously registered as a token factory\\n\\t *  @param _factory the address of the token factory\\n\\t *  can be called only by Owner\\n\\t *  _factory has to be registered previously\\n\\t *  once the factory has been unregistered it cannot deploy token identities anymore\\n\\t */\\n\\tfunction removeTokenFactory(address _factory) external;\\n\\n\\t/**\\n\\t *  @dev getter for OID contract corresponding to a wallet/token\\n\\t *  @param _wallet the wallet/token address\\n\\t */\\n\\tfunction getIdentity(address _wallet) external view returns (address);\\n\\n\\t/**\\n\\t *  @dev getter to fetch the array of wallets linked to an OID contract\\n\\t *  @param _identity the address of the OID contract\\n\\t *  returns an array of addresses linked to the OID\\n\\t */\\n\\tfunction getWallets(address _identity) external view returns (address[] memory);\\n\\n\\t/**\\n\\t *  @dev getter to fetch the token address linked to an OID contract\\n\\t *  @param _identity the address of the OID contract\\n\\t *  returns the address linked to the OID\\n\\t */\\n\\tfunction getToken(address _identity) external view returns (address);\\n\\n\\t/**\\n\\t *  @dev getter to know if an address is registered as token factory or not\\n\\t *  @param _factory the address of the factory\\n\\t *  returns true if the address corresponds to a registered factory\\n\\t */\\n\\tfunction isTokenFactory(address _factory) external view returns (bool);\\n\\n\\t/**\\n\\t *  @dev getter to know if a salt is taken for the create2 deployment\\n\\t *  @param _salt the salt used for deployment\\n\\t */\\n\\tfunction isSaltTaken(string calldata _salt) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev getter for the implementation authority used by this factory.\\n\\t */\\n\\tfunction implementationAuthority() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdbbd266f8e7d6d1c6d683166465c2a5ec1b7011b7e6c6a0d40e53f199f2e3fc1\",\"license\":\"GPL-3.0\"},\"src/factory/IdFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"../proxy/IdentityProxy.sol\\\";\\nimport \\\"./IIdFactory.sol\\\";\\nimport \\\"../interface/IERC734.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract IdFactory is IIdFactory, Ownable {\\n\\tmapping(address => bool) private _tokenFactories;\\n\\n\\t// address of the _implementationAuthority contract making the link to the implementation contract\\n\\taddress private immutable _implementationAuthority;\\n\\n\\t// as it is not possible to deploy 2 times the same contract address, this mapping allows us to check which\\n\\t// salt is taken and which is not\\n\\tmapping(string => bool) private _saltTaken;\\n\\n\\t// ONCHAINID of the wallet owner\\n\\tmapping(address => address) private _userIdentity;\\n\\n\\t// wallets currently linked to an ONCHAINID\\n\\tmapping(address => address[]) private _wallets;\\n\\n\\t// ONCHAINID of the token\\n\\tmapping(address => address) private _tokenIdentity;\\n\\n\\t// token linked to an ONCHAINID\\n\\tmapping(address => address) private _tokenAddress;\\n\\n\\t// setting\\n\\tconstructor(address implementationAuthority) {\\n\\t\\trequire(implementationAuthority != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\t_implementationAuthority = implementationAuthority;\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-addTokenFactory}.\\n\\t */\\n\\tfunction addTokenFactory(address _factory) external override onlyOwner {\\n\\t\\trequire(_factory != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(!isTokenFactory(_factory), \\\"already a factory\\\");\\n\\t\\t_tokenFactories[_factory] = true;\\n\\t\\temit TokenFactoryAdded(_factory);\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-removeTokenFactory}.\\n\\t */\\n\\tfunction removeTokenFactory(address _factory) external override onlyOwner {\\n\\t\\trequire(_factory != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(isTokenFactory(_factory), \\\"not a factory\\\");\\n\\t\\t_tokenFactories[_factory] = false;\\n\\t\\temit TokenFactoryRemoved(_factory);\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-createIdentity}.\\n\\t */\\n\\tfunction createIdentity(address _wallet, string memory _salt) external override onlyOwner returns (address) {\\n\\t\\trequire(_wallet != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(keccak256(abi.encode(_salt)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n\\t\\tstring memory oidSalt = string.concat(\\\"OID\\\", _salt);\\n\\t\\trequire(!_saltTaken[oidSalt], \\\"salt already taken\\\");\\n\\t\\trequire(_userIdentity[_wallet] == address(0), \\\"wallet already linked to an identity\\\");\\n\\t\\taddress identity = _deployIdentity(oidSalt, _implementationAuthority, _wallet);\\n\\t\\t_saltTaken[oidSalt] = true;\\n\\t\\t_userIdentity[_wallet] = identity;\\n\\t\\t_wallets[identity].push(_wallet);\\n\\t\\temit WalletLinked(_wallet, identity);\\n\\t\\treturn identity;\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-createIdentityWithManagementKeys}.\\n\\t */\\n\\tfunction createIdentityWithManagementKeys(\\n\\t\\taddress _wallet,\\n\\t\\tstring memory _salt,\\n\\t\\tbytes32[] memory _managementKeys\\n\\t) external override onlyOwner returns (address) {\\n\\t\\trequire(_wallet != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(keccak256(abi.encode(_salt)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n\\t\\tstring memory oidSalt = string.concat(\\\"OID\\\", _salt);\\n\\t\\trequire(!_saltTaken[oidSalt], \\\"salt already taken\\\");\\n\\t\\trequire(_userIdentity[_wallet] == address(0), \\\"wallet already linked to an identity\\\");\\n\\t\\trequire(_managementKeys.length > 0, \\\"invalid argument - empty list of keys\\\");\\n\\n\\t\\taddress identity = _deployIdentity(oidSalt, _implementationAuthority, address(this));\\n\\n\\t\\tfor (uint i = 0; i < _managementKeys.length; i++) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_managementKeys[i] != keccak256(abi.encode(_wallet)),\\n\\t\\t\\t\\t\\\"invalid argument - wallet is also listed in management keys\\\"\\n\\t\\t\\t);\\n\\t\\t\\tIERC734(identity).addKey(_managementKeys[i], 1, 1);\\n\\t\\t}\\n\\n\\t\\tIERC734(identity).removeKey(keccak256(abi.encode(address(this))), 1);\\n\\n\\t\\t_saltTaken[oidSalt] = true;\\n\\t\\t_userIdentity[_wallet] = identity;\\n\\t\\t_wallets[identity].push(_wallet);\\n\\t\\temit WalletLinked(_wallet, identity);\\n\\n\\t\\treturn identity;\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-createTokenIdentity}.\\n\\t */\\n\\tfunction createTokenIdentity(\\n\\t\\taddress _token,\\n\\t\\taddress _tokenOwner,\\n\\t\\tstring memory _salt\\n\\t) external override returns (address) {\\n\\t\\trequire(isTokenFactory(msg.sender) || msg.sender == owner(), \\\"only Factory or owner can call\\\");\\n\\t\\trequire(_token != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(_tokenOwner != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(keccak256(abi.encode(_salt)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n\\t\\tstring memory tokenIdSalt = string.concat(\\\"Token\\\", _salt);\\n\\t\\trequire(!_saltTaken[tokenIdSalt], \\\"salt already taken\\\");\\n\\t\\trequire(_tokenIdentity[_token] == address(0), \\\"token already linked to an identity\\\");\\n\\t\\taddress identity = _deployIdentity(tokenIdSalt, _implementationAuthority, _tokenOwner);\\n\\t\\t_saltTaken[tokenIdSalt] = true;\\n\\t\\t_tokenIdentity[_token] = identity;\\n\\t\\t_tokenAddress[identity] = _token;\\n\\t\\temit TokenLinked(_token, identity);\\n\\t\\treturn identity;\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-linkWallet}.\\n\\t */\\n\\tfunction linkWallet(address _newWallet) external override {\\n\\t\\trequire(_newWallet != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(_userIdentity[msg.sender] != address(0), \\\"wallet not linked to an identity contract\\\");\\n\\t\\trequire(_userIdentity[_newWallet] == address(0), \\\"new wallet already linked\\\");\\n\\t\\trequire(_tokenIdentity[_newWallet] == address(0), \\\"invalid argument - token address\\\");\\n\\t\\taddress identity = _userIdentity[msg.sender];\\n\\t\\trequire(_wallets[identity].length < 101, \\\"max amount of wallets per ID exceeded\\\");\\n\\t\\t_userIdentity[_newWallet] = identity;\\n\\t\\t_wallets[identity].push(_newWallet);\\n\\t\\temit WalletLinked(_newWallet, identity);\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-unlinkWallet}.\\n\\t */\\n\\tfunction unlinkWallet(address _oldWallet) external override {\\n\\t\\trequire(_oldWallet != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(_oldWallet != msg.sender, \\\"cannot be called on sender address\\\");\\n\\t\\trequire(_userIdentity[msg.sender] == _userIdentity[_oldWallet], \\\"only a linked wallet can unlink\\\");\\n\\t\\taddress _identity = _userIdentity[_oldWallet];\\n\\t\\tdelete _userIdentity[_oldWallet];\\n\\t\\tuint256 length = _wallets[_identity].length;\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\tif (_wallets[_identity][i] == _oldWallet) {\\n\\t\\t\\t\\t_wallets[_identity][i] = _wallets[_identity][length - 1];\\n\\t\\t\\t\\t_wallets[_identity].pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit WalletUnlinked(_oldWallet, _identity);\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-getIdentity}.\\n\\t */\\n\\tfunction getIdentity(address _wallet) external view override returns (address) {\\n\\t\\tif (_tokenIdentity[_wallet] != address(0)) {\\n\\t\\t\\treturn _tokenIdentity[_wallet];\\n\\t\\t} else {\\n\\t\\t\\treturn _userIdentity[_wallet];\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-isSaltTaken}.\\n\\t */\\n\\tfunction isSaltTaken(string calldata _salt) external view override returns (bool) {\\n\\t\\treturn _saltTaken[_salt];\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-getWallets}.\\n\\t */\\n\\tfunction getWallets(address _identity) external view override returns (address[] memory) {\\n\\t\\treturn _wallets[_identity];\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-getToken}.\\n\\t */\\n\\tfunction getToken(address _identity) external view override returns (address) {\\n\\t\\treturn _tokenAddress[_identity];\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-isTokenFactory}.\\n\\t */\\n\\tfunction isTokenFactory(address _factory) public view override returns (bool) {\\n\\t\\treturn _tokenFactories[_factory];\\n\\t}\\n\\n\\t/**\\n\\t *  @dev See {IdFactory-implementationAuthority}.\\n\\t */\\n\\tfunction implementationAuthority() public view override returns (address) {\\n\\t\\treturn _implementationAuthority;\\n\\t}\\n\\n\\t// deploy function with create2 opcode call\\n\\t// returns the address of the contract created\\n\\tfunction _deploy(string memory salt, bytes memory bytecode) private returns (address) {\\n\\t\\tbytes32 saltBytes = bytes32(keccak256(abi.encodePacked(salt)));\\n\\t\\taddress addr;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tlet encoded_data := add(0x20, bytecode) // load initialization code.\\n\\t\\t\\tlet encoded_size := mload(bytecode) // load init code's length.\\n\\t\\t\\taddr := create2(0, encoded_data, encoded_size, saltBytes)\\n\\t\\t\\tif iszero(extcodesize(addr)) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit Deployed(addr);\\n\\t\\treturn addr;\\n\\t}\\n\\n\\t// function used to deploy an identity using CREATE2\\n\\tfunction _deployIdentity(\\n\\t\\tstring memory _salt,\\n\\t\\taddress implementationAuthority,\\n\\t\\taddress _wallet\\n\\t) private returns (address) {\\n\\t\\tbytes memory _code = type(IdentityProxy).creationCode;\\n\\t\\tbytes memory _constructData = abi.encode(implementationAuthority, _wallet);\\n\\t\\tbytes memory bytecode = abi.encodePacked(_code, _constructData);\\n\\t\\treturn _deploy(_salt, bytecode);\\n\\t}\\n}\\n\",\"keccak256\":\"0x842f6f8a52efa93d9637e51c62b77ebe99fdfcb937fdf52af3d9d344d21f0c04\",\"license\":\"GPL-3.0\"},\"src/gateway/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../factory/IdFactory.sol\\\";\\n\\nusing ECDSA for bytes32;\\n\\n/// A required parameter was set to the Zero address.\\nerror ZeroAddress();\\n/// The maximum number of signers was reached at deployment.\\nerror TooManySigners();\\n/// The signed attempted to add was already approved.\\nerror SignerAlreadyApproved(address signer);\\n/// The signed attempted to remove was not approved.\\nerror SignerAlreadyNotApproved(address signer);\\n/// A requested ONCHAINID deployment was requested without a valid signature while the Gateway requires one.\\nerror UnsignedDeployment();\\n/// A requested ONCHAINID deployment was requested and signer by a non approved signer.\\nerror UnapprovedSigner(address signer);\\n/// A requested ONCHAINID deployment was requested with a signature revoked.\\nerror RevokedSignature(bytes signature);\\n/// A requested ONCHAINID deployment was requested with a signature that expired.\\nerror ExpiredSignature(bytes signature);\\n/// Attempted to revoke a signature that was already revoked.\\nerror SignatureAlreadyRevoked(bytes signature);\\n/// Attempted to approve a signature that was not revoked.\\nerror SignatureNotRevoked(bytes signature);\\n\\ncontract Gateway is Ownable {\\n    IdFactory public idFactory;\\n    mapping(address => bool) public approvedSigners;\\n    mapping(bytes => bool) public revokedSignatures;\\n\\n    event SignerApproved(address indexed signer);\\n    event SignerRevoked(address indexed signer);\\n    event SignatureRevoked(bytes indexed signature);\\n    event SignatureApproved(bytes indexed signature);\\n\\n    /**\\n     *  @dev Constructor for the ONCHAINID Factory Gateway.\\n     *  @param idFactoryAddress the address of the factory to operate (the Gateway must be owner of the Factory).\\n     */\\n    constructor(address idFactoryAddress, address[] memory signersToApprove) Ownable() {\\n        if (idFactoryAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (signersToApprove.length > 10) {\\n            revert TooManySigners();\\n        }\\n\\n        for (uint i = 0; i < signersToApprove.length; i++) {\\n            approvedSigners[signersToApprove[i]] = true;\\n        }\\n\\n        idFactory = IdFactory(idFactoryAddress);\\n    }\\n\\n    /**\\n     *  @dev Approve a signer to sign ONCHAINID deployments. If the Gateway is setup to require signature, only\\n     *  deployments requested with a valid signature from an approved signer will be accepted.\\n     *  If the gateway does not require a signature,\\n     *  @param signer the signer address to approve.\\n     */\\n    function approveSigner(address signer) external onlyOwner {\\n        if (signer == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (approvedSigners[signer]) {\\n            revert SignerAlreadyApproved(signer);\\n        }\\n\\n        approvedSigners[signer] = true;\\n\\n        emit SignerApproved(signer);\\n    }\\n\\n    /**\\n     *  @dev Revoke a signer to sign ONCHAINID deployments.\\n     *  @param signer the signer address to revoke.\\n     */\\n    function revokeSigner(address signer) external onlyOwner {\\n        if (signer == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (!approvedSigners[signer]) {\\n            revert SignerAlreadyNotApproved(signer);\\n        }\\n\\n        delete approvedSigners[signer];\\n\\n        emit SignerRevoked(signer);\\n    }\\n\\n    /**\\n     *  @dev Deploy an ONCHAINID using a factory. The operation must be signed by\\n     *  an approved public key. This method allow to deploy an ONCHAINID using a custom salt.\\n     *  @param identityOwner the address to set as a management key.\\n     *  @param salt to use for the deployment.\\n     *  @param signatureExpiry the block timestamp where the signature will expire.\\n     *  @param signature the approval containing the salt and the identityOwner address.\\n     */\\n    function deployIdentityWithSalt(\\n        address identityOwner,\\n        string memory salt,\\n        uint256 signatureExpiry,\\n        bytes calldata signature\\n    ) external returns (address) {\\n        if (identityOwner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (signatureExpiry != 0 && signatureExpiry < block.timestamp) {\\n            revert ExpiredSignature(signature);\\n        }\\n\\n        address signer = ECDSA.recover(\\n            keccak256(\\n                abi.encode(\\n                    \\\"Authorize ONCHAINID deployment\\\",\\n                    identityOwner,\\n                    salt,\\n                    signatureExpiry\\n                )\\n            ).toEthSignedMessageHash(),\\n            signature\\n        );\\n\\n        if (!approvedSigners[signer]) {\\n            revert UnapprovedSigner(signer);\\n        }\\n\\n        if (revokedSignatures[signature]) {\\n            revert RevokedSignature(signature);\\n        }\\n\\n        return idFactory.createIdentity(identityOwner, salt);\\n    }\\n\\n    /**\\n     *  @dev Deploy an ONCHAINID using a factory. The operation must be signed by\\n     *  an approved public key. This method allow to deploy an ONCHAINID using a custom salt and a custom list of\\n     *  management keys. Note that the identity Owner address won't be added as a management keys, if this is desired,\\n     *  the key hash must be listed in the managementKeys array.\\n     *  @param identityOwner the address to set as a management key.\\n     *  @param salt to use for the deployment.\\n     *  @param managementKeys the list of management keys to add to the ONCHAINID.\\n     *  @param signatureExpiry the block timestamp where the signature will expire.\\n     *  @param signature the approval containing the salt and the identityOwner address.\\n     */\\n    function deployIdentityWithSaltAndManagementKeys(\\n        address identityOwner,\\n        string memory salt,\\n        bytes32[] calldata managementKeys,\\n        uint256 signatureExpiry,\\n        bytes calldata signature\\n    ) external returns (address) {\\n        if (identityOwner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (signatureExpiry != 0 && signatureExpiry < block.timestamp) {\\n            revert ExpiredSignature(signature);\\n        }\\n\\n        address signer = ECDSA.recover(\\n            keccak256(\\n                abi.encode(\\n                    \\\"Authorize ONCHAINID deployment\\\",\\n                    identityOwner,\\n                    salt,\\n                    managementKeys,\\n                    signatureExpiry\\n                )\\n            ).toEthSignedMessageHash(),\\n            signature\\n        );\\n\\n        if (!approvedSigners[signer]) {\\n            revert UnapprovedSigner(signer);\\n        }\\n\\n        if (revokedSignatures[signature]) {\\n            revert RevokedSignature(signature);\\n        }\\n\\n        return idFactory.createIdentityWithManagementKeys(identityOwner, salt, managementKeys);\\n    }\\n\\n    /**\\n     *  @dev Deploy an ONCHAINID using a factory using the identityOwner address as salt.\\n     *  @param identityOwner the address to set as a management key.\\n     */\\n    function deployIdentityForWallet(address identityOwner) external returns (address) {\\n        if (identityOwner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        return idFactory.createIdentity(identityOwner, Strings.toHexString(identityOwner));\\n    }\\n\\n    /**\\n     *  @dev Revoke a signature, if the signature is used to deploy an ONCHAINID, the deployment would be rejected.\\n     *  @param signature the signature to revoke.\\n     */\\n    function revokeSignature(bytes calldata signature) external onlyOwner {\\n        if (revokedSignatures[signature]) {\\n            revert SignatureAlreadyRevoked(signature);\\n        }\\n\\n        revokedSignatures[signature] = true;\\n\\n        emit SignatureRevoked(signature);\\n    }\\n\\n    /**\\n     *  @dev Remove a signature from the revoke list.\\n     *  @param signature the signature to approve.\\n     */\\n    function approveSignature(bytes calldata signature) external onlyOwner {\\n        if (!revokedSignatures[signature]) {\\n            revert SignatureNotRevoked(signature);\\n        }\\n\\n        delete revokedSignatures[signature];\\n\\n        emit SignatureApproved(signature);\\n    }\\n\\n    /**\\n     *  @dev Transfer the ownership of the factory to a new owner.\\n     *  @param newOwner the new owner of the factory.\\n     */\\n    function transferFactoryOwnership(address newOwner) external onlyOwner {\\n        idFactory.transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     *  @dev Call a function on the factory. Only the owner of the Gateway can call this method.\\n     *  @param data the data to call on the factory.\\n     */\\n    function callFactory(bytes memory data) external onlyOwner {\\n        (bool success,) = address(idFactory).call(data);\\n        require(success, \\\"Gateway: call to factory failed\\\");\\n    }\\n}\",\"keccak256\":\"0xb71e7691658831f15c3bae81d6507f3ecc7110804c0ee8f21945f8eccc8bf47b\",\"license\":\"GPL-3.0\"},\"src/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\t/**\\n\\t * @dev Emitted when an execution request was approved.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was successfully called.\\n\\t */\\n\\tevent Approved(uint256 indexed executionId, bool approved);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was approved and successfully performed.\\n\\t *\\n\\t * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n\\t */\\n\\tevent Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execution request was performed via `execute`.\\n\\t *\\n\\t * Specification: MUST be triggered when execute was successfully called.\\n\\t */\\n\\tevent ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when an execute operation was called and failed\\n\\t *\\n\\t * Specification: MUST be triggered when execute call failed\\n\\t */\\n\\tevent ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was added to the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when addKey was successfully called.\\n\\t */\\n\\tevent KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\t/**\\n\\t * @dev Emitted when a key was removed from the Identity.\\n\\t *\\n\\t * Specification: MUST be triggered when removeKey was successfully called.\\n\\t */\\n\\tevent KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n\\t/**\\n\\t * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n\\t *\\n\\t * Triggers Event: `KeyAdded`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity\\n\\t * itself. If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Approves an execution.\\n\\t *\\n\\t * Triggers Event: `Approved`\\n\\t * Triggers on execution successful Event: `Executed`\\n\\t * Triggers on execution failure Event: `ExecutionFailed`\\n\\t */\\n\\tfunction approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Removes _purpose for _key from the identity.\\n\\t *\\n\\t * Triggers Event: `KeyRemoved`\\n\\t *\\n\\t * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n\\t * If it's the identity itself, the approval process will determine its approval.\\n\\t */\\n\\tfunction removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n\\t/**\\n\\t * @dev Passes an execution instruction to an ERC734 identity.\\n\\t * How the execution is handled is up to the identity implementation:\\n\\t * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n\\t * approve this execution.\\n\\t * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n\\t *\\n\\t * Triggers Event: ExecutionRequested\\n\\t * Triggers on direct execution Event: Executed\\n\\t */\\n\\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n\\t/**\\n\\t * @dev Returns the full key data, if present in the identity.\\n\\t */\\n\\tfunction getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n\\t/**\\n\\t * @dev Returns the list of purposes associated with a key.\\n\\t */\\n\\tfunction getKeyPurposes(bytes32 _key) external view returns (uint256[] memory _purposes);\\n\\n\\t/**\\n\\t * @dev Returns an array of public key bytes32 held by this identity.\\n\\t */\\n\\tfunction getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n\\t/**\\n\\t * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n\\t */\\n\\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0xf409f08bfdd6b283a6bcdaf2fc1780f43815d3ed9b25baaad16133cc64b072ae\",\"license\":\"GPL-3.0\"},\"src/interface/IImplementationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface IImplementationAuthority {\\n\\t// event emitted when the implementation contract is updated\\n\\tevent UpdatedImplementation(address newAddress);\\n\\n\\t/**\\n\\t * @dev updates the address used as implementation by the proxies linked\\n\\t * to this ImplementationAuthority contract\\n\\t * @param _newImplementation the address of the new implementation contract\\n\\t * only Owner can call\\n\\t */\\n\\tfunction updateImplementation(address _newImplementation) external;\\n\\n\\t/**\\n\\t * @dev returns the address of the implementation\\n\\t */\\n\\tfunction getImplementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x949a5f9238b5e95797eeef34e34c05ad9546d41b17be5be54acb5859a3c99918\",\"license\":\"GPL-3.0\"},\"src/proxy/IdentityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interface/IImplementationAuthority.sol\\\";\\n\\ncontract IdentityProxy {\\n\\t/**\\n\\t *  @dev constructor of the proxy Identity contract\\n\\t *  @param _implementationAuthority the implementation Authority contract address\\n\\t *  @param initialManagementKey the management key at deployment\\n\\t *  the proxy is going to use the logic deployed on the implementation contract\\n\\t *  deployed at an address listed in the ImplementationAuthority contract\\n\\t */\\n\\tconstructor(address _implementationAuthority, address initialManagementKey) {\\n\\t\\trequire(_implementationAuthority != address(0), \\\"invalid argument - zero address\\\");\\n\\t\\trequire(initialManagementKey != address(0), \\\"invalid argument - zero address\\\");\\n\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tsstore(0x821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc, _implementationAuthority)\\n\\t\\t}\\n\\n\\t\\taddress logic = IImplementationAuthority(_implementationAuthority).getImplementation();\\n\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t(bool success, ) = logic.delegatecall(abi.encodeWithSignature(\\\"initialize(address)\\\", initialManagementKey));\\n\\t\\trequire(success, \\\"Initialization failed.\\\");\\n\\t}\\n\\n\\t/**\\n\\t *  @dev fallback proxy function used for any transaction call that is made using\\n\\t *  the Identity contract ABI and called on the proxy contract\\n\\t *  The proxy will update its local storage depending on the behaviour requested\\n\\t *  by the implementation contract given by the Implementation Authority\\n\\t */\\n\\t// solhint-disable-next-line no-complex-fallback\\n\\tfallback() external payable {\\n\\t\\taddress logic = IImplementationAuthority(implementationAuthority()).getImplementation();\\n\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tcalldatacopy(0x0, 0x0, calldatasize())\\n\\t\\t\\tlet success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\\n\\t\\t\\tlet retSz := returndatasize()\\n\\t\\t\\treturndatacopy(0, 0, retSz)\\n\\t\\t\\tswitch success\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\trevert(0, retSz)\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\treturn(0, retSz)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction implementationAuthority() public view returns (address) {\\n\\t\\taddress implemAuth;\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\timplemAuth := sload(0x821f3e4d3d679f19eacc940c87acf846ea6eae24a63058ea750304437a62aafc)\\n\\t\\t}\\n\\t\\treturn implemAuth;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0d1c2daaf19d9e4fb2afe29a5ccffd598caaa4baa33a99015031392bd92b88a0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b7b38038062001b7b8339810160408190526200003491620001a5565b6200003f3362000122565b6001600160a01b038216620000675760405163d92e233d60e01b815260040160405180910390fd5b600a815111156200008b57604051630dc92ed360e11b815260040160405180910390fd5b60005b8151811015620000fa57600160026000848481518110620000b357620000b36200028e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000f181620002a4565b9150506200008e565b5050600180546001600160a01b0319166001600160a01b0392909216919091179055620002cc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200018a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620001b957600080fd5b620001c48362000172565b602084810151919350906001600160401b0380821115620001e457600080fd5b818601915086601f830112620001f957600080fd5b8151818111156200020e576200020e6200018f565b8060051b604051601f19603f830116810181811085821117156200023657620002366200018f565b6040529182528482019250838101850191898311156200025557600080fd5b938501935b828510156200027e576200026e8562000172565b845293850193928501926200025a565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060018201620002c557634e487b7160e01b600052601160045260246000fd5b5060010190565b61189f80620002dc6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638a87551211610097578063ccbfc6ed11610066578063ccbfc6ed14610218578063d70aa0ee1461022b578063e9ba23631461023e578063f2fde38b1461025157600080fd5b80638a875512146101be5780638da5cb5b146101e15780639c5c5ce7146101f2578063c34b44a01461020557600080fd5b80634e2984e4116100d35780634e2984e414610152578063715018a61461019057806378e751a6146101985780637d963e6f146101ab57600080fd5b806309f29c09146100fa57806317f67a151461010f5780633e8e6e8b1461013f575b600080fd5b61010d6101083660046112d9565b610264565b005b61012261011d3660046113a1565b610326565b6040516001600160a01b0390911681526020015b60405180910390f35b61012261014d366004611428565b610593565b6101806101603660046112d9565b805160208183018101805160038252928201919093012091525460ff1681565b6040519015158152602001610136565b61010d61063d565b600154610122906001600160a01b031681565b61010d6101b9366004611445565b610651565b6101806101cc366004611428565b60026020526000908152604090205460ff1681565b6000546001600160a01b0316610122565b61010d610200366004611428565b610722565b61010d610213366004611428565b6107a5565b61010d610226366004611445565b61087a565b61010d610239366004611428565b610958565b61012261024c366004611487565b610a31565b61010d61025f366004611428565b610c23565b61026c610cb3565b6001546040516000916001600160a01b03169061028a90849061158d565b6000604051808303816000865af19150503d80600081146102c7576040519150601f19603f3d011682016040523d82523d6000602084013e6102cc565b606091505b50509050806103225760405162461bcd60e51b815260206004820152601f60248201527f476174657761793a2063616c6c20746f20666163746f7279206661696c65640060448201526064015b60405180910390fd5b5050565b60006001600160a01b03861661034f5760405163d92e233d60e01b815260040160405180910390fd5b831580159061035d57504284105b156103985782826040517f0cfe7ed80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b600061043a6103fe8888886040516020016103b593929190611604565b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d0d92505050565b6001600160a01b03811660009081526002602052604090205490915060ff1661049a576040517faf3c81720000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b600384846040516104ac929190611673565b9081526040519081900360200190205460ff16156104fa5783836040517fa6dff9f80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6001546040517f8e952bfe0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690638e952bfe90610545908a908a90600401611683565b6020604051808303816000875af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058891906116a5565b979650505050505050565b60006001600160a01b0382166105bc5760405163d92e233d60e01b815260040160405180910390fd5b6001546001600160a01b0316638e952bfe836105d781610d31565b6040518363ffffffff1660e01b81526004016105f4929190611683565b6020604051808303816000875af1158015610613573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063791906116a5565b92915050565b610645610cb3565b61064f6000610d47565b565b610659610cb3565b6003828260405161066b929190611673565b9081526040519081900360200190205460ff166106b85781816040517f6fae15fa0000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b600382826040516106ca929190611673565b908152604051908190036020018120805460ff191690556106ee9083908390611673565b604051908190038120907fb54b0481f674d73e0a7e0805771909ebd61fadc85286160239121febb142fabf90600090a25050565b61072a610cb3565b6001546040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b5050505050565b6107ad610cb3565b6001600160a01b0381166107d45760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526002602052604090205460ff16610831576040517f2742ecb40000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b6001600160a01b038116600081815260026020526040808220805460ff19169055517f99a705a3c2c3339d0051f56b36a60fef91e30142c93353002617999f27aec4af9190a250565b610882610cb3565b60038282604051610894929190611673565b9081526040519081900360200190205460ff16156108e25781816040517f8bf3b1f10000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6001600383836040516108f6929190611673565b908152604051908190036020018120805492151560ff19909316929092179091556109249083908390611673565b604051908190038120907f2cb4d732f179a7333da89a4da3f3f9a9cbe3f6d7ac090ab062c69c303da32ff790600090a25050565b610960610cb3565b6001600160a01b0381166109875760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526002602052604090205460ff16156109e5576040517f122524420000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517fc031114b6ddff79d71c2554dbce316b1327bb3dad01c60b76d8e8b23ff27ea289190a250565b60006001600160a01b038816610a5a5760405163d92e233d60e01b815260040160405180910390fd5b8315801590610a6857504284105b15610aa35782826040517f0cfe7ed80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6000610ac46103fe8a8a8a8a8a6040516020016103b595949392919061170d565b6001600160a01b03811660009081526002602052604090205490915060ff16610b24576040517faf3c81720000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b60038484604051610b36929190611673565b9081526040519081900360200190205460ff1615610b845783836040517fa6dff9f80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6001546040517ffe5cd59a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063fe5cd59a90610bd3908c908c908c908c90600401611793565b6020604051808303816000875af1158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1691906116a5565b9998505050505050505050565b610c2b610cb3565b6001600160a01b038116610ca75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610319565b610cb081610d47565b50565b6000546001600160a01b0316331461064f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610319565b6000806000610d1c8585610daf565b91509150610d2981610df4565b509392505050565b60606106376001600160a01b0383166014610f59565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808251604103610de55760208301516040840151606085015160001a610dd987828585611189565b94509450505050610ded565b506000905060025b9250929050565b6000816004811115610e0857610e086117c8565b03610e105750565b6001816004811115610e2457610e246117c8565b03610e715760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610319565b6002816004811115610e8557610e856117c8565b03610ed25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610319565b6003816004811115610ee657610ee66117c8565b03610cb05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610319565b60606000610f688360026117f4565b610f7390600261180b565b67ffffffffffffffff811115610f8b57610f8b61124d565b6040519080825280601f01601f191660200182016040528015610fb5576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610fec57610fec61181e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061104f5761104f61181e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061108b8460026117f4565b61109690600161180b565b90505b6001811115611133577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106110d7576110d761181e565b1a60f81b8282815181106110ed576110ed61181e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361112c81611834565b9050611099565b5083156111825760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610319565b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111c05750600090506003611244565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611214573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661123d57600060019250925050611244565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561127e5761127e61124d565b604051601f8501601f19908116603f011681019082821181831017156112a6576112a661124d565b816040528093508581528686860111156112bf57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156112eb57600080fd5b813567ffffffffffffffff81111561130257600080fd5b8201601f8101841361131357600080fd5b61132284823560208401611263565b949350505050565b6001600160a01b0381168114610cb057600080fd5b600082601f83011261135057600080fd5b61118283833560208501611263565b60008083601f84011261137157600080fd5b50813567ffffffffffffffff81111561138957600080fd5b602083019150836020828501011115610ded57600080fd5b6000806000806000608086880312156113b957600080fd5b85356113c48161132a565b9450602086013567ffffffffffffffff808211156113e157600080fd5b6113ed89838a0161133f565b955060408801359450606088013591508082111561140a57600080fd5b506114178882890161135f565b969995985093965092949392505050565b60006020828403121561143a57600080fd5b81356111828161132a565b6000806020838503121561145857600080fd5b823567ffffffffffffffff81111561146f57600080fd5b61147b8582860161135f565b90969095509350505050565b600080600080600080600060a0888a0312156114a257600080fd5b87356114ad8161132a565b9650602088013567ffffffffffffffff808211156114ca57600080fd5b6114d68b838c0161133f565b975060408a01359150808211156114ec57600080fd5b818a0191508a601f83011261150057600080fd5b81358181111561150f57600080fd5b8b60208260051b850101111561152457600080fd5b6020830197508096505060608a0135945060808a013591508082111561154957600080fd5b506115568a828b0161135f565b989b979a50959850939692959293505050565b60005b8381101561158457818101518382015260200161156c565b50506000910152565b6000825161159f818460208701611569565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600081518084526115f0816020860160208601611569565b601f01601f19169290920160200192915050565b60808152600061164160808301601e81527f417574686f72697a65204f4e434841494e4944206465706c6f796d656e740000602082015260400190565b6001600160a01b0386166020840152828103604084015261166281866115d8565b915050826060830152949350505050565b8183823760009101908152919050565b6001600160a01b038316815260406020820152600061132260408301846115d8565b6000602082840312156116b757600080fd5b81516111828161132a565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156116f457600080fd5b8260051b80836020870137939093016020019392505050565b60a08152600061174a60a08301601e81527f417574686f72697a65204f4e434841494e4944206465706c6f796d656e740000602082015260400190565b6001600160a01b0388166020840152828103604084015261176b81886115d8565b905082810360608401526117808186886116c2565b9150508260808301529695505050505050565b6001600160a01b03851681526060602082015260006117b560608301866115d8565b82810360408401526105888185876116c2565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610637576106376117de565b80820180821115610637576106376117de565b634e487b7160e01b600052603260045260246000fd5b600081611843576118436117de565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220c9e65c357de5c1dbbec87499b4d1ccbd933f5af3f59fd44aac1d5a2303e132d564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638a87551211610097578063ccbfc6ed11610066578063ccbfc6ed14610218578063d70aa0ee1461022b578063e9ba23631461023e578063f2fde38b1461025157600080fd5b80638a875512146101be5780638da5cb5b146101e15780639c5c5ce7146101f2578063c34b44a01461020557600080fd5b80634e2984e4116100d35780634e2984e414610152578063715018a61461019057806378e751a6146101985780637d963e6f146101ab57600080fd5b806309f29c09146100fa57806317f67a151461010f5780633e8e6e8b1461013f575b600080fd5b61010d6101083660046112d9565b610264565b005b61012261011d3660046113a1565b610326565b6040516001600160a01b0390911681526020015b60405180910390f35b61012261014d366004611428565b610593565b6101806101603660046112d9565b805160208183018101805160038252928201919093012091525460ff1681565b6040519015158152602001610136565b61010d61063d565b600154610122906001600160a01b031681565b61010d6101b9366004611445565b610651565b6101806101cc366004611428565b60026020526000908152604090205460ff1681565b6000546001600160a01b0316610122565b61010d610200366004611428565b610722565b61010d610213366004611428565b6107a5565b61010d610226366004611445565b61087a565b61010d610239366004611428565b610958565b61012261024c366004611487565b610a31565b61010d61025f366004611428565b610c23565b61026c610cb3565b6001546040516000916001600160a01b03169061028a90849061158d565b6000604051808303816000865af19150503d80600081146102c7576040519150601f19603f3d011682016040523d82523d6000602084013e6102cc565b606091505b50509050806103225760405162461bcd60e51b815260206004820152601f60248201527f476174657761793a2063616c6c20746f20666163746f7279206661696c65640060448201526064015b60405180910390fd5b5050565b60006001600160a01b03861661034f5760405163d92e233d60e01b815260040160405180910390fd5b831580159061035d57504284105b156103985782826040517f0cfe7ed80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b600061043a6103fe8888886040516020016103b593929190611604565b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d0d92505050565b6001600160a01b03811660009081526002602052604090205490915060ff1661049a576040517faf3c81720000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b600384846040516104ac929190611673565b9081526040519081900360200190205460ff16156104fa5783836040517fa6dff9f80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6001546040517f8e952bfe0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690638e952bfe90610545908a908a90600401611683565b6020604051808303816000875af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058891906116a5565b979650505050505050565b60006001600160a01b0382166105bc5760405163d92e233d60e01b815260040160405180910390fd5b6001546001600160a01b0316638e952bfe836105d781610d31565b6040518363ffffffff1660e01b81526004016105f4929190611683565b6020604051808303816000875af1158015610613573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063791906116a5565b92915050565b610645610cb3565b61064f6000610d47565b565b610659610cb3565b6003828260405161066b929190611673565b9081526040519081900360200190205460ff166106b85781816040517f6fae15fa0000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b600382826040516106ca929190611673565b908152604051908190036020018120805460ff191690556106ee9083908390611673565b604051908190038120907fb54b0481f674d73e0a7e0805771909ebd61fadc85286160239121febb142fabf90600090a25050565b61072a610cb3565b6001546040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b5050505050565b6107ad610cb3565b6001600160a01b0381166107d45760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526002602052604090205460ff16610831576040517f2742ecb40000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b6001600160a01b038116600081815260026020526040808220805460ff19169055517f99a705a3c2c3339d0051f56b36a60fef91e30142c93353002617999f27aec4af9190a250565b610882610cb3565b60038282604051610894929190611673565b9081526040519081900360200190205460ff16156108e25781816040517f8bf3b1f10000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6001600383836040516108f6929190611673565b908152604051908190036020018120805492151560ff19909316929092179091556109249083908390611673565b604051908190038120907f2cb4d732f179a7333da89a4da3f3f9a9cbe3f6d7ac090ab062c69c303da32ff790600090a25050565b610960610cb3565b6001600160a01b0381166109875760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526002602052604090205460ff16156109e5576040517f122524420000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517fc031114b6ddff79d71c2554dbce316b1327bb3dad01c60b76d8e8b23ff27ea289190a250565b60006001600160a01b038816610a5a5760405163d92e233d60e01b815260040160405180910390fd5b8315801590610a6857504284105b15610aa35782826040517f0cfe7ed80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6000610ac46103fe8a8a8a8a8a6040516020016103b595949392919061170d565b6001600160a01b03811660009081526002602052604090205490915060ff16610b24576040517faf3c81720000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610319565b60038484604051610b36929190611673565b9081526040519081900360200190205460ff1615610b845783836040517fa6dff9f80000000000000000000000000000000000000000000000000000000081526004016103199291906115a9565b6001546040517ffe5cd59a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063fe5cd59a90610bd3908c908c908c908c90600401611793565b6020604051808303816000875af1158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1691906116a5565b9998505050505050505050565b610c2b610cb3565b6001600160a01b038116610ca75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610319565b610cb081610d47565b50565b6000546001600160a01b0316331461064f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610319565b6000806000610d1c8585610daf565b91509150610d2981610df4565b509392505050565b60606106376001600160a01b0383166014610f59565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808251604103610de55760208301516040840151606085015160001a610dd987828585611189565b94509450505050610ded565b506000905060025b9250929050565b6000816004811115610e0857610e086117c8565b03610e105750565b6001816004811115610e2457610e246117c8565b03610e715760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610319565b6002816004811115610e8557610e856117c8565b03610ed25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610319565b6003816004811115610ee657610ee66117c8565b03610cb05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610319565b60606000610f688360026117f4565b610f7390600261180b565b67ffffffffffffffff811115610f8b57610f8b61124d565b6040519080825280601f01601f191660200182016040528015610fb5576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610fec57610fec61181e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061104f5761104f61181e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061108b8460026117f4565b61109690600161180b565b90505b6001811115611133577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106110d7576110d761181e565b1a60f81b8282815181106110ed576110ed61181e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361112c81611834565b9050611099565b5083156111825760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610319565b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111c05750600090506003611244565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611214573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661123d57600060019250925050611244565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561127e5761127e61124d565b604051601f8501601f19908116603f011681019082821181831017156112a6576112a661124d565b816040528093508581528686860111156112bf57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156112eb57600080fd5b813567ffffffffffffffff81111561130257600080fd5b8201601f8101841361131357600080fd5b61132284823560208401611263565b949350505050565b6001600160a01b0381168114610cb057600080fd5b600082601f83011261135057600080fd5b61118283833560208501611263565b60008083601f84011261137157600080fd5b50813567ffffffffffffffff81111561138957600080fd5b602083019150836020828501011115610ded57600080fd5b6000806000806000608086880312156113b957600080fd5b85356113c48161132a565b9450602086013567ffffffffffffffff808211156113e157600080fd5b6113ed89838a0161133f565b955060408801359450606088013591508082111561140a57600080fd5b506114178882890161135f565b969995985093965092949392505050565b60006020828403121561143a57600080fd5b81356111828161132a565b6000806020838503121561145857600080fd5b823567ffffffffffffffff81111561146f57600080fd5b61147b8582860161135f565b90969095509350505050565b600080600080600080600060a0888a0312156114a257600080fd5b87356114ad8161132a565b9650602088013567ffffffffffffffff808211156114ca57600080fd5b6114d68b838c0161133f565b975060408a01359150808211156114ec57600080fd5b818a0191508a601f83011261150057600080fd5b81358181111561150f57600080fd5b8b60208260051b850101111561152457600080fd5b6020830197508096505060608a0135945060808a013591508082111561154957600080fd5b506115568a828b0161135f565b989b979a50959850939692959293505050565b60005b8381101561158457818101518382015260200161156c565b50506000910152565b6000825161159f818460208701611569565b9190910192915050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600081518084526115f0816020860160208601611569565b601f01601f19169290920160200192915050565b60808152600061164160808301601e81527f417574686f72697a65204f4e434841494e4944206465706c6f796d656e740000602082015260400190565b6001600160a01b0386166020840152828103604084015261166281866115d8565b915050826060830152949350505050565b8183823760009101908152919050565b6001600160a01b038316815260406020820152600061132260408301846115d8565b6000602082840312156116b757600080fd5b81516111828161132a565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156116f457600080fd5b8260051b80836020870137939093016020019392505050565b60a08152600061174a60a08301601e81527f417574686f72697a65204f4e434841494e4944206465706c6f796d656e740000602082015260400190565b6001600160a01b0388166020840152828103604084015261176b81886115d8565b905082810360608401526117808186886116c2565b9150508260808301529695505050505050565b6001600160a01b03851681526060602082015260006117b560608301866115d8565b82810360408401526105888185876116c2565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610637576106376117de565b80820180821115610637576106376117de565b634e487b7160e01b600052603260045260246000fd5b600081611843576118436117de565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220c9e65c357de5c1dbbec87499b4d1ccbd933f5af3f59fd44aac1d5a2303e132d564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveSignature(bytes)": {
        "details": "Remove a signature from the revoke list.",
        "params": {
          "signature": "the signature to approve."
        }
      },
      "approveSigner(address)": {
        "details": "Approve a signer to sign ONCHAINID deployments. If the Gateway is setup to require signature, only  deployments requested with a valid signature from an approved signer will be accepted.  If the gateway does not require a signature,",
        "params": {
          "signer": "the signer address to approve."
        }
      },
      "callFactory(bytes)": {
        "details": "Call a function on the factory. Only the owner of the Gateway can call this method.",
        "params": {
          "data": "the data to call on the factory."
        }
      },
      "constructor": {
        "details": "Constructor for the ONCHAINID Factory Gateway.",
        "params": {
          "idFactoryAddress": "the address of the factory to operate (the Gateway must be owner of the Factory)."
        }
      },
      "deployIdentityForWallet(address)": {
        "details": "Deploy an ONCHAINID using a factory using the identityOwner address as salt.",
        "params": {
          "identityOwner": "the address to set as a management key."
        }
      },
      "deployIdentityWithSalt(address,string,uint256,bytes)": {
        "details": "Deploy an ONCHAINID using a factory. The operation must be signed by  an approved public key. This method allow to deploy an ONCHAINID using a custom salt.",
        "params": {
          "identityOwner": "the address to set as a management key.",
          "salt": "to use for the deployment.",
          "signature": "the approval containing the salt and the identityOwner address.",
          "signatureExpiry": "the block timestamp where the signature will expire."
        }
      },
      "deployIdentityWithSaltAndManagementKeys(address,string,bytes32[],uint256,bytes)": {
        "details": "Deploy an ONCHAINID using a factory. The operation must be signed by  an approved public key. This method allow to deploy an ONCHAINID using a custom salt and a custom list of  management keys. Note that the identity Owner address won't be added as a management keys, if this is desired,  the key hash must be listed in the managementKeys array.",
        "params": {
          "identityOwner": "the address to set as a management key.",
          "managementKeys": "the list of management keys to add to the ONCHAINID.",
          "salt": "to use for the deployment.",
          "signature": "the approval containing the salt and the identityOwner address.",
          "signatureExpiry": "the block timestamp where the signature will expire."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeSignature(bytes)": {
        "details": "Revoke a signature, if the signature is used to deploy an ONCHAINID, the deployment would be rejected.",
        "params": {
          "signature": "the signature to revoke."
        }
      },
      "revokeSigner(address)": {
        "details": "Revoke a signer to sign ONCHAINID deployments.",
        "params": {
          "signer": "the signer address to revoke."
        }
      },
      "transferFactoryOwnership(address)": {
        "details": "Transfer the ownership of the factory to a new owner.",
        "params": {
          "newOwner": "the new owner of the factory."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ExpiredSignature(bytes)": [
        {
          "notice": "A requested ONCHAINID deployment was requested with a signature that expired."
        }
      ],
      "RevokedSignature(bytes)": [
        {
          "notice": "A requested ONCHAINID deployment was requested with a signature revoked."
        }
      ],
      "SignatureAlreadyRevoked(bytes)": [
        {
          "notice": "Attempted to revoke a signature that was already revoked."
        }
      ],
      "SignatureNotRevoked(bytes)": [
        {
          "notice": "Attempted to approve a signature that was not revoked."
        }
      ],
      "SignerAlreadyApproved(address)": [
        {
          "notice": "The signed attempted to add was already approved."
        }
      ],
      "SignerAlreadyNotApproved(address)": [
        {
          "notice": "The signed attempted to remove was not approved."
        }
      ],
      "TooManySigners()": [
        {
          "notice": "The maximum number of signers was reached at deployment."
        }
      ],
      "UnapprovedSigner(address)": [
        {
          "notice": "A requested ONCHAINID deployment was requested and signer by a non approved signer."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "A required parameter was set to the Zero address."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4995,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "idFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IdFactory)4819"
      },
      {
        "astId": 4999,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "approvedSigners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5003,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "revokedSignatures",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IdFactory)4819": {
        "encoding": "inplace",
        "label": "contract IdFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}